import asyncio
import logging
import time

from hikkatl.errors import FloodWaitError
from hikkatl.tl.types import Message

from .. import loader, utils
from ..tl_cache import CustomTelegramClient

logger = logging.getLogger(__name__)

class AutoResponderMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    strings = {"name": "AutoResponder"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enabled",
                False,
                "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "message",
                "–Ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ.",
                "–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
                validator=loader.validators.String(),
            ),
        )
        self.last_responses = {}

    async def client_ready(self, client: CustomTelegramClient, db):
        self._client = client

    async def watcher(self, message: Message):
        if not self.config["enabled"]:
            return
        if not message.is_private or message.out:
            return
        user = message.sender_id
        if user == self._client.tg_id:
            return
        now = time.time()
        last_time = self.last_responses.get(user, 0)

        if now - last_time < 1800:
            return
        try:
            await self._send_safe_message(user)
            self.last_responses[user] = now
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)

    async def _send_safe_message(self, user_id: int):
        try:
            await self._client.send_message(user_id, self.config["message"])
        except FloodWaitError as e:
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω FloodWait: {e.seconds} —Å–µ–∫")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            raise

    @loader.command()
    async def aa(self, message: Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
        self.config["enabled"] = not self.config["enabled"]
        state = "üü¢ –í–∫–ª—é—á–µ–Ω" if self.config["enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"{state}")

    @loader.command()
    async def at(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            return
        self.config["message"] = args
        await utils.answer(message, f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{args}")

    @loader.command()
    async def a(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.config["enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        text = f"{status}\n‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: 30 –º–∏–Ω\n‚úâÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:\n{self.config['message']}"
        await utils.answer(message, text)
