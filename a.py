import asyncio
import logging
import time

from hikkatl.errors import FloodWaitError
from hikkatl.tl.types import Message

from .. import loader, utils
from ..tl_cache import CustomTelegramClient

logger = logging.getLogger(__name__)


class AutoMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    strings = {"name": "Auto"}

    def __init__(self):
        self.go = False
        self.msg = "–Ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É."
        self.lock = asyncio.Lock()
        self.last = {}

    async def client_ready(self, client: CustomTelegramClient, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        self._client = client
        self.db = db
        self.last = self.db.get("Auto", "last", {})
        saved_enabled = self.db.get("Auto", "enabled", None)
        if saved_enabled is not None:
            self.go = saved_enabled
        saved_message = self.db.get("Auto", "message", None)
        if saved_message is not None:
            self.msg = saved_message

    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if (
            not self.go
            or not message.is_private
            or message.out
        ):
            return
        
        user = message.sender_id
        now = time.time()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {now} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.sender_id}")
        
        async with self.lock:
            logger.info(f"lock")
            last_time = self.last.get(str(user), 0)
            if now - last_time < 1800:
                return
            
            self.db.set(
                "Auto",
                f"msg_{int(time.time())}_{user}",
                {"user_id": user, "text": message.text, "time": time.time()},
            )

            try:
                await self._send_safe_message(user)
                self.last[str(user)] = now
                self.db.set("Auto", "last", self.last)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            finally:
                self.last = {k: v for k, v in self.last.items() if now - v < 1800}

    async def _send_safe_message(self, user_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self._client.dispatcher.safe_api_call(
                self._client.send_message(user_id, self.msg)
            )
        except FloodWaitError as e:
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω FloodWait: {e.seconds} —Å–µ–∫")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            raise

    @loader.command()
    async def aa(self, message: Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"""
        self.go = not self.go
        self.db.set("Auto", "enabled", self.go)
        state = "üü¢ –í–∫–ª—é—á–µ–Ω" if self.go else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"{state}")

    @loader.command()
    async def at(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            return
        self.msg = args
        self.db.set("Auto", "message", args)
        await utils.answer(message, f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{args}")

    @loader.command()
    async def a(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.go else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        text = f"{status}\n‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: 30 –º–∏–Ω\n‚úâÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:\n{self.msg}"
        await utils.answer(message, text)
