import asyncio
import logging
import time

from hikkatl.errors import FloodWaitError
from hikkatl.tl.types import Message

from .. import loader, utils
from ..tl_cache import CustomTelegramClient

logger = logging.getLogger(__name__)


class AutoMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º"""

    strings = {"name": "Auto"}

    def __init__(self):
        self.go = {
            "enabled": False,
            "message": "<i>Mon esprit s'absente un instant, mais mes mots vous reviendront bient√¥t.</i>",
            "photo_url": "https://wallpapercave.com/wp/wp5418096.jpg",
            "last": {},
        }
        self.lock = asyncio.Lock()

    async def client_ready(self, client: CustomTelegramClient, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        self._client = client
        self.db = db

        for key in self.go:
            self.go[key] = self.db.get("Auto", key, self.go[key])

    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if (
            not self.go["enabled"]
            or not message.is_private
            or message.out
            or message.chat_id == self.tg_id
            or getattr(await message.get_sender(), "bot", False)
        ):
            return
        async with self.lock:
            now = time.time()
            user = message.sender_id
            logger.info(f"{user}_msg_{message.text}")
            if user == 1271266957:
                return
            last_time = self.go["last"].get(str(user), 0)
            if now - last_time < 1800:
                return
            try:
                await self._send_safe_message(user)
                self.go["last"][str(user)] = now
                self.db.set("Auto", "last", self.go["last"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True)
            finally:
                self.go["last"] = {
                    k: v for k, v in self.go["last"].items() if now - v < 1800
                }

    async def _send_safe_message(self, user_id: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self._client.dispatcher.safe_api_call(
                self._client.send_file(
                    user_id,
                    self.go["photo_url"],
                    caption=self.go["message"],
                )
            )
        except FloodWaitError as e:
            logger.warning(f"FloodWait: {e.seconds} —Å–µ–∫")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            raise

    @loader.command()
    async def a(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º"""
        args = utils.get_args_raw(message)

        if not args:
            return await self._show_help(message)
        parts = args.split(maxsplit=2)
        command = parts[0].lower()

        handlers = {
            "tg": self._toggle,
            "tt": self._set_text,
            "pt": self._set_photo,
            "st": self._show_status,
        }

        if command not in handlers:
            return await utils.answer(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        await handlers[command](message, parts[1:] if len(parts) > 1 else [])

    async def _toggle(self, message: Message, args: list):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.go["enabled"] = not self.go["enabled"]
        self.db.set("Auto", "enabled", self.go["enabled"])
        state = "üü¢ –í–∫–ª—é—á–µ–Ω" if self.go["enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"{state}")

    async def _set_text(self, message: Message, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        self.go["message"] = " ".join(args)
        self.db.set("Auto", "message", self.go["message"])
        await utils.answer(message, f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{self.go['message']}")

    async def _set_photo(self, message: Message, args: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ç–æ"""
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.go["photo_url"] = args[0]
        self.db.set("Auto", "photo_url", self.go["photo_url"])
        await utils.answer(message, f"‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:\n{self.go['photo_url']}")

    async def _show_status(self, message: Message, args: list):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.go["enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        text = (
            f"{status}\n‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: 30 –º–∏–Ω\n"
            f"‚úâÔ∏è –¢–µ–∫—Å—Ç: {self.go['message']}\n"
            f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.go['photo_url']}"
        )
        await utils.answer(message, text)

    async def _show_help(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            ".a tg - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            ".a tt —Ç–µ–∫—Å—Ç - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
            ".a pt url - –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            ".a st - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        await utils.answer(message, help_text)
