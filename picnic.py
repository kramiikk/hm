"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê1‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    Profile Photo Repeater                       
    Developer: @xdesai                           
    Optimized: @kramiikk                         
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê2‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram.

üìù –ö–æ–º–∞–Ω–¥—ã:
    ‚Ä¢ .pfp - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    ‚Ä¢ .pfpstop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

üí° –°–æ–≤–µ—Ç: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π .pfp –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ 
    —Å –∫–æ–º–∞–Ω–¥–æ–π .pfp –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è

‚ö†Ô∏è –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã,
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.
"""

import asyncio
import logging
import random
from datetime import datetime, timedelta
from telethon import functions, types, errors
from .. import loader

logger = logging.getLogger(__name__)

@loader.tds
class PfpRepeaterMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""

    strings = {"name": "PfpRepeater"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "MIN_DELAY", 3600, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
            "MAX_DELAY", 7200, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
            "COOLDOWN_MULTIPLIER", 2.0, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫"
        )
        self.running = False
        self.task = None
        self.message = None
        self.photo = None
        self.current_delay = None
        self.error_count = 0
        self.last_update = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        self.client = client
        self.db = db
        
        was_running = self.db.get(self.strings["name"], "running", False)
        if was_running:
            message_id = self.db.get(self.strings["name"], "message_id")
            chat_id = self.db.get(self.strings["name"], "chat_id")
            if message_id and chat_id:
                try:
                    self.message = await self.client.get_messages(chat_id, ids=message_id)
                    if self.message and self.message.photo:
                        self.photo = self.message.photo
                        self.running = True
                        self.task = asyncio.create_task(self.set_profile_photo())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

    async def set_profile_photo(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        self.current_delay = self.config["MIN_DELAY"]
        self.error_count = 0
        
        while self.running:
            try:
                if not self.message or not self.photo:
                    raise Exception("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.last_update:
                    time_since_update = (datetime.now() - self.last_update).total_seconds()
                    if time_since_update < self.current_delay:
                        await asyncio.sleep(self.current_delay - time_since_update)

                try:
                    await self.client(
                        functions.photos.UpdateProfilePhotoRequest(
                            id=types.InputPhoto(
                                id=self.photo.id,
                                access_hash=self.photo.access_hash,
                                file_reference=self.photo.file_reference
                            )
                        )
                    )
                    
                    self.last_update = datetime.now()
                    
                    # –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    if self.error_count > 0:
                        self.error_count -= 1
                        self.current_delay = max(
                            self.config["MIN_DELAY"],
                            self.current_delay / 1.5
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –∑–∞–¥–µ—Ä–∂–∫–µ
                    random_delay = random.uniform(
                        self.current_delay,
                        self.current_delay * 1.5
                    )
                    await asyncio.sleep(random_delay)

                except errors.FloodWaitError as e:
                    self.error_count += 1
                    self.current_delay = min(
                        self.config["MAX_DELAY"],
                        self.current_delay * self.config["COOLDOWN_MULTIPLIER"]
                    )
                    
                    wait_time = max(e.seconds, self.current_delay)
                    await self.client.send_message(
                        self.db.get(self.strings["name"], "chat_id"),
                        f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {wait_time//3600} —á–∞—Å–æ–≤."
                    )
                    await asyncio.sleep(wait_time)
                    continue
                    
            except errors.FloodWaitError as e:
                self.error_count += 1
                wait_time = max(e.seconds, self.current_delay * self.config["COOLDOWN_MULTIPLIER"])
                await asyncio.sleep(wait_time)
                continue
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ PfpRepeater: {str(e)}")
                self.error_count += 1
                
                if self.error_count >= 5:
                    self.running = False
                    self.db.set(self.strings["name"], "running", False)
                    await self.client.send_message(
                        self.db.get(self.strings["name"], "chat_id"),
                        "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥. –ú–æ–¥—É–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                    )
                    break
                    
                await asyncio.sleep(self.current_delay)

    @loader.command()
    async def pfp(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ."""
        if self.running:
            await message.edit("‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return

        reply = await message.get_reply_message()
        target_message = reply if reply and reply.photo else message if message.photo else None

        if not target_message or not target_message.photo:
            await message.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ.")
            return

        try:
            self.message = target_message
            self.photo = target_message.photo
            self.running = True
            self.last_update = None
            self.error_count = 0

            self.db.set(self.strings["name"], "message_id", target_message.id)
            self.db.set(self.strings["name"], "chat_id", message.chat_id)
            self.db.set(self.strings["name"], "running", True)

            self.task = asyncio.create_task(self.set_profile_photo())
            
            await message.edit(
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –æ—Ç "
                f"{self.config['MIN_DELAY']//3600} –¥–æ {self.config['MAX_DELAY']//3600} —á–∞—Å–æ–≤."
            )
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
            self.running = False
            self.db.set(self.strings["name"], "running", False)

    @loader.command()
    async def pfpstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.running:
            await message.edit("‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return

        try:
            self.running = False
            if self.task and not self.task.done():
                self.task.cancel()
            self.db.set(self.strings["name"], "running", False)
            await message.edit("üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")
