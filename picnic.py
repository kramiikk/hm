"""
‚ô®Ô∏è Profile Changer
‚ûï Developer: @xdesai
‚ôªÔ∏è Optimized: @kramiikk

–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
"""

import asyncio
import logging
from datetime import datetime
from collections import deque
from typing import Optional, Dict
from telethon import functions, types, errors
from telethon.errors.rpcerrorlist import (
    MessageIdInvalidError,
    PhotoInvalidDimensionsError,
    PhotoCropSizeSmallError,
    PhotoSaveFileInvalidError,
)
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class ProfileChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã"""

    strings = {
        "name": "ProfileChanger",
        "starting": "üîÑ <b>–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay_minutes} –º–∏–Ω\n‚Ä¢ ~{updates_per_hour} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—á–∞—Å\n‚Ä¢ –†–µ–∂–∏–º: {mode}",
        "stopping": "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞</b>\n\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n‚Ä¢ –í—Ä–µ–º—è: {uptime}\n‚Ä¢ –û—à–∏–±–æ–∫: {errors}",
        "stats": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n‚Ä¢ –í—Ä–µ–º—è: {uptime}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n‚Ä¢ –í —á–∞—Å: {hourly}\n‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last}\n‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n‚Ä¢ –§–ª—É–¥–≤–µ–π—Ç–æ–≤: {floods}",
        "no_photo": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ</b>",
        "already_running": "‚ö†Ô∏è <b>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</b>",
        "not_running": "‚ö†Ô∏è <b>–ù–µ –∑–∞–ø—É—â–µ–Ω–æ</b>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {error}",
        "flood_wait": "‚ö†Ô∏è <b>–§–ª—É–¥–≤–µ–π—Ç</b>\n\n‚Ä¢ –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ: {wait} –º–∏–Ω",
        "photo_invalid": "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ:</b> {error}",
        "photo_too_small": "‚ö†Ô∏è <b>–û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "safe_mode", True, "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º",
            "adaptive_delay", True, "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
            "notify_errors", True, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö",
            "default_delay", 780, "–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "min_delay", 420, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "max_delay", 1980, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "jitter", 0.3, "–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å (0.0-1.0)",
            "error_threshold", 2, "–ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫",
            "flood_multiplier", 1.2, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ñ–ª—É–¥–≤–µ–π—Ç–∞",
            "success_reduction", 0.9, "–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ",
            "min_photo_size", 512, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (px)"
        )
        self._reset()

    def _reset(self) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.running = False
        self._task = None
        self.start_time = None
        self.last_update = None
        self.update_count = 0
        self.error_count = 0
        self.flood_count = 0
        self.delay = self.config["default_delay"]
        self.chat_id = None
        self.message_id = None
        self.floods = deque(maxlen=10)
        self.success_streak = 0
        self._retries = 0
        self._lock = asyncio.Lock()
        self._last_command_time = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._me = await client.get_me()
        self._load_state()
        if self.running:
            self._task = asyncio.create_task(self._loop())
        logger.info("ProfileChanger loaded")

    async def on_unload(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if self.running:
            await self._stop("–º–æ–¥—É–ª—å –≤—ã–≥—Ä—É–∂–µ–Ω")
        logger.info("ProfileChanger unloaded")

    def _get_state(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            "running": self.running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "last_update": self.last_update.isoformat() if self.last_update else None,
            "update_count": self.update_count,
            "error_count": self.error_count,
            "flood_count": self.flood_count,
            "delay": self.delay,
            "chat_id": self.chat_id,
            "message_id": self.message_id,
            "success_streak": self.success_streak,
            "floods": [t.isoformat() for t in self.floods]
        }

    def _save_state(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            self._db.set(self.strings["name"], "state", self._get_state())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _load_state(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state = self._db.get(self.strings["name"], "state")
        if not state:
            return

        try:
            self.running = state["running"]
            self.start_time = datetime.fromisoformat(state["start_time"]) if state["start_time"] else None
            self.last_update = datetime.fromisoformat(state["last_update"]) if state["last_update"] else None
            self.update_count = state["update_count"]
            self.error_count = state["error_count"]
            self.flood_count = state["flood_count"]
            self.delay = state["delay"]
            self.chat_id = state["chat_id"]
            self.message_id = state["message_id"]
            self.success_streak = state["success_streak"]
            self.floods = deque(
                [datetime.fromisoformat(t) for t in state.get("floods", [])],
                maxlen=10
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self._reset()

    async def _check_photo_size(self, photo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ"""
        if not photo or not hasattr(photo, 'sizes'):
            return False

        min_size = self.config["min_photo_size"]
        for size in photo.sizes:
            if size.w < min_size or size.h < min_size:
                return False
        return True

    async def _get_photo(self) -> Optional[types.Photo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
        if not self.running:
            return None

        try:
            message = await self._client.get_messages(self.chat_id, ids=self.message_id)
            if not message or not message.photo:
                await self._stop("—Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
                return None

            if not await self._check_photo_size(message.photo):
                await self._stop("—Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ")
                return None

            return message.photo

        except MessageIdInvalidError:
            await self._stop("—Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None

    async def _update(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
        if not self.running:
            return False

        photo = await self._get_photo()
        if not photo:
            return False

        try:
            await self._client(functions.photos.UpdateProfilePhotoRequest(
                id=types.InputPhoto(
                    id=photo.id,
                    access_hash=photo.access_hash,
                    file_reference=photo.file_reference
                )
            ))

            self.last_update = datetime.now()
            self.update_count += 1
            self.success_streak += 1
            self._retries = 0
            logger.info(f"Photo updated successfully. Total updates: {self.update_count}")
            return True

        except errors.FloodWaitError as e:
            self.flood_count += 1
            self.floods.append(datetime.now())
            self.success_streak = 0
            self.delay = min(self.config["max_delay"], self.delay * self.config["flood_multiplier"])

            if self.config["notify_errors"]:
                await self._client.send_message(
                    self.chat_id,
                    self.strings["flood_wait"].format(
                        delay=f"{self.delay/60:.1f}",
                        wait=f"{e.seconds/60:.1f}"
                    )
                )
            logger.warning(f"FloodWait error: {e.seconds}s. New delay: {self.delay}s")
            await asyncio.sleep(e.seconds)
            return False

        except (PhotoInvalidDimensionsError, PhotoCropSizeSmallError, PhotoSaveFileInvalidError) as e:
            self.error_count += 1
            if self.config["notify_errors"]:
                await self._client.send_message(
                    self.chat_id,
                    self.strings["photo_invalid"].format(error=str(e))
                )
            await self._stop(f"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
            return False

        except Exception as e:
            self.error_count += 1
            self.success_streak = 0
            self._retries += 1

            if self.config["notify_errors"]:
                await self._client.send_message(
                    self.chat_id,
                    self.strings["error"].format(error=str(e))
                )
            logger.error(f"Update error: {e}")
            return False

    def _calculate_delay(self) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.config["adaptive_delay"]:
            return self.delay

        delay = self.delay

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–ª—É–¥–≤–µ–π—Ç—ã
        now = datetime.now()
        while self.floods and (now - self.floods[0]).total_seconds() > 3600:
            self.floods.popleft()

        if self.success_streak >= 5:
            delay = max(
                self.config["min_delay"],
                delay * self.config["success_reduction"]
            )

        if self.floods:
            recent = len(self.floods)  # –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ
            delay = min(
                self.config["max_delay"],
                delay * (self.config["flood_multiplier"] ** recent)
            )

        import random
        jitter = random.uniform(1 - self.config["jitter"], 1 + self.config["jitter"])
        return max(self.config["min_delay"], delay * jitter)

    async def _loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        while self.running:
            try:
                if await self._update():
                    await asyncio.sleep(self._calculate_delay())
                else:
                    if self._retries >= self.config["error_threshold"]:
                        await self._stop("–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫")
                        break
                    await asyncio.sleep(self.config["min_delay"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(self.config["min_delay"])

    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        if hours:
            return f"{int(hours)}—á {int(minutes)}–º"
        elif minutes:
            return f"{int(minutes)}–º {round(seconds)}—Å"
        return f"{round(seconds)}—Å"

    def _get_stats(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        now = datetime.now()
        uptime = (now - self.start_time).total_seconds() if self.start_time else 0
        last = (now - self.last_update).total_seconds() if self.last_update else 0

        return {
            "status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.running else "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "uptime": self._format_time(uptime),
            "count": str(self.update_count),
            "hourly": f"{self.update_count / (uptime/3600):.1f}" if uptime > 0 else "0",
            "delay": f"{self.delay/60:.1f}",
            "last": self._format_time(last) if self.last_update else "–Ω–∏–∫–æ–≥–¥–∞",
            "errors": str(self.error_count),
            "floods": str(self.flood_count)
        }

    async def _start(self, chat_id: int, message_id: int) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ"""
        self.running = True
        self.start_time = datetime.now()
        self.chat_id = chat_id
        self.message_id = message_id
        self._retries = 0
        self._save_state()
        self._task = asyncio.create_task(self._loop())
        logger.info("Profile changer started")

    async def _stop(self, reason: Optional[str] = None) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ"""
        if self.running:
            self.running = False
            self._save_state()
            if self._task:
                self._task.cancel()
            await self._client.send_message(
                self.chat_id,
                self.strings["stopping"].format(
                    count=self.update_count,
                    uptime=self._format_time(
                        (datetime.now() - self.start_time).total_seconds()
                    ) if self.start_time else "0—Å",
                    errors=self.error_count
                ) + (f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else "")
            )
            logger.info(f"Profile changer stopped. {reason if reason else ''}")
            self._reset()

    @loader.command()
    async def pfp(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ (–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ)"""
        async with self._lock:
            if hasattr(self, '_last_command_time'):
                if (datetime.now() - self._last_command_time).total_seconds() < 3:
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self._last_command_time = datetime.now()

            if self.running:
                await utils.answer(message, self.strings["already_running"])
                return

            target = await message.get_reply_message() if message.is_reply else message
            photo_entity = target.photo if target else None

            if not photo_entity:
                await utils.answer(message, self.strings["no_photo"])
                return

            if not await self._check_photo_size(photo_entity):
                await utils.answer(message, self.strings["photo_too_small"])
                return

            await self._start(message.chat_id, target.id)
            await utils.answer(message, self.strings["starting"].format(
                delay_minutes=f"{self.delay/60:.1f}",
                updates_per_hour=f"{3600/self.delay:.1f}",
                mode="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π" if self.config["safe_mode"] else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
            ))

    @loader.command()
    async def pfpstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
        async with self._lock:
            if not self.running:
                await utils.answer(message, self.strings["not_running"])
                return
            await self._stop("–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    @loader.command()
    async def pfpstats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await utils.answer(message, self.strings["stats"].format(**self._get_stats()))

    @loader.command()
    async def pfpdelay(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ä–µ–ø–ª–∞–π)"""
        if not message.reply_to_message_id:
            return await utils.answer(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º (—Å–µ–∫—É–Ω–¥—ã)")

        try:
            delay = float((await message.get_reply_message()).text)
            if delay < self.config["min_delay"] or delay > self.config["max_delay"]:
                return await utils.answer(
                    message,
                    f"–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {self.config['min_delay']} –¥–æ {self.config['max_delay']} —Å–µ–∫—É–Ω–¥"
                )

            self.delay = delay
            self._save_state()
            await utils.answer(message, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫—É–Ω–¥")

        except ValueError:
            await utils.answer(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
