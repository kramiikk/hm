""" Author: kramiikk - Telegram: @ilvij """

import asyncio
import logging
import random
from datetime import datetime
from collections import deque
from typing import Optional, Dict, Union, List
from telethon import functions, types, errors
from telethon.errors.rpcerrorlist import (
    MessageIdInvalidError,
    PhotoInvalidDimensionsError,
    PhotoCropSizeSmallError,
    PhotoSaveFileInvalidError,
)
from .. import loader, utils
import json
import os
import re

logger = logging.getLogger(__name__)

CONFIG_DEFAULT_DELAY = "default_delay"
CONFIG_MIN_DELAY = "min_delay"
CONFIG_MAX_DELAY = "max_delay"
CONFIG_JITTER = "jitter"
CONFIG_ERROR_THRESHOLD = "error_threshold"
CONFIG_SUCCESS_REDUCTION = "success_reduction"
CONFIG_DELAY_MULTIPLIER = "delay_multiplier"
CONFIG_RECENT_MULTIPLIER_HISTORY_SIZE = "recent_multiplier_history_size"
CONFIG_PFPDIR_PATH = "pfpdir_path"


@loader.tds
class ProfileChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã."""

    strings = {
        "name": "ProfileChanger",
        "starting": "üîÑ <b>–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {} –º–∏–Ω\n‚Ä¢ ~{} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—á–∞—Å",
        "stopping": "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞</b>\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {}\n‚Ä¢ –° –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {}\n‚Ä¢ –û—à–∏–±–æ–∫: {}",
        "stats": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        "no_photo": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ</b>",
        "already_running": "‚ö†Ô∏è <b>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</b>",
        "not_running": "‚ö†Ô∏è <b>–ù–µ –∑–∞–ø—É—â–µ–Ω–æ</b>",
        "error": "{} <b>{}:</b> {}",
        "flood_wait": "‚ö†Ô∏è <b>–§–ª—É–¥–≤–µ–π—Ç</b>\n\n‚Ä¢ –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {:.1f} –º–∏–Ω\n‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ: {:.1f} –º–∏–Ω",
        "pfpone_success": "‚úÖ <b>–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "pfpone_no_reply": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b>",
        "delay_details_success": "  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
        "delay_details_recent_flood": "  ‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏–π —Ñ–ª—É–¥–≤–µ–π—Ç: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
        "delay_details_recent_error": "  ‚Ä¢ –ù–µ–¥–∞–≤–Ω—è—è –æ—à–∏–±–∫–∞: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
        "delay_details_weighted_multiplier": "  ‚Ä¢ –í—ã–±–æ—Ä –º–Ω–æ–∂–∏—Ç–µ–ª—è: –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π",
        "delay_details_jitter": "  ‚Ä¢ –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å: +/- {}%",
        "stopped_successfully": "‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>",
        "dir_not_found": "‚ùå <b>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:</b> <code>{}</code>",
        "no_photos": "‚ùå <b>–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>",
        "invalid_delay": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥</b>",
        "loading_from_dir": "üîÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...</b>\n\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {}\n‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {}",
    }

    _state_keys = [
        "running",
        "start_time",
        "last_update",
        "update_count",
        "error_count",
        "flood_count",
        "delay",
        "chat_id",
        "message_id",
        "success_streak",
        "floods",
        "retries",
        "last_error_time",
        "total_updates_cycle",
        "recent_multiplier_uses",
        "pfpdir_running",
    ]

    def _init_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è"""
        self.running = False
        self._task = None
        self._lock = asyncio.Lock()
        self._photo_lock = asyncio.Lock()
        self.start_time = None
        self.last_update = None
        self.update_count = 0
        self.error_count = 0
        self.flood_count = 0
        self.delay = self.config[CONFIG_DEFAULT_DELAY]
        self.chat_id = None
        self.message_id = None
        self.floods = deque(maxlen=10)
        self.success_streak = 0
        self.retries = 0
        self.last_error_time = None
        self.total_updates_cycle = 0
        self.recent_multiplier_uses: Dict[tuple, datetime] = {}
        self.pfpdir_running = False

    def __init__(self):
        self.config = loader.ModuleConfig(
            CONFIG_DEFAULT_DELAY,
            352,
            "–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            CONFIG_MIN_DELAY,
            189,
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            CONFIG_MAX_DELAY,
            903,
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            CONFIG_JITTER,
            0.65,
            "–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å (0.0-1.0)",
            CONFIG_ERROR_THRESHOLD,
            3,
            "–ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫",
            CONFIG_SUCCESS_REDUCTION,
            0.92,
            "–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ",
            CONFIG_DELAY_MULTIPLIER,
            1.75,
            "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏ —Ñ–ª—É–¥–≤–µ–π—Ç–∞—Ö",
            CONFIG_RECENT_MULTIPLIER_HISTORY_SIZE,
            5,
            "–†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π",
            CONFIG_PFPDIR_PATH,
            "/root/Heroku/new",
            "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ",
        )

        self.multiplier_ranges = [
            (0.95, 1.05),
            (1.15, 1.35),
            (1.35, 1.55),
            (1.55, 1.75),
            (1.75, 1.95),
        ]

        self.extreme_ranges = [
            (0.82, 0.92),
            (1.97, 2.17),
        ]

        if random.random() < 0.3:
            self.multiplier_ranges.extend(self.extreme_ranges)
        self._init_state()

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._me = await client.get_me()
        self._load_state()
        if self.running:
            self._task = asyncio.create_task(self._loop())
        if self.pfpdir_running:
            self.pfpdir_running = False
            asyncio.create_task(self._process_pfpdir())
        logger.info("ProfileChanger loaded")

    async def on_unload(self):
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è."""
        if self.running:
            await self._send_stopping()
            if self._task:
                self._task.cancel()
        logger.info("ProfileChanger unloaded")

    def _get_state(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        floods = list(self.floods) if hasattr(self, "floods") and self.floods else []
        return {
            "running": self.running,
            "start_time": (self.start_time.isoformat() if self.start_time else None),
            "last_update": (self.last_update.isoformat() if self.last_update else None),
            "update_count": self.update_count,
            "error_count": self.error_count,
            "flood_count": self.flood_count,
            "delay": self.delay,
            "chat_id": self.chat_id,
            "message_id": self.message_id,
            "success_streak": self.success_streak,
            "floods": [t.isoformat() for t in floods],
            "retries": self.retries,
            "last_error_time": (
                self.last_error_time.isoformat() if self.last_error_time else None
            ),
            "total_updates_cycle": self.total_updates_cycle,
            "recent_multiplier_uses": {
                str(k): v.isoformat() for k, v in self.recent_multiplier_uses.items()
            },
            "pfpdir_running": self.pfpdir_running,
        }

    def _load_state(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            state_json = self._db.get(self.strings["name"], "state")
            if not state_json:
                return
            state = json.loads(state_json)

            if state.get("start_time"):
                state["start_time"] = datetime.fromisoformat(state["start_time"])
            if state.get("last_update"):
                state["last_update"] = datetime.fromisoformat(state["last_update"])
            if state.get("last_error_time"):
                state["last_error_time"] = datetime.fromisoformat(
                    state["last_error_time"]
                )
            if "floods" in state:
                floods_list = [datetime.fromisoformat(t) for t in state["floods"]]
                state["floods"] = deque(floods_list, maxlen=10)
            if "recent_multiplier_uses" in state:
                self.recent_multiplier_uses = {
                    eval(k): datetime.fromisoformat(v)
                    for k, v in state["recent_multiplier_uses"].items()
                }
            if "pfpdir_running" in state:
                self.pfpdir_running = state["pfpdir_running"]
            for key, value in state.items():
                setattr(self, key, value)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self._reset()
        except Exception as e:
            logger.error(
                f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {type(e).__name__}: {e}"
            )
            self._reset()

    async def _get_photo(self) -> Optional[types.Photo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not self.running:
            return None
        try:
            message = await self._client.get_messages(self.chat_id, ids=self.message_id)
            if not message or not message.photo:
                await self._stop()
                return None
            return message.photo
        except MessageIdInvalidError:
            await self._stop()
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return None

    async def _set_profile_photo(
        self, photo: types.Photo
    ) -> Union[bool, errors.FloodWaitError, Exception]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
        try:
            await self._client(
                functions.photos.UpdateProfilePhotoRequest(
                    id=types.InputPhoto(
                        id=photo.id,
                        access_hash=photo.access_hash,
                        file_reference=photo.file_reference,
                    )
                )
            )
            return True
        except errors.FloodWaitError as e:
            return e
        except (
            PhotoInvalidDimensionsError,
            PhotoCropSizeSmallError,
            PhotoSaveFileInvalidError,
        ) as e:
            return e
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return e

    async def _handle_error(
        self, error_type: str, error: Exception, stop: bool = False
    ):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫."""
        self.error_count += 1
        self.success_streak = 0
        self.last_error_time = datetime.now()

        if isinstance(error, errors.FloodWaitError):
            self.flood_count += 1
            self.floods.append(datetime.now())
            self.delay = min(
                self.config[CONFIG_MAX_DELAY],
                self.delay * self.config[CONFIG_DELAY_MULTIPLIER],
            )
            wait_time = error.seconds
            error_message = self.strings["flood_wait"].format(
                self.delay / 60, wait_time / 60
            )
            log_message = f"Flood error: {str(error)}"
            error_symbol = "‚ö†Ô∏è"
            error_name = "–§–ª—É–¥–≤–µ–π—Ç"
        else:
            self.retries += 1
            error_symbol = "‚ùå"
            log_message = f"{error_type.capitalize()} error: {str(error)}"
            error_name = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ" if error_type == "photo" else "–û—à–∏–±–∫–∞"
            error_message = self.strings["error"].format(
                error_symbol,
                error_name,
                str(error),
            )
        logger.info(error_message)
        logger.error(log_message)

        if stop:
            await self._stop()
        elif isinstance(error, errors.FloodWaitError):
            await asyncio.sleep(error.seconds)

    async def _handle_operation_result(
        self,
        result: Union[bool, errors.FloodWaitError, Exception],
        operation_type: str = "update",
    ) -> bool:
        """Unified handler for profile operation results"""

        def _handle_success():
            self.last_update = datetime.now()
            self.update_count += 1
            self.success_streak += 1
            self._save_state()
            return True

        if (
            result is True
            or hasattr(result, "photo")
            or isinstance(result, types.Photo)
            or (isinstance(result, (dict, object)) and hasattr(result, "photo"))
        ):
            return _handle_success()
        if isinstance(result, errors.FloodWaitError):
            await self._handle_error("flood", result)
            return False
        if isinstance(
            result,
            (
                PhotoInvalidDimensionsError,
                PhotoCropSizeSmallError,
                PhotoSaveFileInvalidError,
            ),
        ):
            await self._handle_error("photo", result, stop=(operation_type == "update"))
            return False
        await self._handle_error("generic", result)
        return False

    async def _update(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è."""
        if not self.running:
            return False
        try:
            async with self._photo_lock:
                photo = await self._get_photo()
                if not photo:
                    return False
                result = await self._set_profile_photo(photo)
                return await self._handle_operation_result(result)
        except Exception as e:
            return await self._handle_operation_result(e)

    async def _upload_photo(self, path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        if not await self._validate_photo(path):
            return False
        try:
            async with self._photo_lock:
                result = await self._client(
                    functions.photos.UploadProfilePhotoRequest(
                        file=await self._client.upload_file(path)
                    )
                )
                return await self._handle_operation_result(result, "upload")
        except Exception as e:
            return await self._handle_operation_result(e, "upload")

    def _calculate_delay(self) -> float:
        """–†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π –∏ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º."""
        base_delay = self.delay
        now = datetime.now()

        if self.success_streak >= 5:
            success_multiplier = max(
                0.85,
                self.config[CONFIG_SUCCESS_REDUCTION] ** (self.success_streak // 7),
            )
            success_multiplier *= random.uniform(0.95, 1.05)
            base_delay *= success_multiplier
        weights = []
        for r in self.multiplier_ranges:
            last_used = self.recent_multiplier_uses.get(r)
            if last_used:
                time_since_use = now - last_used
                weight = 1 / (time_since_use.total_seconds() / 7200 + 1)
            else:
                weight = 3
            weights.append(weight)
        if not weights or sum(weights) == 0:
            selected_range = random.choice(self.multiplier_ranges)
        else:
            normalized_weights = [w / sum(weights) for w in weights]
            selected_range = random.choices(
                self.multiplier_ranges, weights=normalized_weights, k=1
            )[0]
        range_position = random.random()
        if range_position < 0.2:
            base_multiplier = selected_range[0]
        elif range_position > 0.8:
            base_multiplier = selected_range[1]
        else:
            base_multiplier = random.uniform(selected_range[0], selected_range[1])
            shift = random.uniform(-0.05, 0.05)
            base_multiplier += shift
        self.recent_multiplier_uses[selected_range] = now

        if len(self.recent_multiplier_uses) > self.config[
            CONFIG_RECENT_MULTIPLIER_HISTORY_SIZE
        ] * len(self.multiplier_ranges):
            sorted_uses = sorted(
                self.recent_multiplier_uses.items(), key=lambda item: item[1]
            )
            for i in range(
                len(self.recent_multiplier_uses)
                - self.config[CONFIG_RECENT_MULTIPLIER_HISTORY_SIZE]
                * len(self.multiplier_ranges)
            ):
                self.recent_multiplier_uses.pop(sorted_uses[i][0])
        jitter = random.uniform(
            1 - (self.config[CONFIG_JITTER] * 1.2),
            1 + (self.config[CONFIG_JITTER] * 1.2),
        )

        delay = base_delay * base_multiplier * jitter

        if (
            self.last_error_time
            and (now - self.last_error_time).total_seconds()
            < self.config[CONFIG_MAX_DELAY]
        ):
            error_multiplier = self.config[CONFIG_DELAY_MULTIPLIER] * (
                1 + random.random() * 0.7
            )
            delay *= error_multiplier
        if self.floods:
            recent_floods = len(self.floods)
            flood_multiplier = self.config[CONFIG_DELAY_MULTIPLIER] ** (
                recent_floods * 1.2
            )
            flood_multiplier *= 1 + random.random() * recent_floods * 0.4
            delay = min(self.config[CONFIG_MAX_DELAY], delay * flood_multiplier)
        self.total_updates_cycle += 1

        if self.last_update:
            last_delay = (now - self.last_update).total_seconds()
            if abs(last_delay - delay) < 30:
                delay *= random.uniform(0.85, 1.15)
        delay = max(
            self.config[CONFIG_MIN_DELAY], min(self.config[CONFIG_MAX_DELAY], delay)
        )

        if delay == self.config[CONFIG_MIN_DELAY]:
            delay += random.uniform(61, 337)
            logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏. –£–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {delay:.1f} —Å–µ–∫—É–Ω–¥.")

        return delay

    async def _loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
        consecutive_errors = 0
        base_sleep_time = self.config[CONFIG_MIN_DELAY]
        while self.running:
            try:
                now = datetime.now()
                calculated_delay = self._calculate_delay()

                if self.last_update:
                    elapsed = max(0, (now - self.last_update).total_seconds())
                    sleep_time = calculated_delay - elapsed
                    if sleep_time > 0:
                        await asyncio.sleep(sleep_time)
                async with self._lock:
                    if await self._update():
                        consecutive_errors = 0
                        await asyncio.sleep(0)
                    else:
                        consecutive_errors += 1
                        sleep_duration = base_sleep_time * (2**consecutive_errors)
                        if consecutive_errors >= self.config[CONFIG_ERROR_THRESHOLD]:
                            logger.warning(
                                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ ({self.config[CONFIG_ERROR_THRESHOLD]}). –û—Å—Ç–∞–Ω–æ–≤–∫–∞."
                            )
                            await self._stop()
                            break
                        await asyncio.sleep(
                            min(sleep_duration, self.config[CONFIG_MAX_DELAY])
                        )
            except asyncio.CancelledError:
                logger.info("–ü—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError)")
                break
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {type(e).__name__}: {e}")
                consecutive_errors += 1
                sleep_duration = base_sleep_time * (2**consecutive_errors)
                await asyncio.sleep(min(sleep_duration, self.config[CONFIG_MAX_DELAY]))

    async def _process_pfpdir(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã pfpdir –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        async with self._lock:
            if self.running or self.pfpdir_running:
                logger.warning(self.strings["already_running"])
                return
            directory = self.config[CONFIG_PFPDIR_PATH]

            if not os.path.isdir(directory):
                logger.warning(self.strings["dir_not_found"].format(path=directory))
                return
            photos = [
                f
                for f in os.listdir(directory)
                if (
                    f.endswith((".jpg", ".jpeg", ".png"))
                    and any(c.isdigit() for c in f)
                )
            ]

            photos = self._sort_photos(photos)

            logger.info("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:")
            for photo in photos[:10]:
                number = re.findall(r"\d+", photo)[-1]
                logger.info(f"–§–∞–π–ª: {photo}, –ù–æ–º–µ—Ä: {number}")
            if not photos:
                logger.warning(self.strings["no_photos"])
            await self._init_photo_upload_session(photos)

    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        if hours:
            return f"{int(hours)}—á {int(minutes)}–º"
        elif minutes:
            return f"{int(minutes)}–º {int(round(seconds))}—Å"
        return f"{int(round(seconds))}—Å"

    def _get_delay_details(self) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫—É."""
        details = []
        now = datetime.now()

        if self.success_streak >= 5:
            details.append(self.strings["delay_details_success"])
        recent_flood = any(
            (now - flood_time).total_seconds() < 3600 for flood_time in self.floods
        )
        if recent_flood:
            details.append(self.strings["delay_details_recent_flood"])
        if (
            self.last_error_time
            and (now - self.last_error_time).total_seconds()
            < self.config[CONFIG_MAX_DELAY]
        ):
            details.append(self.strings["delay_details_recent_error"])
        details.append(self.strings["delay_details_weighted_multiplier"])

        if self.config[CONFIG_JITTER] > 0:
            details.append(
                self.strings["delay_details_jitter"].format(
                    self.config[CONFIG_JITTER] * 100
                )
            )
        return "\n".join(details) if details else "  ‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"

    def _get_stats(self) -> Dict[str, Union[str, float]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
        stats = {}
        now = datetime.now()
        uptime_seconds = (
            (now - self.start_time).total_seconds() if self.start_time else 0
        )
        last_update_seconds = (
            (now - self.last_update).total_seconds() if self.last_update else 0
        )

        stats = {
            "status": (
                "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                if self.running or self.pfpdir_running
                else "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ),
            "uptime": self._format_time(uptime_seconds),
            "count": self.update_count,
            "hourly": (
                f"{(self.update_count / (uptime_seconds/3600)):.1f}"
                if uptime_seconds > 0
                else "0"
            ),
            "delay": f"{self.delay / 60:.1f}",
            "last": (
                self._format_time(last_update_seconds)
                if self.last_update
                else "–Ω–∏–∫–æ–≥–¥–∞"
            ),
            "errors": self.error_count,
            "floods": self.flood_count,
        }

        if self.running:
            calculated_delay = self._calculate_delay()
            if self.last_update:
                remaining_wait = (
                    calculated_delay - (now - self.last_update).total_seconds()
                )
                stats["wait"] = self._format_time(max(0, remaining_wait))
            else:
                stats["wait"] = self._format_time(calculated_delay)
        delay_details = self._get_delay_details()
        stats["delay_details"] = f"\n{delay_details}"

        return stats

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self._db.set(self.strings["name"], "state", json.dumps(self._get_state()))
        except TypeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _reset(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º."""
        self._init_state()

    async def _start(self, chat_id: int, message_id: int) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
        self._reset()
        async with self._lock:
            if self.running or self.pfpdir_running:
                return
            self.running = True
            self.start_time = datetime.now()
            self.chat_id = chat_id
            self.message_id = message_id
            self._save_state()
            self._task = asyncio.create_task(self._loop())
            logger.info("Profile changer started")

    async def _send_stopping(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        uptime = (
            self._format_time((datetime.now() - self.start_time).total_seconds())
            if self.start_time
            else "0—Å"
        )
        logger.info(
            self.strings["stopping"].format(
                self.update_count,
                uptime,
                self.error_count,
            )
        )

    async def _stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
        if not self.running and not self.pfpdir_running:
            return
        self.running = False
        self.pfpdir_running = False

        try:
            if self._task and not self._task.done():
                self._task.cancel()
                try:
                    await self._task
                except asyncio.CancelledError:
                    pass
            await self._save_state()
            await self._send_stopping()

            logger.info("Profile changer stopped successfully")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Profile changer: {e}")
            self._reset()

    def _sort_photos(self, photos: List[str]) -> List[str]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –Ω–æ–º–µ—Ä—É –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–∞ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã."""

        def extract_number(filename):
            numbers = re.findall(r"\d+", filename)
            if not numbers:
                return 0
            last_number = numbers[-1]
            return int(last_number.zfill(10))

        return sorted(photos, key=extract_number, reverse=True)

    async def _validate_photo(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ç–æ."""
        if not os.path.exists(path):
            logger.error(f"File not found: {path}")
            return False
        max_size = 10 * 1024 * 1024
        if os.path.getsize(path) > max_size:
            logger.error(f"File too large: {path}")
            return False
        return True

    async def _init_photo_upload_session(self, photos: List[str]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        try:
            if self.running or self.pfpdir_running:
                logger.info("–°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return
            self._reset()

            self.pfpdir_running = True
            self.start_time = datetime.now()

            self._save_state()

            asyncio.create_task(self._process_photo_upload_session(photos))
        except Exception as e:
            self.pfpdir_running = False
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ _init_photo_upload_session: {e}")
            raise

    async def _process_photo_upload_session(self, photos: List[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        uploaded = errors = 0
        total_photos = len(photos)
        pfpdir_path = self.config[CONFIG_PFPDIR_PATH]

        for index, photo in enumerate(photos, 1):
            if not self.pfpdir_running:
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            photo_path = os.path.join(pfpdir_path, photo)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ {index}/{total_photos}: {photo}")

            success = await self._upload_photo(photo_path)
            if success:
                uploaded += 1
                try:
                    os.remove(photo_path)
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {photo}: {e}")
            else:
                errors += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {photo}")
            calculated_delay = self._calculate_delay()
            logger.info(
                f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π: {calculated_delay:.1f} —Å–µ–∫—É–Ω–¥"
            )
            await asyncio.sleep(calculated_delay)

            self.last_update = datetime.now()
            self.update_count += 1
            self._save_state()
        self.pfpdir_running = False
        elapsed_time = datetime.now() - self.start_time
        logger.info(
            f"–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded}, –£–¥–∞–ª–µ–Ω–æ: {uploaded}, –û—à–∏–±–æ–∫: {errors}, –í—Ä–µ–º—è: {elapsed_time}"
        )

    @loader.command()
    async def pfp(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ)."""
        async with self._lock:
            if self.running or self.pfpdir_running:
                await utils.answer(message, self.strings["already_running"])
                return
            target = await message.get_reply_message() if message.is_reply else message
            photo_entity = target.photo if target else None

            if not photo_entity:
                await utils.answer(message, self.strings["no_photo"])
                return
            await self._start(message.chat_id, target.id)
            await utils.answer(
                message,
                self.strings["starting"].format(
                    round(self.delay / 60),
                    round(3600 / self.delay),
                ),
            )

    @loader.command()
    async def pfpstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è."""
        try:
            async with self._lock:
                if not self.running and not self.pfpdir_running:
                    await utils.answer(message, self.strings["not_running"])
                    return
                stop_tasks = []
                if self.running:
                    stop_tasks.append(self._stop())
                if self.pfpdir_running:
                    self.pfpdir_running = False
                    self._save_state()
                if stop_tasks:
                    await asyncio.wait(stop_tasks, timeout=10)
            await utils.answer(message, self.strings["stopped_successfully"])
        except asyncio.TimeoutError:
            await utils.answer(
                message,
                "‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            )
            self._reset()
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pfpstop: {e}")
            self._reset()

    @loader.command()
    async def pfpstats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
        stats = self._get_stats()

        status = f"{self.strings['stats']}\n"
        status += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats['status']}\n"
        status += f"‚Ä¢ –° –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {stats['uptime']}\n"
        status += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stats['count']}\n"
        status += f"‚Ä¢ –í —á–∞—Å: {stats['hourly']}\n"
        status += f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {stats['delay']} –º–∏–Ω\n"
        status += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {stats['last']}\n"
        status += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']}\n"
        status += f"‚Ä¢ –§–ª—É–¥–≤–µ–π—Ç–æ–≤: {stats['floods']}\n"

        if "wait" in stats:
            status += f"‚Ä¢ –û–∂–∏–¥–∞–Ω–∏–µ: {stats['wait']}\n"
        status += f"\n‚öôÔ∏è <b>–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏:</b>{stats['delay_details']}"

        await utils.answer(message, status)

    @loader.command()
    async def pfpdelay(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.

        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .pfpdelay <—Å–µ–∫—É–Ω–¥—ã>
        """
        args = utils.get_args_raw(message)

        if not args:
            return await utils.answer(
                message, "–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."
            )
        try:
            delay = float(args)
            if (
                delay < self.config[CONFIG_MIN_DELAY]
                or delay > self.config[CONFIG_MAX_DELAY]
            ):
                return await utils.answer(
                    message,
                    f"–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {self.config[CONFIG_MIN_DELAY]} –¥–æ {self.config[CONFIG_MAX_DELAY]} —Å–µ–∫—É–Ω–¥",
                )
            self.delay = delay
            self._save_state()
            await utils.answer(message, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫—É–Ω–¥")
        except ValueError:
            await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥."
            )

    @loader.command()
    async def pfpdir(self, message):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        try:
            await self._process_pfpdir()
        except Exception as e:
            self.pfpdir_running = False
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ pfpdir: {e}")
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def pfpon(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –æ–¥–∏–Ω —Ä–∞–∑ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ)."""
        reply = await message.get_reply_message()
        if not reply or not reply.photo:
            await utils.answer(message, self.strings["pfpone_no_reply"])
            return
        photo = reply.photo
        result = await self._set_profile_photo(photo)
        if isinstance(result, bool) and result:
            await utils.answer(message, self.strings["pfpone_success"])
        else:
            await utils.answer(
                message,
                self.strings["error"].format(
                    error_symbol="‚ùå",
                    error_type="–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏",
                    error=result,
                ),
            )
