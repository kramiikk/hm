"""
‚ô®Ô∏è Profile Changer
‚ûï Developer: @xdesai
‚ôªÔ∏è Optimized: @kramiikk

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ .pfp <reply to photo> - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ
‚Ä¢ .pfpstop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ
‚Ä¢ .pfpstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã

‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ß–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–≤–µ–π—Ç–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
"""

import asyncio
import logging
import random
from datetime import datetime
from collections import deque
from typing import Optional, Deque, Dict
from telethon import functions, types, errors
from telethon.errors.rpcerrorlist import MessageIdInvalidError
from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class ProfileChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""

    strings = {
        "name": "ProfileChanger",
        "starting": (
            "üîÑ <b>–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <code>{delay_minutes}</code> –º–∏–Ω\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ <code>{updates_per_hour}</code> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —á–∞—Å (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)\n"
            "‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}\n\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .pfpstats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>"
        ),
        "stopping": (
            "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ</b>\n\n"
            "‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            "‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n\n"
            "<i>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</i>"
        ),
        "stats": (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Profile Changer</b>\n\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            "‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —á–∞—Å: {hourly:.1f}\n"
            "‚Ä¢ –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay_minutes} –º–∏–Ω\n"
            "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last}\n"
            "‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
            "‚Ä¢ –§–ª—É–¥–≤–µ–π—Ç–æ–≤: {floods}"
        ),
        "no_photo": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–∞–Ω–¥–æ–π</b>",
        "already_running": "‚ö†Ô∏è <b>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "not_running": "‚ö†Ô∏è <b>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "error": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "flood_wait": (
            "‚ö†Ô∏è <b>–ü–æ–ª—É—á–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç Telegram</b>\n"
            "‚Ä¢ –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {new_delay_minutes} –º–∏–Ω\n"
            "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {wait_minutes} –º–∏–Ω"
        ),
        "photo_deleted": "üì∏ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ.</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "safe_mode",
            True,
            "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "adaptive_delay",
            True,
            "–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏",
            "notify_errors",
            True,
            "–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö",
            "default_delay",
            780,
            "–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "min_delay",
            420,
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "max_delay",
            1980,
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)",
            "jitter",
            0.3,
            "–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏",
            "error_threshold",
            2,
            "–ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
            "retry_delay",
            330,
            "–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ (—Å–µ–∫)",
            "max_retry_delay",
            3600,
            "–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ (—Å–µ–∫)",
            "min_adaptive_delay",
            300,
            "–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Å–µ–∫)",
        )
        self._reset_state(initial=True)
        self._running_lock = asyncio.Lock()

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        self.client = client
        self.db = db
        self._me = await client.get_me()
        self._load_state()
        if self.running:
            self.task = asyncio.create_task(self._main_loop())

    def _load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        saved_state = self.db.get(self.strings["name"], "state", None)
        if saved_state:
            self._apply_state(saved_state)

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.db.set(self.strings["name"], "state", self._get_current_state())

    def _get_current_state(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return {
            "running": self.running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "last_update": self.last_update.isoformat() if self.last_update else None,
            "update_count": self.update_count,
            "error_count": self.error_count,
            "flood_count": self.flood_count,
            "current_delay": self.current_delay,
            "chat_id": self.chat_id,
            "message_id": self.message_id,
            "success_streak": self.success_streak,
            "_retry_delay": self._retry_delay,
        }

    def _apply_state(self, state: Dict):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.running = state.get("running", False)
        try:
            self.start_time = (
                datetime.fromisoformat(state.get("start_time"))
                if state.get("start_time")
                else None
            )
            self.last_update = (
                datetime.fromisoformat(state.get("last_update"))
                if state.get("last_update")
                else None
            )
        except ValueError as e:
            logger.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ."
            )
            return
        self.update_count = state.get("update_count", 0)
        self.error_count = state.get("error_count", 0)
        self.flood_count = state.get("flood_count", 0)
        self.current_delay = state.get("current_delay", self.config["default_delay"])
        self.chat_id = state.get("chat_id")
        self.message_id = state.get("message_id")
        self.success_streak = state.get("success_streak", 0)
        self._retry_delay = state.get("_retry_delay", self.config["retry_delay"])

    async def _get_photo(self) -> Optional[types.Photo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.chat_id or not self.message_id:
            return None
        try:
            message = await self.client.get_messages(self.chat_id, ids=self.message_id)
            return message.photo if message and message.photo else None
        except MessageIdInvalidError:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            if self.running:
                await self._handle_photo_deletion()
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return None

    async def _handle_photo_deletion(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ."""
        await self._stop_pfp(notify=True, reason="—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ")
        self.chat_id = None
        self.message_id = None
        self._save_state()

    async def _update_photo(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        photo = await self._get_photo()
        if not photo:
            return False
        try:
            await self.client(
                functions.photos.UpdateProfilePhotoRequest(
                    id=types.InputPhoto(
                        id=photo.id,
                        access_hash=photo.access_hash,
                        file_reference=photo.file_reference,
                    )
                )
            )
            self._on_photo_updated()
            return True
        except errors.FloodWaitError as e:
            await self._handle_flood_wait(e)
            return False
        except Exception as e:
            await self._handle_update_error(e)
            return False

    def _on_photo_updated(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ."""
        self.last_update = datetime.now()
        self.update_count += 1
        self.success_streak += 1
        self._retry_delay = self.config["retry_delay"]
        self._retries_attempted = 0
        self._save_state()

    async def _handle_flood_wait(self, error: errors.FloodWaitError):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ FloodWait."""
        self._update_state(flood_count=self.flood_count + 1, success_streak=0)
        self.flood_history.append(datetime.now())
        new_delay = min(self.config["max_delay"], self.current_delay * 1.5)
        wait_time = error.seconds / 60
        logger.warning(
            f"FloodWaitError encountered. New delay: {new_delay / 60:.1f} min, Wait time: {wait_time:.1f} min"
        )
        if self.config["notify_errors"]:
            asyncio.create_task(
                self.client.send_message(
                    self.chat_id,
                    self.strings["flood_wait"].format(
                        new_delay_minutes=f"{new_delay/60:.1f}",
                        wait_minutes=f"{wait_time:.1f}",
                    ),
                )
            )
        self.current_delay = new_delay
        self._save_state()
        asyncio.create_task(asyncio.sleep(error.seconds))

    async def _handle_update_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ."""
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self._me.id}: {error}")
        self._update_state(error_count=self.error_count + 1, success_streak=0)
        self._retries_attempted += 1
        self._retry_delay = min(self._retry_delay * 2, self.config["max_retry_delay"])
        logger.info(
            f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–æ {self._retry_delay} —Å–µ–∫—É–Ω–¥."
        )
        if self.config["notify_errors"]:
            asyncio.create_task(
                self.client.send_message(
                    self.chat_id, self.strings["error"].format(error=str(error))
                )
            )
        self._save_state()

    def _update_state(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ."""
        for key, value in kwargs.items():
            setattr(self, key, value)
        self._save_state()

    def _calculate_delay(self) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.config["adaptive_delay"]:
            return self.current_delay
        base_delay = self.current_delay

        if self.success_streak >= 5:
            base_delay = max(self.config["min_delay"], base_delay * 0.9)
        time_since_last_flood = float("inf")
        if self.flood_history:
            time_since_last_flood = (
                datetime.now() - self.flood_history[-1]
            ).total_seconds()
        if time_since_last_flood < 3600 * 3:
            recent_floods = sum(
                1
                for t in self.flood_history
                if (datetime.now() - t).total_seconds() < 3600
            )
            if recent_floods > 0:
                base_delay = min(
                    self.config["max_delay"], base_delay * (1 + recent_floods * 0.2)
                )
        jitter = random.uniform(1 - self.config["jitter"], 1 + self.config["jitter"])
        calculated_delay = base_delay * jitter
        calculated_delay = max(self.config["min_adaptive_delay"], calculated_delay)
        logger.debug(
            f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {calculated_delay:.1f}—Å, success_streak: {self.success_streak}, time_since_last_flood: {time_since_last_flood:.1f}"
        )
        return calculated_delay

    async def _main_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è"""
        while self.running:
            try:
                if await self._update_photo():
                    await asyncio.sleep(self._calculate_delay())
                else:
                    if self._retries_attempted >= self.config["error_threshold"]:
                        logger.warning(
                            f"–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ {self._retries_attempted} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –æ—à–∏–±–æ–∫."
                        )
                        await self._stop_pfp()
                        break
                    logger.info(
                        f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {self.config['retry_delay']} —Å–µ–∫—É–Ω–¥."
                    )
                    await asyncio.sleep(self.config["retry_delay"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.exception(
                    f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self._me.id}: {e}"
                )
                await asyncio.sleep(self.config["retry_delay"])

    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        if hours:
            return f"{hours:.0f}—á {minutes:.0f}–º"
        elif minutes:
            return f"{minutes:.0f}–º {seconds:.0f}—Å"
        else:
            return f"{seconds:.0f}—Å"

    def _get_stats(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        now = datetime.now()
        uptime_seconds = (
            (now - self.start_time).total_seconds() if self.start_time else 0
        )
        last_update_seconds = (
            (now - self.last_update).total_seconds() if self.last_update else 0
        )

        return {
            "status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.running else "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "uptime": self._format_time(uptime_seconds),
            "count": str(self.update_count),
            "hourly": (
                f"{self.update_count / (uptime_seconds / 3600):.1f}"
                if uptime_seconds > 0
                else "0"
            ),
            "current_delay_minutes": f"{self.current_delay / 60:.1f}",
            "last": (
                self._format_time(last_update_seconds)
                if self.last_update
                else "–Ω–∏–∫–æ–≥–¥–∞"
            ),
            "errors": str(self.error_count),
            "floods": str(self.flood_count),
        }

    @loader.command()
    async def pfp(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)"""
        async with self._running_lock:
            if self.running:
                await utils.answer(message, self.strings["already_running"])
                return
            reply = await message.get_reply_message()
            target = (
                reply if reply and reply.photo else message if message.photo else None
            )

            if not target or not target.photo:
                await utils.answer(message, self.strings["no_photo"])
                return
            try:
                self._start_pfp(message.chat_id, target.id)
                await utils.answer(
                    message,
                    self.strings["starting"].format(
                        delay_minutes=f"{self.current_delay/60:.1f}",
                        updates_per_hour=f"{3600 / self.current_delay:.1f}",
                        mode=f"{'–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π' if self.config['safe_mode'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}",
                    ),
                )
                logger.info(f"Profile changer started by user {self._me.id}.")
                self.task = asyncio.create_task(self._main_loop())
            except Exception as e:
                logger.exception(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {self._me.id}: {e}"
                )
                await utils.answer(message, self.strings["error"].format(error=str(e)))
                self._reset_state()
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")

    def _start_pfp(self, chat_id: int, message_id: int):
        """–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ."""
        self.running = True
        self.start_time = datetime.now()
        self.chat_id = chat_id
        self.message_id = message_id
        self._save_state()
        self._retry_delay = self.config["retry_delay"]
        self._retries_attempted = 0

    @loader.command()
    async def pfpstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
        async with self._running_lock:
            if not self.running:
                await utils.answer(message, self.strings["not_running"])
                return
            await self._stop_pfp(notify=True)

    async def _stop_pfp(self, notify: bool = True, reason: Optional[str] = None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ."""
        if self.running:
            self.running = False
            self._save_state()
            if self.task:
                self.task.cancel()
                self.task = None
            if notify:
                uptime = (
                    self._format_time(
                        (datetime.now() - self.start_time).total_seconds()
                    )
                    if self.start_time
                    else "0—Å"
                )
                await self.client.send_message(
                    self.chat_id,
                    self.strings["stopping"].format(
                        count=self.update_count, uptime=uptime, errors=self.error_count
                    ),
                )
            log_message = f"Profile changer stopped by user {self._me.id}."
            if reason:
                log_message += f" Reason: {reason}"
            logger.info(log_message)
            self._reset_state()

    def _reset_state(self, initial: bool = False) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.running = False
        if self.task:
            self.task.cancel()
            self.task = None
        self.start_time: Optional[datetime] = None
        self.last_update: Optional[datetime] = None
        self.update_count = 0
        self.error_count = 0
        self.flood_count = 0
        self.current_delay = self.config["default_delay"]
        self.chat_id: Optional[int] = None
        self.message_id: Optional[int] = None
        self.flood_history: Deque[datetime] = deque(maxlen=10)
        self.success_streak = 0
        self._retry_delay = self.config["retry_delay"]
        self._retries_attempted = 0
        if not initial:
            self.db.set(self.strings["name"], "state", None)

    @loader.command()
    async def pfpstats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        await utils.answer(message, self.strings["stats"].format(**self._get_stats()))
