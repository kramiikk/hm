"""
‚ô®Ô∏è Profile Changer
‚ûï Developer: @xdesai
‚ôªÔ∏è Optimized: @kramiikk

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ .pfp <reply to photo> - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ
‚Ä¢ .pfpstop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ
‚Ä¢ .pfpstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã

‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ß–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–≤–µ–π—Ç–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
"""

import asyncio
import logging
import random
from datetime import datetime, timedelta
from collections import deque
from typing import Optional, Deque, Dict
from telethon import functions, types, errors
from .. import loader, utils

logger = logging.getLogger(__name__)


DEFAULT_DELAY = 780  # 13 –º–∏–Ω—É—Ç
MIN_DELAY = 420  # 7 –º–∏–Ω—É—Ç
MAX_DELAY = 1980  # 30 –º–∏–Ω—É—Ç
JITTER = 0.3  # –°–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –∑–∞–¥–µ—Ä–∂–∫–µ
ERROR_THRESHOLD = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
RETRY_DELAY = 330  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
MAX_RETRY_DELAY = 3600 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏

@loader.tds
class ProfileChangerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""

    strings = {
        "name": "ProfileChanger",
        "starting": (
            "üîÑ <b>–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <code>{delay}</code> –º–∏–Ω\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ <code>{updates}</code> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —á–∞—Å (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)\n"
            "‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}\n\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .pfpstats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>"
        ),
        "stopping": (
            "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ</b>\n\n"
            "‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time}\n"
            "‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n\n"
            "<i>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</i>"
        ),
        "stats": (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Profile Changer</b>\n\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            "‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {count}\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —á–∞—Å: {hourly:.1f}\n"
            "‚Ä¢ –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay}\n"
            "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last}\n"
            "‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
            "‚Ä¢ –§–ª—É–¥–≤–µ–π—Ç–æ–≤: {floods}"
        ),
        "no_photo": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–∞–Ω–¥–æ–π</b>",
        "already_running": "‚ö†Ô∏è <b>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "not_running": "‚ö†Ô∏è <b>–°–º–µ–Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "error": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{}</code>",
        "flood_wait": (
            "‚ö†Ô∏è <b>–ü–æ–ª—É—á–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç Telegram</b>\n"
            "‚Ä¢ –ù–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay} –º–∏–Ω\n"
            "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {wait} –º–∏–Ω"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "safe_mode",
            True,
            "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "adaptive_delay",
            True,
            "–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏",
            "notify_errors",
            True,
            "–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö",
        )
        self.running = False
        self.task: Optional[asyncio.Task] = None
        self.start_time: Optional[datetime] = None
        self.last_update: Optional[datetime] = None
        self.update_count = 0
        self.error_count = 0
        self.flood_count = 0
        self.current_delay = DEFAULT_DELAY
        self.chat_id: Optional[int] = None
        self.message_id: Optional[int] = None
        self.flood_history: Deque[datetime] = deque(maxlen=10)
        self.success_streak = 0
        self._retry_delay = RETRY_DELAY

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        self.client = client
        self.db = db
        saved_state = db.get(self.strings["name"], "state", None)
        if saved_state:
            self.running = saved_state.get("running", False)
            try:
                self.start_time = (
                    datetime.fromisoformat(saved_state.get("start_time"))
                    if saved_state.get("start_time")
                    else None
                )
                self.last_update = (
                    datetime.fromisoformat(saved_state.get("last_update"))
                    if saved_state.get("last_update")
                    else None
                )
            except ValueError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ.")
                saved_state = None

            if saved_state:
                self.update_count = saved_state.get("update_count", 0)
                self.error_count = saved_state.get("error_count", 0)
                self.flood_count = saved_state.get("flood_count", 0)
                self.current_delay = saved_state.get("current_delay", DEFAULT_DELAY)
                self.chat_id = saved_state.get("chat_id")
                self.message_id = saved_state.get("message_id")
                self.success_streak = saved_state.get("success_streak", 0)
                self._retry_delay = saved_state.get("_retry_delay", RETRY_DELAY)
                if self.running:
                    self.task = asyncio.create_task(self._main_loop())

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è."""
        state = {
            "running": self.running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "last_update": self.last_update.isoformat() if self.last_update else None,
            "update_count": self.update_count,
            "error_count": self.error_count,
            "flood_count": self.flood_count,
            "current_delay": self.current_delay,
            "chat_id": self.chat_id,
            "message_id": self.message_id,
            "success_streak": self.success_streak,
            "_retry_delay": self._retry_delay,
        }
        self.db.set(self.strings["name"], "state", state)

    async def _get_photo(self) -> Optional[types.Photo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not self.chat_id or not self.message_id:
                return None
            message = await self.client.get_messages(self.chat_id, ids=self.message_id)
            return message.photo if message and message.photo else None
        except Exception as e:
            logger.error(f"Error getting photo: {e}")
            return None

    async def _update_photo(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            photo = await self._get_photo()
            if not photo:
                return False
            await self.client(
                functions.photos.UpdateProfilePhotoRequest(
                    id=types.InputPhoto(
                        id=photo.id,
                        access_hash=photo.access_hash,
                        file_reference=photo.file_reference,
                    )
                )
            )

            self.last_update = datetime.now()
            self.update_count += 1
            self.success_streak += 1
            self._retry_delay = RETRY_DELAY
            self._save_state()
            return True
        except errors.FloodWaitError as e:
            self.flood_count += 1
            self.flood_history.append(datetime.now())
            self.success_streak = 0
            logger.warning(
                f"FloodWaitError encountered. New delay: {self.current_delay * 1.5 / 60:.1f} min, Wait time: {e.seconds / 60:.1f} min"
            )

            new_delay = min(MAX_DELAY, self.current_delay * 1.5)
            wait_time = e.seconds / 60

            if self.config["notify_errors"]:
                await self.client.send_message(
                    self.chat_id,
                    self.strings["flood_wait"].format(
                        delay=f"{new_delay/60:.1f}", wait=f"{wait_time:.1f}"
                    ),
                )
            self.current_delay = new_delay
            self._save_state()
            await asyncio.sleep(e.seconds)
            return False
        except Exception as e:
            logger.error(f"Error updating photo: {e}")
            self.error_count += 1
            self.success_streak = 0
            self._retry_delay = min(self._retry_delay * 2, MAX_RETRY_DELAY)
            logger.info(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–æ {self._retry_delay} —Å–µ–∫—É–Ω–¥.")

            if self.config["notify_errors"]:
                await self.client.send_message(
                    self.chat_id, self.strings["error"].format(str(e))
                )
            self._save_state()
            return False

    def _calculate_delay(self) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        if not self.config["adaptive_delay"]:
            return self.current_delay
        base_delay = self.current_delay

        if self.success_streak >= 5:
            base_delay = max(MIN_DELAY, base_delay * 0.9)
        recent_floods = sum(
            1 for t in self.flood_history if (datetime.now() - t).total_seconds() < 3600
        )
        if recent_floods:
            base_delay = min(MAX_DELAY, base_delay * (1 + recent_floods * 0.2))
        jitter = random.uniform(1 - JITTER, 1 + JITTER)
        calculated_delay = base_delay * jitter
        logger.debug(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {calculated_delay}, success_streak: {self.success_streak}, recent_floods: {recent_floods}")
        return calculated_delay

    async def _main_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è"""
        while self.running:
            try:
                if await self._update_photo():
                    delay = self._calculate_delay()
                    await asyncio.sleep(delay)
                else:
                    if self.error_count >= ERROR_THRESHOLD:
                        self.running = False
                        self._save_state()
                        break
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self._retry_delay} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(self._retry_delay)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Main loop error: {e}")
                await asyncio.sleep(RETRY_DELAY)

    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if seconds < 60:
            return f"{seconds:.0f}—Å"
        if seconds < 3600:
            return f"{seconds/60:.1f}–º"
        return f"{seconds/3600:.1f}—á"

    def _get_stats(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        now = datetime.now()
        uptime = (now - self.start_time).total_seconds() if self.start_time else 0
        last_update = (
            (now - self.last_update).total_seconds() if self.last_update else 0
        )

        return {
            "status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.running else "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "uptime": self._format_time(uptime),
            "count": str(self.update_count),
            "hourly": (self.update_count / (uptime / 3600)) if uptime > 10 else 0,
            "delay": self._format_time(self.current_delay),
            "last": self._format_time(last_update) if self.last_update else "–Ω–∏–∫–æ–≥–¥–∞",
            "errors": str(self.error_count),
            "floods": str(self.flood_count),
        }

    @loader.command()
    async def pfp(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)"""
        if self.running:
            await utils.answer(message, self.strings["already_running"])
            return
        reply = await message.get_reply_message()
        target = reply if reply and reply.photo else message if message.photo else None

        if not target or not target.photo:
            await utils.answer(message, self.strings["no_photo"])
            return
        try:
            self.running = True
            self.start_time = datetime.now()
            self.chat_id = message.chat_id
            self.message_id = target.id
            self._save_state()
            self._retry_delay = RETRY_DELAY

            hourly_updates = 3600 / self.current_delay
            mode = "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π" if self.config["safe_mode"] else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"

            await utils.answer(
                message,
                self.strings["starting"].format(
                    delay=f"{self.current_delay/60:.1f}",
                    updates=f"{hourly_updates:.1f}",
                    mode=mode,
                ),
            )
            logger.info("Profile changer started.")

            self.task = asyncio.create_task(self._main_loop())
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
            self._reset_state()

    @loader.command()
    async def pfpstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
        if not self.running:
            await utils.answer(message, self.strings["not_running"])
            return
        try:
            self.running = False
            self._save_state()
            if self.task:
                self.task.cancel()
            uptime = (
                self._format_time((datetime.now() - self.start_time).total_seconds())
                if self.start_time
                else "0—Å"
            )

            await utils.answer(
                message,
                self.strings["stopping"].format(
                    count=self.update_count, time=uptime, errors=self.error_count
                ),
            )
            logger.info("Profile changer stopped by user.")
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
        finally:
            self._reset_state()

    def _reset_state(self) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.running = False
        self.task: Optional[asyncio.Task] = None
        self.start_time: Optional[datetime] = None
        self.last_update: Optional[datetime] = None
        self.update_count = 0
        self.error_count = 0
        self.flood_count = 0
        self.current_delay = DEFAULT_DELAY
        self.chat_id: Optional[int] = None
        self.message_id: Optional[int] = None
        self.flood_history: Deque[datetime] = deque(maxlen=10)
        self.success_streak = 0
        self._retry_delay = RETRY_DELAY
        self.db.set(self.strings["name"], "state", None)

    @loader.command()
    async def pfpstats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        await utils.answer(message, self.strings["stats"].format(**self._get_stats()))
