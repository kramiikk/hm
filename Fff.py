from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, Set, Tuple, Optional

from telethon import TelegramClient
from telethon.tl.types import Chat

from .. import loader, utils

class ProfessionalChatAnalyzer:
    def __init__(self, client: TelegramClient):
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def _safe_network_call(
        self, 
        coro, 
        default_return=None, 
        log_error: Optional[str] = None
    ):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤"""
        try:
            return await coro
        except Exception as e:
            if log_error:
                self._logger.error(f"{log_error}: {e}")
            return default_return

    async def measure_network_latency(
        self, 
        attempts: int = 3, 
        timeout: float = 3.0
    ) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            start_times = []
            for _ in range(attempts):
                start = asyncio.get_event_loop().time()
                await asyncio.wait_for(self._client.get_me(), timeout=timeout)
                latency = (asyncio.get_event_loop().time() - start) * 1000
                start_times.append(latency)
            
            return sum(start_times) / len(start_times) if start_times else -1.0
        except Exception as e:
            self._logger.error(f"Ping measurement error: {e}")
            return -1.0

    async def analyze_group_comprehensive(
        self, 
        chat: Chat, 
        message_limit: int = 5000
    ) -> Dict[str, Union[str, int]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            participants, messages = await asyncio.gather(
                self._safe_network_call(
                    self._client.get_participants(chat), 
                    default_return=[], 
                    log_error="Participants retrieval error"
                ),
                self._safe_network_call(
                    self._client.get_messages(chat, limit=message_limit), 
                    default_return=[], 
                    log_error="Messages retrieval error"
                )
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤
            bots = {p.id for p in participants if getattr(p, 'bot', False)}
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è meaningful —Å–æ–æ–±—â–µ–Ω–∏–π
            meaningful_messages = [
                msg for msg in messages 
                if (hasattr(msg, 'text') and msg.text and len(msg.text.strip()) > 0) and
                   (not hasattr(msg, 'service') or not msg.service)
            ]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = {
                msg.sender_id for msg in meaningful_messages 
                if msg.sender_id is not None and msg.sender_id not in bots
            }

            return {
                'title': getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'chat_id': chat.id,
                'active_members': len(active_users),
                'bots': len(bots),
                'total_messages': len(meaningful_messages)
            }
        except Exception as e:
            self._logger.error(f"Comprehensive analysis error: {e}")
            return {}

@loader.tds
class AnalDestrModule(loader.Module):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –î–µ—Å—Ç—Ä–æ–π–µ—Ä"""

    strings = {
        "name": "Analdestr",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
    }

    def __init__(self):
        self.analyzer = None
        self.last_message = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.analyzer = ProfessionalChatAnalyzer(client)

    def _generate_stats_text(self, ping_time: float, chat, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return (
            f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å\n\n"
            f"<b>{utils.escape_html(getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}:</b>\n"
            f"ID: <code>{chat.id}</code>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {stats.get('active_members', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}\n"
            f"–ë–æ—Ç—ã: {stats.get('bots', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"
        )

    async def _update_ping(self, call):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not hasattr(self, 'last_message') or not self.last_message:
                await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
                return

            ping_time = await self.analyzer.measure_network_latency()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∏–Ω–≥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await self.last_message.edit(
                self._generate_stats_text(
                    ping_time, 
                    self.last_message.chat, 
                    self.last_message.stats
                ),
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )

        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

    @loader.command()
    async def pstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            chat = await message.get_chat()
            ping_time = await self.analyzer.measure_network_latency()

            # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–ª—É—à–∫–æ–π
            response_message = await self.inline.form(
                self._generate_stats_text(ping_time, chat, {
                    'active_members': '–ü–æ–¥—Å—á–µ—Ç...',
                    'bots': '–ü–æ–∏—Å–∫...',
                    'total_messages': '–ê–Ω–∞–ª–∏–∑...'
                }),
                message=message,
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def update_stats():
                stats = await self.analyzer.analyze_group_comprehensive(chat)
                new_ping_time = await self.analyzer.measure_network_latency()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                self.last_message = response_message
                self.last_message.chat = chat
                self.last_message.stats = stats

                await response_message.edit(
                    self._generate_stats_text(new_ping_time, chat, stats),
                    reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
                )

            asyncio.create_task(update_stats())

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
