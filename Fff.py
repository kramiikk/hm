from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, Optional, List

from telethon import TelegramClient
from telethon.tl.types import (
    Chat, 
    User, 
    Message
)
from telethon.errors import (
    ChatAdminRequiredError, 
    FloodWaitError, 
    RPCError
)

from .. import loader, utils

logger = logging.getLogger(__name__)

class ProfessionalChatAnalyzer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""

    def __init__(self, client: TelegramClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Telegram

        Args:
            client (TelegramClient): –ö–ª–∏–µ–Ω—Ç Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        """
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def measure_network_latency(
        self, 
        attempts: int = 3, 
        timeout: float = 3.0
    ) -> float:
        """
        –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å—é

        Args:
            attempts (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            timeout (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

        Returns:
            float: –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        latencies = []
        for _ in range(attempts):
            try:
                start = asyncio.get_event_loop().time()
                await asyncio.wait_for(self._client.get_me(), timeout=timeout)
                latency = (asyncio.get_event_loop().time() - start) * 1000
                latencies.append(latency)
            except Exception as e:
                self._logger.error(f"Ping measurement error: {e}")
        
        return sum(latencies) / len(latencies) if latencies else -1.0

    async def analyze_group_comprehensive(
        self, 
        chat: Chat, 
        detailed: bool = False
    ) -> Dict[str, Union[str, int]]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

        Args:
            chat (Chat): –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            detailed (bool): –§–ª–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        Returns:
            Dict[str, Union[str, int]]: –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —á–∞—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            participants = await self._get_participants_comprehensive(chat)
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            messages_count = await self._count_meaningful_messages(chat)

            # –ü–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            admin_count = await self._count_group_admins(chat)

            result = {
                'title': getattr(chat, 'title', 'Unknown'),
                'chat_id': chat.id,
                'type': '–ì—Ä—É–ø–ø–∞',
                'total_members': participants['total'],
                'active_members': participants['active'],
                'admins': admin_count,
                'bots': participants['bots'],
                'total_messages': messages_count
            }

            if detailed:
                result.update(self._get_detailed_group_metadata(chat))

            return result

        except Exception as e:
            self._logger.error(f"Group analysis error: {e}")
            return {}

    async def _get_participants_comprehensive(
        self, 
        chat: Chat
    ) -> Dict[str, int]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            all_participants = await self._client.get_participants(chat)

            stats = {
                'total': len(all_participants),
                'active': sum(1 for p in all_participants 
                               if not hasattr(p, 'deleted') or not p.deleted),
                'bots': sum(1 for p in all_participants 
                             if hasattr(p, 'bot') and p.bot)
            }

            self._logger.info(
                f"Participants analysis complete for {chat.id}", 
                extra=stats
            )
            return stats

        except Exception as e:
            self._logger.error(f"Participants analysis error: {e}")
            return {'total': 0, 'active': 0, 'bots': 0}

    async def _count_group_admins(
        self, 
        chat: Chat
    ) -> int:
        """
        –ù–∞–¥—ë–∂–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_participants = await self._client.get_participants(
                chat, 
                filter=lambda p: hasattr(p, 'admin') and p.admin
            )
            
            admin_count = len(admin_participants)
            
            self._logger.info(
                f"Admin count retrieved for group {chat.id}: {admin_count}"
            )
            
            return admin_count

        except ChatAdminRequiredError:
            self._logger.warning(f"No admin permissions in group {chat.id}")
            return 0
        except Exception as e:
            self._logger.error(f"Admin counting failed: {e}")
            return 0

    async def _count_meaningful_messages(
        self, 
        chat: Chat, 
        limit: int = 10000
    ) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

        Args:
            chat (Chat): –ì—Ä—É–ø–ø–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            messages = await self._client.get_messages(
                chat, 
                limit=limit
            )
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            meaningful_messages = [
                msg for msg in messages 
                if (hasattr(msg, 'text') and msg.text and len(msg.text.strip()) > 0) and
                   (not hasattr(msg, 'service') or not msg.service)
            ]
            
            return len(meaningful_messages)
        except Exception as e:
            self._logger.warning(f"Message counting error: {e}")
            return 0

    def _get_detailed_group_metadata(
        self, 
        chat: Chat
    ) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ

        Returns:
            Dict[str, str]: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        return {
            'description': getattr(chat, 'description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
            'creation_date': str(getattr(chat, 'date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        }

@loader.tds
class PrecisionGroupModule(loader.Module):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥—Ä—É–ø–ø"""

    strings = {
        "name": "GroupPrecision",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}"
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.analyzer = ProfessionalChatAnalyzer(client)

    @loader.command()
    async def groupstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ó–∞–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏
            ping_time = await self.analyzer.measure_network_latency()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
            chat = await message.get_chat()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await self.analyzer.analyze_group_comprehensive(chat)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            response = (
                f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å\n\n"
                f"üìä <b>{utils.escape_html(stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}:</b>\n"
                f"ID: <code>{stats.get('chat_id', 'N/A')}</code>\n"
                f"–¢–∏–ø: {stats.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('total_members', 0)}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {stats.get('active_members', 0)}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {stats.get('admins', 0)}\n"
                f"–ë–æ—Ç—ã: {stats.get('bots', 0)}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}"
            )

            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def refresh_stats(call):
                new_ping = await self.analyzer.measure_network_latency()
                new_response = response.replace(
                    f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å", 
                    f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {new_ping:.2f} –º—Å"
                )
                await call.edit(new_response)

            await self.inline.form(
                response, 
                message=message,
                reply_markup=[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": refresh_stats}]
            )

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
