from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, Optional

from telethon import TelegramClient
from telethon.tl.types import (
    Chat, 
    Channel, 
    User
)
from telethon.errors import (
    ChatAdminRequiredError, 
    FloodWaitError, 
    RPCError
)

from .. import loader, utils

logger = logging.getLogger(__name__)

class AdvancedTelegramAnalyzer:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ Telegram-—á–∞—Ç–æ–≤"""

    def __init__(self, client: TelegramClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Telegram

        Args:
            client (TelegramClient): –ö–ª–∏–µ–Ω—Ç Telegram –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        """
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def measure_network_latency(self, attempts: int = 3) -> float:
        """
        –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º

        Args:
            attempts (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è

        Returns:
            float: –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        latencies = []
        for _ in range(attempts):
            try:
                start = asyncio.get_event_loop().time()
                await self._client.get_me()
                latency = (asyncio.get_event_loop().time() - start) * 1000
                latencies.append(latency)
            except Exception as e:
                self._logger.error(f"Ping measurement error: {e}")
        
        return sum(latencies) / len(latencies) if latencies else -1.0

    async def analyze_chat_comprehensive(
        self, 
        chat: Union[Chat, Channel], 
        detailed: bool = False
    ) -> Dict[str, Union[str, int]]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

        Args:
            chat (Union[Chat, Channel]): –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            detailed (bool): –§–ª–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        Returns:
            Dict[str, Union[str, int]]: –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —á–∞—Ç–∞
        """
        try:
            chat_type = self._determine_chat_type(chat)
            
            participants = await self._get_participants_info(chat)
            messages_count = await self._count_meaningful_messages(chat)

            result = {
                'title': getattr(chat, 'title', 'Unknown'),
                'chat_id': chat.id,
                'type': chat_type,
                'total_members': participants['total'],
                'active_members': participants['active'],
                'admins': participants['admins'],
                'bots': participants['bots'],
                'total_messages': messages_count
            }

            if detailed:
                result.update(self._get_detailed_chat_metadata(chat))

            return result

        except Exception as e:
            self._logger.error(f"Chat analysis error: {e}")
            return {}

    def _determine_chat_type(self, chat: Union[Chat, Channel]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞ —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        if isinstance(chat, Channel):
            return "–°—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞" if chat.megagroup else "–ö–∞–Ω–∞–ª"
        return "–ì—Ä—É–ø–ø–∞"

    async def _get_participants_info(self, chat: Union[Chat, Channel]) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞

        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            participants = await self._client.get_participants(chat)
            return {
                'total': len(participants),
                'active': sum(1 for p in participants if not p.deleted and not p.bot and not p.is_self),
                'admins': sum(1 for p in participants if p.is_admin or p.is_creator),
                'bots': sum(1 for p in participants if p.bot)
            }
        except Exception as e:
            self._logger.warning(f"Participants analysis error: {e}")
            return {'total': 0, 'active': 0, 'admins': 0, 'bots': 0}

    async def _count_meaningful_messages(
        self, 
        chat: Union[Chat, Channel], 
        limit: int = 10000
    ) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

        Args:
            chat (Union[Chat, Channel]): –ß–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            messages = await self._client.get_messages(
                chat, 
                limit=limit, 
                filter=lambda msg: (
                    not msg.service and 
                    not msg.media and 
                    msg.text and 
                    len(msg.text.strip()) > 0
                )
            )
            return len(messages)
        except Exception as e:
            self._logger.warning(f"Message counting error: {e}")
            return 0

    def _get_detailed_chat_metadata(self, chat: Union[Chat, Channel]) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ

        Returns:
            Dict[str, str]: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        return {
            'description': getattr(chat, 'about', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
            'username': getattr(chat, 'username', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'creation_date': str(getattr(chat, 'date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        }

@loader.tds
class PrecisionChatModule(loader.Module):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Telegram-—á–∞—Ç–æ–≤"""

    strings = {
        "name": "ChatPrecision",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}"
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.analyzer = AdvancedTelegramAnalyzer(client)

    @loader.command()
    async def chatstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            # –ó–∞–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏
            ping_time = await self.analyzer.measure_network_latency()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            chat = await message.get_chat()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await self.analyzer.analyze_chat_comprehensive(chat)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            response = (
                f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å\n\n"
                f"üìä <b>{utils.escape_html(stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}:</b>\n"
                f"ID: <code>{stats.get('chat_id', 'N/A')}</code>\n"
                f"–¢–∏–ø: {stats.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('total_members', 0)}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {stats.get('active_members', 0)}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {stats.get('admins', 0)}\n"
                f"–ë–æ—Ç—ã: {stats.get('bots', 0)}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}"
            )

            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def refresh_stats(call):
                new_ping = await self.analyzer.measure_network_latency()
                new_response = response.replace(
                    f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å", 
                    f"üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {new_ping:.2f} –º—Å"
                )
                await call.edit(new_response)

            await self.inline.form(
                response, 
                message=message,
                reply_markup=[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": refresh_stats}]
            )

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
