from __future__ import annotations

import asyncio
import logging
from typing import Optional, Union, List, Dict, Any

from telethon import TelegramClient
from telethon.tl.types import (
    Chat,
    Channel,
    Message,
    ChannelParticipantAdmin,
    ChannelParticipantCreator,
)
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.errors import ChatAdminRequiredError, FloodWaitError, RPCError

from .. import loader, utils


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    @staticmethod
    def measure_time(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""

        async def wrapper(*args, **kwargs):
            import time

            start_time = time.perf_counter()
            result = await func(*args, **kwargs)
            execution_time = time.perf_counter() - start_time

            if execution_time > 0.5:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                logging.warning(
                    f"Slow operation: {func.__name__} took {execution_time:.4f} seconds"
                )
            return result

        return wrapper


class ChatStatistics:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞
    —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """

    __slots__ = (
        "title",
        "chat_id",
        "chat_type",
        "total_members",
        "active_members",
        "admins",
        "bots",
        "total_messages",
    )

    def __init__(
        self,
        title: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        chat_id: int = 0,
        chat_type: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        total_members: int = 0,
        active_members: int = 0,
        admins: int = 0,
        bots: int = 0,
        total_messages: int = 0,
    ):
        self.title = title
        self.chat_id = chat_id
        self.chat_type = chat_type
        self.total_members = total_members
        self.active_members = active_members
        self.admins = admins
        self.bots = bots
        self.total_messages = total_messages

    def format(self, ping: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º escaped html"""
        return (
            f"üèì <b>–ü–∏–Ω–≥:</b> {ping:.2f} –º—Å\n\n"
            f"üìä <b>{utils.escape_html(self.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:</b>\n"
            f"ID: <code>{self.chat_id}</code>\n"
            f"–¢–∏–ø: {self.chat_type}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {self.total_members}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ: {self.active_members}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.admins}\n"
            f"–ë–æ—Ç—ã: {self.bots}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}"
        )


@loader.tds
class EnhancedPingModule(loader.Module):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –ø–∏–Ω–≥–∞ —Å —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""

    strings = {"name": "EnhancedPing", "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}"}

    def __init__(self):
        self._client: Optional[TelegramClient] = None
        self._logger = logging.getLogger(self.__class__.__name__)
        self._cache: Dict[int, Dict[str, Any]] = {}

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self._client = client
        self._logger.info("EnhancedPing module initialized")

    @PerformanceProfiler.measure_time
    async def _get_precise_ping(self) -> float:
        """
        –¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        """
        start = asyncio.get_event_loop().time()
        await self._client.get_me()
        return (asyncio.get_event_loop().time() - start) * 1000

    @PerformanceProfiler.measure_time
    async def _count_messages(self, chat: Union[Chat, Channel]) -> int:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

            messages = await self._client.get_messages(chat, limit=5000)
            return len(messages)
        except Exception as e:
            self._logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return 0

    @PerformanceProfiler.measure_time
    async def _get_admin_count(self, chat: Union[Chat, Channel]) -> int:
        """
        –¢–æ—á–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        try:
            participants = await self._client.get_participants(
                chat,
                filter=lambda p: isinstance(
                    p, (ChannelParticipantAdmin, ChannelParticipantCreator)
                ),
            )
            return len(participants)
        except (ChatAdminRequiredError, FloodWaitError) as e:
            self._logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return 0

    @PerformanceProfiler.measure_time
    async def _analyze_chat_comprehensive(
        self, chat: Union[Chat, Channel]
    ) -> ChatStatistics:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π —Ç–∏–ø–æ–≤
        """
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞

            if hasattr(chat, "megagroup") and chat.megagroup:
                chat_type = "–°—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞"
            elif isinstance(chat, Channel):
                chat_type = "–ö–∞–Ω–∞–ª" if not chat.megagroup else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            elif isinstance(chat, Chat):
                chat_type = "–ì—Ä—É–ø–ø–∞"
            elif hasattr(chat, "access_hash"):  # –°–ª—É–∂–µ–±–Ω—ã–µ —á–∞—Ç—ã
                chat_type = "–°–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç"
            else:
                chat_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

            chat_id = getattr(chat, "id", 0)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

            try:
                if isinstance(chat, Channel):
                    full_chat = await self._client(GetFullChannelRequest(chat))
                elif isinstance(chat, Chat):
                    full_chat = await self._client(GetFullChatRequest(chat.id))
                else:
                    # Fallback –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤

                    full_chat = await self._client.get_full_chat(chat_id)
                total_members = getattr(full_chat.full_chat, "participants_count", 0)
            except Exception as e:
                self._logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {e}"
                )
                total_members = 0
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º aggressive=True

                participants = await self._client.get_participants(
                    chat_id, aggressive=True, limit=None
                )

                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

                total_participants = len(participants)
                active_members = sum(
                    1
                    for p in participants
                    if not p.deleted and not p.bot and not p.is_self
                )
                bots = sum(1 for p in participants if p.bot)
            except Exception as e:
                self._logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                total_participants = total_members
                active_members = 0
                bots = 0
            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º more_events=True –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞

                messages = await self._client.get_messages(
                    chat_id, limit=0, offset_date=None, reverse=False
                )
                total_messages = messages.total if hasattr(messages, "total") else 0
            except Exception as e:
                self._logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                total_messages = 0
            # –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

            try:
                admins = await self._get_admin_count(chat)
            except Exception as e:
                self._logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
                admins = 0
            return ChatStatistics(
                title=utils.escape_html(getattr(chat, "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
                chat_id=chat_id,
                chat_type=chat_type,
                total_members=total_members,
                active_members=active_members,
                admins=admins,
                bots=bots,
                total_messages=total_messages,
            )
        except Exception as e:
            self._logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            return ChatStatistics(chat_id=getattr(chat, "id", 0))

    @loader.command()
    async def pong(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            ping_time = await self._get_precise_ping()
            chat = await self._client.get_entity(message.chat_id)
            chat_stats = await self._analyze_chat_comprehensive(chat)

            async def refresh_callback(call):
                new_ping = await self._get_precise_ping()
                await call.edit(
                    chat_stats.format(new_ping),
                    reply_markup=self._create_refresh_markup(refresh_callback),
                )

            await self.inline.form(
                chat_stats.format(ping_time),
                message=message,
                reply_markup=self._create_refresh_markup(refresh_callback),
            )
        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), message=message
            )

    def _create_refresh_markup(self, callback=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        return [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": callback or (lambda _: None)}]
