from __future__ import annotations

import asyncio
import logging
from typing import Union, Optional, List, Dict, Any, Callable

from telethon import TelegramClient
from telethon.tl.types import (
    Chat, 
    Channel, 
    User, 
    ChannelParticipantAdmin,
    ChannelParticipantCreator
)
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.errors import (
    ChatAdminRequiredError, 
    FloodWaitError, 
    RPCError, 
    ChatForbiddenError
)

from .. import loader, utils


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def measure_time(func: Callable) -> Callable:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        async def wrapper(*args, **kwargs):
            start = asyncio.get_event_loop().time()
            try:
                return await func(*args, **kwargs)
            finally:
                execution_time = (asyncio.get_event_loop().time() - start) * 1000
                if execution_time > 0.5:
                    logging.warning(
                        f"Slow operation: {func.__name__} "
                        f"took {execution_time:.4f} ms"
                    )
        return wrapper


class ChatStatistics:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
    __slots__ = (
        'title', 'chat_id', 'chat_type', 'total_members', 
        'active_members', 'admins', 'bots', 'total_messages'
    )

    def __init__(
        self, 
        title: str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        chat_id: int = 0,
        chat_type: str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        total_members: int = 0,
        active_members: int = 0,
        admins: int = 0,
        bots: int = 0,
        total_messages: int = 0
    ):
        self.title = title
        self.chat_id = chat_id
        self.chat_type = chat_type
        self.total_members = total_members
        self.active_members = active_members
        self.admins = admins
        self.bots = bots
        self.total_messages = total_messages

    def format(self, ping: float) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return (
            f"üèì <b>–ü–∏–Ω–≥:</b> {ping:.2f} –º—Å\n\n"
            f"üìä <b>{utils.escape_html(self.title)}:</b>\n"
            f"ID: <code>{self.chat_id}</code>\n"
            f"–¢–∏–ø: {self.chat_type}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {self.total_members}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ: {self.active_members}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.admins}\n"
            f"–ë–æ—Ç—ã: {self.bots}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}"
        )


@loader.tds
class EnhancedPingModule(loader.Module):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""

    strings = {
        "name": "EnhancedPing", 
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}"
    }

    def __init__(self):
        self._client: Optional[TelegramClient] = None
        self._logger = logging.getLogger(self.__class__.__name__)

    async def client_ready(self, client, db):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self._client = client
        self._logger.info("EnhancedPing module initialized")

    @PerformanceProfiler.measure_time
    async def _get_precise_ping(self) -> float:
        """–¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        start = asyncio.get_event_loop().time()
        try:
            await self._client.get_me()
            return (asyncio.get_event_loop().time() - start) * 1000
        except Exception as e:
            self._logger.error(f"Ping error: {e}")
            return -1.0

    @PerformanceProfiler.measure_time
    async def _count_user_messages(
        self, 
        chat: Union[Chat, Channel], 
        limit: int = 5000
    ) -> int:
        """–¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            messages = await self._client.get_messages(
                chat, 
                limit=limit,
                filter=lambda m: (
                    not m.service and 
                    not m.empty and 
                    isinstance(m.sender, User)
                )
            )
            return len(messages)
        except Exception as e:
            self._logger.warning(f"Message counting error: {e}")
            return 0

    @PerformanceProfiler.measure_time
    async def _analyze_chat_comprehensive(
        self, 
        chat: Union[Chat, Channel]
    ) -> ChatStatistics:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞
            chat_type = (
                "–°—É–ø–µ—Ä-–≥—Ä—É–ø–ø–∞" if getattr(chat, 'megagroup', False) 
                else "–ö–∞–Ω–∞–ª" if isinstance(chat, Channel) 
                else "–ì—Ä—É–ø–ø–∞" if isinstance(chat, Chat) 
                else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
            )

            chat_id = getattr(chat, 'id', 0)
            title = utils.escape_html(getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
            try:
                full_chat = (
                    await self._client(GetFullChannelRequest(chat)) 
                    if isinstance(chat, Channel) 
                    else await self._client(GetFullChatRequest(chat.id))
                )
                total_members = getattr(full_chat.full_chat, 'participants_count', 0)
            except Exception as e:
                self._logger.warning(f"Full chat info error: {e}")
                total_members = 0

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            try:
                all_participants = await self._client.get_participants(
                    chat_id, 
                    aggressive=True
                )

                total_participants = len(all_participants)
                active_members = sum(
                    1 for p in all_participants 
                    if not p.deleted and 
                       not p.bot and 
                       not p.is_self and 
                       p.access_hash is not None
                )
                bots = sum(1 for p in all_participants if p.bot)
            except Exception as e:
                self._logger.warning(f"Participants count error: {e}")
                total_participants = total_members
                active_members = 0
                bots = 0

            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages = await self._count_user_messages(chat)

            # –ü–æ–¥—Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                full_chat_info = await self._client(GetFullChannelRequest(chat))
                admins = getattr(full_chat_info.full_chat, 'admins_count', 0)
            except Exception as e:
                self._logger.warning(f"Admin count error: {e}")
                admins = 0

            return ChatStatistics(
                title=title,
                chat_id=chat_id,
                chat_type=chat_type,
                total_members=total_members,
                active_members=active_members,
                admins=admins,
                bots=bots,
                total_messages=total_messages
            )

        except Exception as e:
            self._logger.error(f"Comprehensive chat analysis failed: {e}")
            return ChatStatistics(chat_id=chat_id)

    @loader.command()
    async def pong(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            ping_time = await self._get_precise_ping()
            chat = await self._client.get_entity(message.chat_id)
            chat_stats = await self._analyze_chat_comprehensive(chat)

            async def refresh_callback(call):
                new_ping = await self._get_precise_ping()
                await call.edit(
                    chat_stats.format(new_ping),
                    reply_markup=self._create_refresh_markup(refresh_callback)
                )

            await self.inline.form(
                chat_stats.format(ping_time),
                message=message,
                reply_markup=self._create_refresh_markup(refresh_callback)
            )
        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )

    def _create_refresh_markup(self, callback: Optional[Callable] = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": callback or (lambda _: None)}]
