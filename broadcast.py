import asyncio
import random
from telethon.tl.types import Message
from .. import loader


@loader.tds
class BroadcastMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã"""

    strings = {"name": "Broadcast"}

    command_handlers = {
        "add": "manage_chats",
        "rem": "manage_chats",
        "setmsg": "set_message",
        "delmsgchat": "delete_message",
        "setint": "set_interval",
        "list": "list_chats",
        "setcode": "set_code",
        "setmain": "set_main",
    }

    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        self.me = await client.get_me()
        self.broadcast_config = db.get(
            "broadcast_config",
            "Broadcast",
            {
                "interval": 5,
                "messages": {},
                "code": "Super Sonic",
                "main_chat": None,
                "chats": [],
                "last_send_time": 0,
            },
        )

        self.allowed_ids = [
            int(message.message)
            for message in self.client.iter_messages(
                await self.client.get_input_entity("iddisihh"),
                filter=lambda m: bool(m.message),
            )
        ]

    @loader.unrestricted
    async def broadcastcmd(self, message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        args = message.text.split(" ", 1)
        if len(args) == 1:
            await self.help(message)
            return
        command = args[1].lower()
        handler = getattr(self, self.command_handlers.get(command, "help"), self.help)
        await handler(message)

    async def help(self, message):
        """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = (
            "<b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π:</b>\n"
            "<code>.broadcast add [id]</code> - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast rem [id]</code> - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast setmsg</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "<code>.broadcast delmsg [id]</code> - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast setint</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast list</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast setcode</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.broadcast setmain</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await message.edit(help_text)

    async def manage_chats(self, message, add=True):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = message.text.split()
        if len(args) <= 2:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞")
            return
        chat_id = int(args[2])
        if add and chat_id in self.broadcast_config["chats"]:
            await message.edit("–ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        elif add:
            self.broadcast_config["chats"].append(chat_id)
            await message.edit("–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏")
        elif chat_id in self.broadcast_config["chats"]:
            self.broadcast_config["chats"].remove(chat_id)
            await message.edit("–ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        else:
            await message.edit("–ß–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)

    async def set_message(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        reply_msg = await message.get_reply_message()
        if not reply_msg:
            await message.edit("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split(" ", 2)
        message_id = reply_msg.id

        if len(args) > 2:
            chat_id = int(args[2])
            self.broadcast_config["messages"].setdefault(chat_id, []).append(message_id)
            await message.edit(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}"
            )
        else:
            self.broadcast_config["message"] = message_id
            await message.edit("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)

    async def set_interval(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.edit(
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–µ {self.broadcast_config['interval']} –º–∏–Ω—É—Ç"
            )
            return
        minutes = args[2]
        if not minutes.isdigit() or not 0 < int(minutes) < 60:
            await message.edit("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 1 - 59")
            return
        self.broadcast_config["interval"] = int(minutes)
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)
        await message.edit(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç")

    async def delete_message(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"""
        args = message.text.split(" ", 2)
        if len(args) <= 2:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
            return
        message_id = int(args[2])

        removed_chats = []
        for chat_id, message_ids in self.broadcast_config["messages"].items():
            if message_id in message_ids:
                message_ids.remove(message_id)
                removed_chats.append(chat_id)
        if removed_chats:
            removed_chats_str = ", ".join(map(str, removed_chats))
            await message.edit(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —á–∞—Ç–æ–≤: {removed_chats_str}"
            )
        else:
            await message.edit(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
            )
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)

    async def list_chats(self, message):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        chat_list = []
        for chat_id in self.broadcast_config["chats"]:
            try:
                chat = await self.client.get_input_entity(chat_id)
                chat_list.append(f"<code>{chat_id}</code> - {chat.title}")
            except Exception:
                chat_list.append(f"<code>{chat_id}</code>")
        await message.edit("\n".join(chat_list) if chat_list else "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç")

    async def set_code(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.edit(
                f"–§—Ä–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: <code>{self.broadcast_config['code']}</code>"
            )
            return
        self.broadcast_config["code"] = args[2]
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)
        await message.edit(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: <code>{args[2]}</code>")

    async def set_main(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        args = message.text.split(" ", 2)
        if len(args) < 3:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ ID –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
            return
        main_chat_id = int(args[2])
        self.broadcast_config["main_chat"] = main_chat_id
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)
        await message.edit(f"ü§ôüèæ –ì–ª–∞–≤–Ω—ã–π: <code>{main_chat_id}</code>")

    async def watcher(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
        1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π.
        2. –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
        """
        if not isinstance(message, Message) or self.me.id not in self.allowed_ids:
            return
        if (
            self.broadcast_config["code"] in message.text
            and message.sender_id == self.me.id
        ):
            await self.handle_code_message(message)
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã

        await self.broadcast_messages(message)

    async def handle_code_message(self, message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.
        """
        chat_id = message.chat_id
        if chat_id not in self.broadcast_config["chats"]:
            self.broadcast_config["chats"].append(chat_id)
            action = "–¥–æ–±–∞–≤–ª–µ–Ω"
        else:
            self.broadcast_config["chats"].remove(chat_id)
            action = "—É–¥–∞–ª–µ–Ω"
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)
        await self.client.send_message(
            "me", f"–ß–∞—Ç <code>{chat_id}</code> {action} –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"
        )

    async def broadcast_messages(self, message):
        """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
        """
        current_time = message.date.timestamp()
        if (
            current_time - self.broadcast_config["last_send_time"]
            < self.broadcast_config["interval"] * 60
        ):
            return
        if (
            not self.broadcast_config["message"]
            or not self.broadcast_config["chats"]
            or message.chat_id not in self.broadcast_config["chats"]
        ):
            return
        try:
            await self.send_messages_to_chats()
        except Exception as e:
            await self.client.send_message("me", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        self.broadcast_config["last_send_time"] = current_time
        self.db.set("broadcast_config", "Broadcast", self.broadcast_config)

    async def send_messages_to_chats(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.
        """
        for chat_id in self.broadcast_config["chats"]:
            message_id = self.get_message_id(chat_id)
            msg = await self.client.get_messages(
                self.broadcast_config["main_chat"], ids=message_id
            )
            if msg.media:
                await self.client.send_file(chat_id, msg.media, caption=msg.text)
            else:
                await self.client.send_message(chat_id, msg.text)
            await asyncio.sleep(3)

    def get_message_id(self, chat_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
        """
        if chat_id in self.broadcast_config["messages"]:
            return random.choice(self.broadcast_config["messages"][chat_id])
        elif self.broadcast_config["messages_list"]:
            return random.choice(self.broadcast_config["messages_list"])
        else:
            return self.broadcast_config["message"]
