# meta: 0.0.1

import logging
import os
from typing import Optional, Union

from telethon import types, functions, errors
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.tl.functions.phone import (
    GetGroupCallRequest,
    JoinGroupCallPresentationRequest,
    CreateGroupCallRequest,
    LeaveGroupCallRequest
)
from telethon.tl.types import (
    InputGroupCall,
    DocumentAttributeVideo,
    Chat,
    Channel,
    Message
)
import ffmpeg

from .. import loader, utils

@loader.tds
class GroupVideoModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ—á–∞—Ç–æ–º –≥—Ä—É–ø–ø—ã"""
    
    strings = {
        "name": "GroupVideo",
        "starting": "<b>üé• –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ...</b>",
        "joining": "<b>üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É –≥—Ä—É–ø–ø—ã...</b>",
        "joined": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É –≥—Ä—É–ø–ø—ã</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞: {}</b>",
        "no_reply_video": "<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ</b>",
        "leave_success": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª –≤–∏–¥–µ–æ—á–∞—Ç</b>",
        "not_group": "<b>‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>",
        "downloading": "<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</b>",
        "converting": "<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ...</b>",
        "playing": "<b>‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ...</b>",
        "invalid_file": "<b>‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ</b>",
        "download_error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {}</b>",
        "convert_error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {}</b>",
        "creating_chat": "<b>üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞...</b>",
        "already_in_call": "<b>‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É</b>"
    }

    async def _get_group_call(self, chat: Union[Chat, Channel], create: bool = False) -> Optional[types.phone.GroupCall]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ–æ—á–∞—Ç–µ –≥—Ä—É–ø–ø—ã"""
        try:
            if isinstance(chat, Channel):
                full = await self._client(GetFullChannelRequest(channel=chat))
                if full.full_chat.call is not None:
                    return await self._client(GetGroupCallRequest(call=full.full_chat.call))
            elif isinstance(chat, Chat):
                full = await self._client(GetFullChatRequest(chat_id=chat.id))
                if full.full_chat.call is not None:
                    return await self._client(GetGroupCallRequest(call=full.full_chat.call))
                    
            if create:
                return await self._create_group_call(chat)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ—á–∞—Ç–µ: {e}")
        return None

    async def _create_group_call(self, chat: Union[Chat, Channel]) -> Optional[types.phone.GroupCall]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—á–∞—Ç–∞"""
        try:
            await self._client.send_message(chat, self.strings["creating_chat"])
            call = await self._client(CreateGroupCallRequest(
                peer=chat,
                title="–í–∏–¥–µ–æ—á–∞—Ç",
                random_id=self._client.random_id()
            ))
            return await self._client(GetGroupCallRequest(call=call.updates[0].call))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ—á–∞—Ç–∞: {e}")
            return None

    async def _download_video(self, message: Message) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        reply = await message
