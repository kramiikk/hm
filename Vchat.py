import logging
import os
from typing import Dict, Any, Optional

import ffmpeg
import pytgcalls
from pytgcalls import GroupCallFactory
from telethon import types

from .. import loader, utils

@loader.tds
class VideoModModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ"""

    strings = {
        "name": "VideoMod",
        "converting": "<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ...</b>",
        "video_playing": "<b>üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ...</b>",
        "joined": "<b>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É</b>",
        "no_media": "<b>‚ùó –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞: {}</b>"
    }

    def __init__(self):
        self._group_calls: Dict[str, Any] = {}
        self._client = None
        self._db = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        self._client = client
        self._db = db

    def _get_group_call(self, chat_id: int) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞"""
        chat_str = str(chat_id)
        if chat_str not in self._group_calls:
            self._group_calls[chat_str] = GroupCallFactory(
                self._client, 
                pytgcalls.GroupCallFactory.MTPROTO_CLIENT_TYPE.TELETHON
            ).get_file_group_call()
        return self._group_calls[chat_str]

    async def _download_video(self, message: types.Message) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
            reply = await message.get_reply_message()
            if not reply or not reply.file or not reply.file.mime_type.startswith('video/'):
                await utils.answer(message, self.strings["no_media"])
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_file = await reply.download_media()
            return video_file
        
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
            return None

    @loader.command()
    async def vplaycmd(self, message: types.Message):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ —á–∞—Ç–µ"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        video_file = await self._download_video(message)
        if not video_file:
            return

        input_file = None
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            await utils.answer(message, self.strings["converting"])
            
            # –ü—É—Ç—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            input_file = f"media_video_{os.getpid()}.raw"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ
            conversion_cmd = (
                ffmpeg.input(video_file)
                .output(
                    input_file, 
                    format='rawvideo', 
                    vcodec='rawvideo', 
                    pix_fmt='yuv420p',
                    acodec='pcm_s16le', 
                    ac=2, 
                    ar='48k'
                )
                .overwrite_output()
            )
            conversion_cmd.run()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            chat_id = message.chat_id
            group_call = self._get_group_call(chat_id)
            
            # –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
            await group_call.start(chat_id)
            group_call.input_filename = input_file
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            await utils.answer(message, self.strings["video_playing"])
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            await utils.answer(message, self.strings["error"].format(str(e)))
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if video_file and os.path.exists(video_file):
                    os.remove(video_file)
                if input_file and os.path.exists(input_file):
                    os.remove(input_file)
            except Exception as cleanup_e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_e}")

    @loader.command()
    async def vjoincmd(self, message: types.Message):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É"""
        try:
            chat_id = message.chat_id
            group_call = self._get_group_call(chat_id)
            await group_call.start(chat_id)
            await utils.answer(message, self.strings["joined"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
