import logging
import os
from typing import Optional

import ffmpeg
from telethon import types
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest

from .. import loader, utils

@loader.tds
class VideoModModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ Hikka"""

    strings = {
        "name": "VideoMod",
        "converting": "<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ...</b>",
        "video_playing": "<b>üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ...</b>",
        "joined_video_chat": "<b>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É</b>",
        "no_video_chat": "<b>‚ùó –í–∏–¥–µ–æ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
        "no_media": "<b>‚ùó –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞: {}</b>"
    }

    def __init__(self):
        self._client = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self._client = client

    async def _get_video_chat(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —á–∞—Ç–µ"""
        try:
            # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
            if str(chat_id).startswith('-100'):
                full_chat = await self._client(GetFullChannelRequest(
                    channel=await self._client.get_input_entity(chat_id)
                ))
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
            else:
                full_chat = await self._client(GetFullChatRequest(
                    chat_id=chat_id
                ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–µ–æ —á–∞—Ç–æ–≤
            if hasattr(full_chat, 'full_chat') and full_chat.full_chat.call:
                return full_chat.full_chat.call
            
            return None
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–∞—Ç–∞: {e}")
            return None

    async def _download_video(self, message: types.Message) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
            reply = await message.get_reply_message()
            if not reply or not reply.file or not reply.file.mime_type.startswith('video/'):
                await utils.answer(message, self.strings["no_media"])
                return None

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            video_file = await reply.download_media()
            return video_file
        
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
            return None

    async def _convert_video(self, video_file: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            input_file = f"media_video_{os.getpid()}.raw"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            conversion_cmd = (
                ffmpeg.input(video_file)
                .output(
                    input_file, 
                    format='rawvideo', 
                    vcodec='rawvideo', 
                    pix_fmt='yuv420p',
                    acodec='pcm_s16le', 
                    ac=2, 
                    ar='48k'
                )
                .overwrite_output()
            )
            conversion_cmd.run()
            
            return input_file
        
        except Exception as conv_error:
            logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {conv_error}")
            return None

    @loader.command()
    async def vjoincmd(self, message: types.Message):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É"""
        try:
            chat_id = message.chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–∞—Ç–µ
            video_chat = await self._get_video_chat(chat_id)
            
            if not video_chat:
                await utils.answer(message, self.strings["no_video_chat"])
                return

            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É
            await self._client.send_message(chat_id, 'üìû –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É')
            
            await utils.answer(message, self.strings["joined_video_chat"])
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∏–¥–µ–æ —á–∞—Ç—É: {e}")
            await utils.answer(message, self.strings["error"].format(str(e)))

    @loader.command()
    async def vplaycmd(self, message: types.Message):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ —á–∞—Ç–∞
            chat_id = message.chat_id
            video_chat = await self._get_video_chat(chat_id)
            
            if not video_chat:
                await utils.answer(message, self.strings["no_video_chat"])
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            await utils.answer(message, self.strings["converting"])
            video_file = await self._download_video(message)
            
            if not video_file:
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ
            converted_file = await self._convert_video(video_file)
            
            if not converted_file:
                await utils.answer(message, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ"))
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ —á–∞—Ç
            await self._client.send_file(
                chat_id, 
                converted_file, 
                caption='üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ'
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if video_file and os.path.exists(video_file):
                    os.remove(video_file)
                if converted_file and os.path.exists(converted_file):
                    os.remove(converted_file)
            except Exception as cleanup_e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_e}")

            await utils.answer(message, self.strings["video_playing"])
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            await utils.answer(message, self.strings["error"].format(str(e)))
