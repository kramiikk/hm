import logging
import os
from typing import Dict, Any

import ffmpeg
import pytgcalls
from ShazamAPI import Shazam
from youtube_dl import YoutubeDL
from pytgcalls import GroupCallFactory
from telethon import types

from .. import loader, utils

@loader.tds
class VoiceModModule(loader.Module):
    """Module for working with voice and video chat in Hikka"""

    strings = {
        "name": "VoiceMod",
        "downloading": "<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞...</b>",
        "converting": "<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...</b>",
        "playing": "<b>üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ...</b>",
        "video_playing": "<b>üé• –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ...</b>",
        "joined": "<b>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É</b>",
        "left": "<b>‚ùå –ü–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</b>",
        "no_media": "<b>‚ùó –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞: {}</b>"
    }

    def __init__(self):
        self.group_calls: Dict[str, Any] = {}

    async def client_ready(self, client, db):
        """Initialize client when module is ready"""
        self.client = client
        self.db = db

    def _get_group_call(self, chat_id: int) -> Any:
        """Get or create group call for a chat"""
        chat_str = str(chat_id)
        if chat_str not in self.group_calls:
            self.group_calls[chat_str] = GroupCallFactory(
                self.client, 
                pytgcalls.GroupCallFactory.MTPROTO_CLIENT_TYPE.TELETHON
            ).get_file_group_call()
        return self.group_calls[chat_str]

    async def _download_media(self, message: types.Message):
        """Download media from message or link"""
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –∏–∑ —Ä–µ–ø–ª–∞—è
        reply = await message.get_reply_message()
        if reply:
            if reply.video:
                return await reply.download_media(), True
            elif reply.audio:
                return await reply.download_media(), False

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ
        args = utils.get_args_raw(message)
        if args:
            try:
                ytdl_opts = {
                    "format": "bestvideo+bestaudio/best",
                    "outtmpl": "%(title)s.%(ext)s",
                    "nooverwrites": True,
                    "no_warnings": True,
                    "quiet": True,
                }
                
                with YoutubeDL(ytdl_opts) as ydl:
                    info = ydl.extract_info(args, download=True)
                    filename = ydl.prepare_filename(info)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–¥–∏–∞ –≤–∏–¥–µ–æ
                    is_video = 'vcodec' in info and info['vcodec'] != 'none'
                    
                    return filename, is_video
            except Exception as e:
                await utils.answer(message, self.strings["error"].format(str(e)))
                return None, None

        return None, None

    @loader.command(ru_doc="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ")
    async def vplaycmd(self, message: types.Message):
        """Play audio/video in voice chat"""
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
        media, is_video = await self._download_media(message)
        if not media:
            return await utils.answer(message, self.strings["no_media"])
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            await utils.answer(message, self.strings["converting"])
            
            # –ü—É—Ç—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            input_file = f"media_{'video' if is_video else 'audio'}_{os.getpid()}.raw"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
            conversion_cmd = (
                ffmpeg.input(media)
                .output(
                    input_file, 
                    format='rawvideo' if is_video else 's16le', 
                    vcodec='rawvideo' if is_video else 'pcm_s16le', 
                    pix_fmt='yuv420p' if is_video else None,
                    acodec='pcm_s16le', 
                    ac=2, 
                    ar='48k'
                )
                .overwrite_output()
            )
            conversion_cmd.run()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Ç
            chat_id = message.chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º group call
            group_call = self._get_group_call(chat_id)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            await group_call.start(chat_id)
            group_call.input_filename = input_file
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            await utils.answer(
                message, 
                self.strings["video_playing" if is_video else "playing"]
            )
        
        except Exception as e:
            logging.error(f"Playback error: {e}")
            await utils.answer(message, self.strings["error"].format(str(e)))
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if os.path.exists(media):
                    os.remove(media)
                if os.path.exists(input_file):
                    os.remove(input_file)
            except Exception as cleanup_e:
                logging.error(f"Cleanup error: {cleanup_e}")

    @loader.command(ru_doc="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")
    async def vjoincmd(self, message: types.Message):
        """Join voice chat"""
        try:
            chat_id = message.chat_id
            group_call = self._get_group_call(chat_id)
            await group_call.start(chat_id)
            await utils.answer(message, self.strings["joined"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    @loader.command(ru_doc="–ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç")
    async def vleavecmd(self, message: types.Message):
        """Leave voice chat"""
        try:
            chat_id = message.chat_id
            chat_str = str(chat_id)
            
            if chat_str in self.group_calls:
                await self.group_calls[chat_str].stop()
                del self.group_calls[chat_str]
            
            await utils.answer(message, self.strings["left"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
