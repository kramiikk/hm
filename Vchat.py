import logging
import os
from typing import Optional, Union

from telethon import types, functions, errors
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.tl.functions.phone import (
    GetGroupCallRequest,
    JoinGroupCallPresentationRequest,
    CreateGroupCallRequest,
    LeaveGroupCallRequest
)
from telethon.tl.types import (
    InputGroupCall,
    DocumentAttributeVideo,
    Chat,
    Channel,
    Message
)
import ffmpeg

from .. import loader, utils

@loader.tds
class GroupVideoModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ—á–∞—Ç–æ–º –≥—Ä—É–ø–ø—ã"""
    
    strings = {
        "name": "GroupVideo",
        "starting": "<b>üé• –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ...</b>",
        "joining": "<b>üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É –≥—Ä—É–ø–ø—ã...</b>",
        "joined": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É –≥—Ä—É–ø–ø—ã</b>",
        "error": "<b>‚ùå –û—à–∏–±–∫–∞: {}</b>",
        "no_reply_video": "<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ</b>",
        "leave_success": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª –≤–∏–¥–µ–æ—á–∞—Ç</b>",
        "not_group": "<b>‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>",
        "downloading": "<b>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</b>",
        "converting": "<b>üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ...</b>",
        "playing": "<b>‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ...</b>",
        "invalid_file": "<b>‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ</b>",
        "download_error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {}</b>",
        "convert_error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {}</b>",
        "creating_chat": "<b>üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞...</b>",
        "already_in_call": "<b>‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É</b>"
    }

    async def _get_group_call(self, chat: Union[Chat, Channel], create: bool = False) -> Optional[types.phone.GroupCall]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ–æ—á–∞—Ç–µ –≥—Ä—É–ø–ø—ã"""
        try:
            if isinstance(chat, Channel):
                full = await self._client(GetFullChannelRequest(channel=chat))
                if full.full_chat.call is not None:
                    return await self._client(GetGroupCallRequest(call=full.full_chat.call))
            elif isinstance(chat, Chat):
                full = await self._client(GetFullChatRequest(chat_id=chat.id))
                if full.full_chat.call is not None:
                    return await self._client(GetGroupCallRequest(call=full.full_chat.call))
                    
            if create:
                return await self._create_group_call(chat)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ—á–∞—Ç–µ: {e}")
        return None

    async def _create_group_call(self, chat: Union[Chat, Channel]) -> Optional[types.phone.GroupCall]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—á–∞—Ç–∞"""
        try:
            await self._client.send_message(chat, self.strings["creating_chat"])
            call = await self._client(CreateGroupCallRequest(
                peer=chat,
                title="–í–∏–¥–µ–æ—á–∞—Ç",
                random_id=self._client.random_id()
            ))
            return await self._client(GetGroupCallRequest(call=call.updates[0].call))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ—á–∞—Ç–∞: {e}")
            return None

    async def _download_video(self, message: Message) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            return None
            
        try:
            if not hasattr(reply.media, 'document') or not any(
                isinstance(attr, DocumentAttributeVideo)
                for attr in reply.media.document.attributes
            ):
                return None
                
            video_path = await reply.download_media()
            return video_path
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await self._client.send_message(message.chat, self.strings["download_error"].format(str(e)))
            return None

    async def _convert_video(self, input_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∏–¥–µ–æ—á–∞—Ç–∞"""
        output_path = None
        try:
            output_path = input_path + "_converted.mp4"
            
            stream = ffmpeg.input(input_path)
            stream = ffmpeg.output(stream, output_path,
                                 vcodec='h264',
                                 acodec='aac',
                                 video_bitrate='1M',
                                 audio_bitrate='128k',
                                 f='mp4')
            
            ffmpeg.run(stream, overwrite_output=True, capture_stdout=True, capture_stderr=True)
            
            return output_path
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            if output_path and os.path.exists(output_path):
                os.remove(output_path)
            return None
        finally:
            if input_path and os.path.exists(input_path):
                os.remove(input_path)

    @loader.command
    async def vjoincmd(self, message: Message):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É –≥—Ä—É–ø–ø—ã"""
        chat = message.chat
        
        if not isinstance(chat, (Chat, Channel)):
            await self._client.send_message(message.chat, self.strings["not_group"])
            return
            
        try:
            await self._client.send_message(message.chat, self.strings["joining"])
            
            call = await self._get_group_call(chat, create=True)
            if not call:
                await self._client.send_message(message.chat, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ—á–∞—Ç–µ"))
                return

            try:
                await self._client(JoinGroupCallPresentationRequest(
                    call=InputGroupCall(
                        id=call.call.id,
                        access_hash=call.call.access_hash
                    ),
                    params={
                        "muted": True,
                        "video_stopped": True,
                        "screen_sharing": False,
                        "raise_hand": False
                    }
                ))
                
                await self._client.send_message(message.chat, self.strings["joined"])
                
            except errors.ChatAdminRequiredError:
                await self._client.send_message(message.chat, self.strings["error"].format("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
            except errors.GroupCallJoinMissingError:
                await self._client.send_message(message.chat, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É"))
            
        except Exception as e:
            await self._client.send_message(message.chat, self.strings["error"].format(str(e)))

    @loader.command
    async def vplaycmd(self, message: Message):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ)"""
        chat = message.chat
        
        if not isinstance(chat, (Chat, Channel)):
            await self._client.send_message(message.chat, self.strings["not_group"])
            return
            
        if not await message.get_reply_message():
            await self._client.send_message(message.chat, self.strings["no_reply_video"])
            return
            
        try:
            call = await self._get_group_call(chat, create=True)
            if not call:
                await self._client.send_message(message.chat, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ—á–∞—Ç–µ"))
                return
                
            try:
                await self.vjoincmd(message)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É: {e}")
                
            video_path = await self._download_video(message)
            if not video_path:
                await self._client.send_message(message.chat, self.strings["invalid_file"])
                return
                
            await self._client.send_message(message.chat, self.strings["converting"])
            
            converted_path = await self._convert_video(video_path)
            if not converted_path:
                await self._client.send_message(message.chat, self.strings["convert_error"].format("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"))
                return
                
            try:
                await self._client.send_file(
                    chat.id,
                    converted_path,
                    caption=self.strings["playing"],
                    reply_to=message.reply_to_msg_id,
                    video_note=True
                )
            finally:
                if os.path.exists(converted_path):
                    os.remove(converted_path)
                
        except Exception as e:
            await self._client.send_message(message.chat, self.strings["error"].format(str(e)))

    @loader.command
    async def vleavecmd(self, message: Message):
        """–ü–æ–∫–∏–Ω—É—Ç—å –≤–∏–¥–µ–æ—á–∞—Ç –≥—Ä—É–ø–ø—ã"""
        chat = message.chat
        
        if not isinstance(chat, (Chat, Channel)):
            await self._client.send_message(message.chat, self.strings["not_group"])
            return
            
        try:
            call = await self._get_group_call(chat)
            if not call:
                await self._client.send_message(message.chat, self.strings["error"].format("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ—á–∞—Ç–∞"))
                return
            
            try:
                await self._client(LeaveGroupCallRequest(
                    call=InputGroupCall(
                        id=call.call.id,
                        access_hash=call.call.access_hash
