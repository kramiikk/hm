import logging
from telethon import types, functions
from telethon.tl.functions.phone import CreateGroupCallRequest, JoinGroupCallRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest
import telethon.tl.types as tl
import os
import asyncio

from .. import loader, utils

@loader.tds
class VideoCallsModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º–∏ –≤ Telegram"""
    
    strings = {
        "name": "VideoCalls",
        "creating_call": "<b>üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞...</b>",
        "joining_call": "<b>üìû –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É...</b>",
        "joined_call": "<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É</b>",
        "no_voice_chat": "<b>‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ—á–∞—Ç–∞</b>",
        "created_call": "<b>‚úÖ –í–∏–¥–µ–æ—á–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>",
        "error_creating": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ—á–∞—Ç–∞: {}</b>",
        "error_joining": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É: {}</b>",
        "no_rights": "<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ—á–∞—Ç–æ–º</b>",
        "downloading_video": "<b>üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</b>",
        "playing_video": "<b>‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ...</b>",
        "error_playing": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {}</b>",
        "no_video_reply": "<b>‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ</b>",
        "unsupported_file": "<b>‚ùå –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>",
        "not_in_call": "<b>‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É</b>",
    }

    async def _get_chat_call(self, chat):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ–æ—á–∞—Ç–µ"""
        try:
            if isinstance(chat, (types.Chat, types.Channel)):
                if hasattr(chat, 'username'):
                    full = await self._client(GetFullChannelRequest(chat.username))
                else:
                    full = await self._client(GetFullChatRequest(chat.id))
                return full.full_chat.call
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ—á–∞—Ç–µ: {e}")
        return None

    async def _create_voice_chat(self, chat_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—á–∞—Ç–∞"""
        try:
            chat = await self._client.get_entity(chat_id)
            call = await self._get_chat_call(chat)
            
            if call:
                return call
            
            result = await self._client(CreateGroupCallRequest(
                peer=chat,
                title="–í–∏–¥–µ–æ—á–∞—Ç"
            ))
            return result
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ—á–∞—Ç–∞: {e}")
            return None

    async def _download_media(self, message):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
        try:
            if not message.media:
                return None
            
            path = await message.download_media()
            return path
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
            return None

    @loader.command
    async def vcreatecmd(self, message):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—á–∞—Ç –≤ –≥—Ä—É–ø–ø–µ"""
        chat = message.chat
        
        try:
            await utils.answer(message, self.strings["creating_call"])
            
            result = await self._create_voice_chat(chat.id)
            if result:
                await utils.answer(message, self.strings["created_call"])
            else:
                await utils.answer(message, self.strings["error_creating"].format("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                
        except Exception as e:
            error_msg = str(e)
            if "PARTICIPANT_JOIN_MISSING" in error_msg:
                await utils.answer(message, self.strings["no_rights"])
            else:
                await utils.answer(message, self.strings["error_creating"].format(error_msg))

    @loader.command
    async def vjoincmd(self, message):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–∏–¥–µ–æ—á–∞—Ç—É"""
        chat = message.chat
        
        try:
            await utils.answer(message, self.strings["joining_call"])
            
            call = await self._get_chat_call(chat)
            if not call:
                await utils.answer(message, self.strings["no_voice_chat"])
                return
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É
            join_result = await self._client(JoinGroupCallRequest(
                call=call,
                muted=True,
                video_stopped=True,
                params=tl.DataJSON(data="{}")
            ))
            
            if join_result:
                await utils.answer(message, self.strings["joined_call"])
            else:
                await utils.answer(message, self.strings["error_joining"].format("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                
        except Exception as e:
            await utils.answer(message, self.strings["error_joining"].format(str(e)))

    @loader.command
    async def vplaycmd(self, message):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ—á–∞—Ç–µ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ)"""
        try:
            chat = message.chat
            reply = await message.get_reply_message()
            
            if not reply or not reply.media:
                await utils.answer(message, self.strings["no_video_reply"])
                return
            
            call = await self._get_chat_call(chat)
            if not call:
                await utils.answer(message, self.strings["not_in_call"])
                return
            
            status_msg = await utils.answer(message, self.strings["downloading_video"])
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            video_path = await self._download_media(reply)
            if not video_path:
                await utils.answer(status_msg, self.strings["error_playing"].format("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"))
                return
            
            try:
                await utils.answer(status_msg, self.strings["playing_video"])
                
                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
                join_result = await self._client(JoinGroupCallRequest(
                    call=call,
                    muted=True,
                    video_stopped=False,
                    params=tl.DataJSON(data="{}")
                ))
                
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≤–∏–¥–µ–æ
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ GroupCall API
                # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≤–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
                # –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞—Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å
                # —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pytgcalls –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                
            except Exception as e:
                await utils.answer(status_msg, self.strings["error_playing"].format(str(e)))
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if os.path.exists(video_path):
                    os.remove(video_path)
                    
        except Exception as e:
            await utils.answer(message, self.strings["error_playing"].format(str(e)))
