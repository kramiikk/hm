from telethon import types
from telethon.tl.types import (
    MessageService,
    MessageActionChatJoinedByLink,
    MessageActionChatAddUser
)
import logging
import re
import shlex
from .. import loader, utils
import asyncio

logger = logging.getLogger(__name__)

def parse_arguments(args_raw):
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        args = shlex.split(args_raw)
    except:
        args = args_raw.split()
    
    result = {
        "group": None,
        "first_name": "",
        "last_name": "",
        "limit": 10000,
        "exact_match": False,
        "show_all": False
    }
    
    i = 0
    while i < len(args):
        arg = args[i]
        
        if arg in ('-l', '--limit'):
            if i + 1 < len(args):
                try:
                    result["limit"] = max(int(args[i + 1]), 1)
                    i += 2
                    continue
                except ValueError:
                    pass
            i += 1
            continue
            
        if result["group"] is None:
            result["group"] = arg
        elif not result["first_name"]:
            if arg == "''" or arg == '""' or arg == '" "' or arg == "' '":
                result["show_all"] = True
            else:
                result["first_name"] = arg
                if args_raw.find(f'"{arg}"') != -1 or args_raw.find(f"'{arg}'") != -1:
                    result["exact_match"] = True
        elif not result["last_name"]:
            if arg == "''" or arg == '""' or arg == '" "' or arg == "' '":
                result["show_all"] = True
            else:
                result["last_name"] = arg
                if args_raw.find(f'"{arg}"') != -1 or args_raw.find(f"'{arg}'") != -1:
                    result["exact_match"] = True
            
        i += 1
    
    return result if result["group"] else None

@loader.tds
class JoinSearchMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≥—Ä—É–ø–ø–µ"""
    
    strings = {
        "name": "JoinSearch",
        "no_query": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>",
        "searching": "üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤ –≥—Ä—É–ø–ø–µ {}\n–ò–º—è: {}\n–§–∞–º–∏–ª–∏—è: {}\n–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {}</b>",
        "progress": "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n–ù–∞–π–¥–µ–Ω–æ: {}</b>",
        "no_results": "‚ùå <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)</b>",
        "results": "‚úÖ <b>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {}!\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}</b>\n\n{}",
        "final_results": "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {}!\n–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}</b>",
        "group_not_found": "‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
        "invalid_args": (
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚û† <code>.joinsearch –≥—Ä—É–ø–ø–∞ [–∏–º—è] [—Ñ–∞–º–∏–ª–∏—è] [-l –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>–≥—Ä—É–ø–ø–∞</code> - username –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ <code>–∏–º—è</code> - –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ <code>—Ñ–∞–º–∏–ª–∏—è</code> - —Ñ–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ <code>-l</code> –∏–ª–∏ <code>--limit</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>.joinsearch @group_name –ò–≤–∞–Ω</code>\n"
            "‚Ä¢ <code>.joinsearch @group_name –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</code>\n"
            "‚Ä¢ <code>.joinsearch @group_name \"\" –ü–µ—Ç—Ä–æ–≤</code>\n"
            "‚Ä¢ <code>.joinsearch @group_name –ò–≤–∞–Ω -l 5000</code>\n"
            "‚Ä¢ <code>.joinsearch @group_name –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ --limit 20000</code>"
        )
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._running = False

    async def client_ready(self, client, db):
        self._client = client

    def _is_join_message(self, msg):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø—É"""
        if not isinstance(msg, MessageService):
            return False
            
        return isinstance(msg.action, (
            MessageActionChatJoinedByLink,
            MessageActionChatAddUser
        ))

    async def _get_user_name(self, client, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            user = await client.get_entity(user_id)
            return user.first_name or "", user.last_name or ""
        except:
            return "", ""

    def _check_match(self, first_name, last_name, search_first_name, search_last_name, exact_match=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        if not first_name and not last_name:
            return False
            
        first_name = first_name.lower() if first_name else ""
        last_name = last_name.lower() if last_name else ""
        search_first_name = search_first_name.lower() if search_first_name else ""
        search_last_name = search_last_name.lower() if search_last_name else ""
        
        if exact_match:
            if search_first_name and first_name != search_first_name:
                return False
            if search_last_name and last_name != search_last_name:
                return False
        else:
            if search_first_name and search_first_name not in first_name:
                return False
            if search_last_name and search_last_name not in last_name:
                return False
            
        return bool(search_first_name or search_last_name)

    async def _send_results_chunk(self, message, group, messages_checked, results, is_final=False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç chunk —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if is_final:
            result_text = self.strings["final_results"].format(
                group,
                messages_checked,
                len(results)
            )
        else:
            result_text = self.strings["results"].format(
                group,
                messages_checked,
                len(results),
                "\n".join(results[-50:])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            )
        
        await message.respond(result_text)
        await asyncio.sleep(0.3)

    async def joinsearchcmd(self, message):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
        if self._running:
            await utils.answer(message, "‚ö†Ô∏è <b>–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["invalid_args"])
            return
            
        parsed_args = parse_arguments(args)
        if not parsed_args:
            await utils.answer(message, self.strings["invalid_args"])
            return
            
        if not parsed_args["show_all"] and not (parsed_args["first_name"] or parsed_args["last_name"]):
            await utils.answer(message, self.strings["invalid_args"])
            return

        try:
            target_group = await message.client.get_entity(parsed_args["group"])
        except Exception:
            await utils.answer(message, self.strings["group_not_found"])
            return

        self._running = True
        status_message = await utils.answer(
            message, 
            self.strings["searching"].format(
                parsed_args["group"],
                parsed_args["first_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                parsed_args["last_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                parsed_args["limit"]
            )
        )
        
        try:
            results = []
            messages_checked = 0
            last_update = 0
            last_results_count = 0
            
            async for msg in message.client.iter_messages(
                target_group,
                limit=parsed_args["limit"],
                filter=types.InputMessagesFilterEmpty()
            ):
                if not self._is_join_message(msg):
                    continue
                    
                messages_checked += 1
                
                if messages_checked % 250 == 0 and messages_checked != last_update:
                    last_update = messages_checked
                    await status_message.edit(
                        self.strings["progress"].format(
                            messages_checked, len(results)
                        )
                    )
                    await asyncio.sleep(0.1)

                user_id = None
                if isinstance(msg.action, MessageActionChatAddUser):
                    user_id = msg.action.users[0] if msg.action.users else None
                elif isinstance(msg.action, MessageActionChatJoinedByLink):
                    user_id = msg.from_id.user_id if msg.from_id else None

                if user_id:
                    if parsed_args["show_all"]:
                        first_name, last_name = await self._get_user_name(message.client, user_id)
                        user_name = f"{first_name} {last_name}".strip()
                        action_text = "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Å—Å—ã–ª–∫–µ" if isinstance(msg.action, MessageActionChatJoinedByLink) else "–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω"
                        results.append(f"‚Ä¢ {user_name} {action_text} | ID: {user_id} | <a href='t.me/{target_group.username}/{msg.id}'>–°—Å—ã–ª–∫–∞</a> | {msg.date.strftime('%d.%m.%Y %H:%M:%S')}")
                    else:
                        first_name, last_name = await self._get_user_name(message.client, user_id)
                        if self._check_match(first_name, last_name, 
                                          parsed_args["first_name"], parsed_args["last_name"],
                                          parsed_args["exact_match"]):
                            user_name = f"{first_name} {last_name}".strip()
                            action_text = "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Å—Å—ã–ª–∫–µ" if isinstance(msg.action, MessageActionChatJoinedByLink) else "–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω"
                            if parsed_args["exact_match"]:
                                results.append(f"‚Ä¢ {user_name} {action_text} | ID: {user_id} | <a href='t.me/{target_group.username}/{msg.id}'>–°—Å—ã–ª–∫–∞</a> | {msg.date.strftime('%d.%m.%Y %H:%M:%S')}")
                            else:
                                results.append(f"‚Ä¢ {user_name} {action_text} | ID: {user_id} | <a href='t.me/{target_group.username}/{msg.id}'>–°—Å—ã–ª–∫–∞</a>")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 50 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(results) >= last_results_count + 50:
                    await self._send_results_chunk(message, parsed_args["group"], messages_checked, results)
                    last_results_count = len(results)
                
                if messages_checked % 100 == 0:
                    await asyncio.sleep(0.05)

            if not results:
                await utils.answer(status_message, self.strings["no_results"].format(messages_checked))
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._send_results_chunk(message, parsed_args["group"], messages_checked, results, is_final=True)

        except Exception as e:
            await utils.answer(status_message, f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{str(e)}")
        finally:
            self._running = False
