from telethon import types
from telethon.tl.types import (
    MessageService,
    MessageActionChatJoinedByLink,
    MessageActionChatAddUser
)
import logging
import re
from .. import loader, utils
import asyncio

logger = logging.getLogger(__name__)

@loader.tds
class JoinSearchMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≥—Ä—É–ø–ø–µ"""
    
    strings = {
        "name": "JoinSearch",
        "no_query": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!\n–ü—Ä–∏–º–µ—Ä: .joinsearch –≥—Ä—É–ø–ø–∞ –∏–º—è —Ñ–∞–º–∏–ª–∏—è [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π]</b>",
        "searching": "üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤ –≥—Ä—É–ø–ø–µ {} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {} {}\n–ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {}</b>",
        "progress": "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n–ù–∞–π–¥–µ–Ω–æ: {}</b>",
        "no_results": "‚ùå <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)</b>",
        "results": "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {}!\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}</b>\n\n{}",
        "group_not_found": "‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
        "invalid_args": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .joinsearch –≥—Ä—É–ø–ø–∞ –∏–º—è —Ñ–∞–º–∏–ª–∏—è [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π]</b>"
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._running = False

    async def client_ready(self, client, db):
        self._client = client

    def _is_join_message(self, msg):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø—É"""
        if not isinstance(msg, MessageService) or not msg.action:
            return False
            
        return isinstance(msg.action, (
            MessageActionChatJoinedByLink,  # –í—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            MessageActionChatAddUser        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ))

    def _check_match(self, msg, first_name, last_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        if not msg.action_message:
            return False
            
        message_lower = msg.action_message.lower()
        first_name_lower = first_name.lower()
        last_name_lower = last_name.lower() if last_name else ""
        
        if first_name_lower not in message_lower:
            return False
            
        if last_name and last_name_lower not in message_lower:
            return False
            
        return True

    def _parse_args(self, args):
        """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        if len(args) < 2:
            return None
            
        result = {
            "group": args[0],
            "first_name": args[1],
            "last_name": None,
            "limit": 10000
        }
        
        remaining_args = args[2:]
        for arg in remaining_args:
            try:
                num = int(arg)
                result["limit"] = min(max(num, 1), 50000)
            except ValueError:
                result["last_name"] = arg
                
        return result

    async def joinsearchcmd(self, message):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .joinsearch <–≥—Ä—É–ø–ø–∞> <–∏–º—è> [—Ñ–∞–º–∏–ª–∏—è] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π]
        –ü—Ä–∏–º–µ—Ä—ã: 
        .joinsearch @group_name John Doe 20000
        .joinsearch @group_name John 5000
        .joinsearch @group_name John Doe"""
        
        if self._running:
            await utils.answer(message, "‚ö†Ô∏è <b>–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>")
            return

        args = utils.get_args_raw(message).split()
        parsed_args = self._parse_args(args)
        
        if not parsed_args:
            await utils.answer(message, self.strings["invalid_args"])
            return

        try:
            target_group = await message.client.get_entity(parsed_args["group"])
        except Exception:
            await utils.answer(message, self.strings["group_not_found"])
            return

        self._running = True
        status_message = await utils.answer(
            message, 
            self.strings["searching"].format(
                parsed_args["group"],
                parsed_args["first_name"],
                parsed_args["last_name"] if parsed_args["last_name"] else "",
                parsed_args["limit"]
            )
        )
        
        try:
            results = []
            messages_checked = 0
            last_update = 0
            
            async for msg in message.client.iter_messages(
                target_group,
                limit=parsed_args["limit"],
                filter=types.InputMessagesFilterEmpty()
            ):
                if not self._is_join_message(msg):
                    continue
                    
                messages_checked += 1
                
                if messages_checked % 100 == 0 and messages_checked != last_update:
                    last_update = messages_checked
                    await status_message.edit(
                        self.strings["progress"].format(
                            messages_checked, len(results)
                        )
                    )
                    await asyncio.sleep(0.3)
                
                if self._check_match(msg, parsed_args["first_name"], parsed_args["last_name"]):
                    user_info = f"ID: {msg.from_id.user_id}" if msg.from_id else "ID –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
                    results.append(f"‚Ä¢ {msg.action_message} | {user_info} | <a href='t.me/{target_group.username}/{msg.id}'>–°—Å—ã–ª–∫–∞</a>")
                
                if messages_checked % 50 == 0:
                    await asyncio.sleep(0.1)

            if not results:
                await utils.answer(status_message, self.strings["no_results"].format(messages_checked))
            else:
                result_text = self.strings["results"].format(
                    parsed_args["group"],
                    messages_checked,
                    len(results),
                    "\n".join(results[:50])
                )
                
                if len(results) > 50:
                    result_text += f"\n\n<b>‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b>"
                
                await utils.answer(status_message, result_text)

        except Exception as e:
            await utils.answer(status_message, f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{str(e)}")
        finally:
            self._running = False
