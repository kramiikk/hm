from telethon import events, types
from telethon.tl.types import (
    MessageService,
    PeerChannel,
    PeerChat,
    MessageActionChatJoinedByLink,
    MessageActionChatAddUser
)
import logging
import re
from .. import loader, utils
import asyncio

logger = logging.getLogger(__name__)

@loader.tds
class JoinSearchMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≥—Ä—É–ø–ø–µ"""
    
    strings = {
        "name": "JoinSearch",
        "no_query": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)</b>",
        "searching": "üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤ {} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...</b>",
        "progress": "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n–ù–∞–π–¥–µ–Ω–æ: {}</b>",
        "no_results": "‚ùå <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)</b>",
        "results": "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}</b>\n\n{}"
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._lock = asyncio.Lock()
        self._task = None
        self._running = False

    async def client_ready(self, client, db):
        self._client = client

    def _is_join_message(self, msg):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø—É"""
        if not isinstance(msg, MessageService) or not msg.action:
            return False
            
        return isinstance(msg.action, (
            MessageActionChatJoinedByLink,  # –í—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            MessageActionChatAddUser        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ))

    def _check_match(self, msg, query):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        try:
            user_id = int(query)
            if isinstance(msg.action, MessageActionChatAddUser):
                return user_id in msg.action.users
            if msg.from_id:
                return user_id == msg.from_id.user_id
            return False
        except ValueError:
            return re.search(query.lower(), msg.action_message.lower())

    async def joinsearchcmd(self, message):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≥—Ä—É–ø–ø–µ. 
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .joinsearch <–∑–∞–ø—Ä–æ—Å/ID> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π]
        –ó–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if self._running:
            await utils.answer(message, "‚ö†Ô∏è <b>–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.</b>")
            return

        args = utils.get_args_raw(message).split()
        if not args:
            await utils.answer(message, self.strings["no_query"])
            return

        query = args[0]
        try:
            limit = min(int(args[1]) if len(args) > 1 else 10000, 50000)
        except ValueError:
            limit = 10000

        self._running = True
        status_message = await utils.answer(message, self.strings["searching"].format(limit))
        
        try:
            results = []
            messages_checked = 0
            last_update = 0
            
            async for msg in message.client.iter_messages(
                message.chat_id,
                limit=limit,
                filter=types.InputMessagesFilterEmpty()
            ):
                if not self._is_join_message(msg):
                    continue
                    
                messages_checked += 1
                
                if messages_checked % 100 == 0 and messages_checked != last_update:
                    last_update = messages_checked
                    await status_message.edit(
                        self.strings["progress"].format(
                            messages_checked, len(results)
                        )
                    )
                    await asyncio.sleep(0.3)
                
                if self._check_match(msg, query):
                    user_info = f"ID: {msg.from_id.user_id}" if msg.from_id else "ID –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
                    results.append(f"‚Ä¢ {msg.action_message} | {user_info} | <a href='t.me/{message.chat.username}/{msg.id}'>–°—Å—ã–ª–∫–∞</a>")
                
                if messages_checked % 50 == 0:
                    await asyncio.sleep(0.1)

            if not results:
                await utils.answer(status_message, self.strings["no_results"].format(messages_checked))
            else:
                result_text = self.strings["results"].format(
                    messages_checked,
                    len(results),
                    "\n".join(results[:50])
                )
                
                if len(results) > 50:
                    result_text += f"\n\n<b>‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b>"
                
                await utils.answer(status_message, result_text)

        except Exception as e:
            await utils.answer(status_message, f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{str(e)}")
        finally:
            self._running = False
