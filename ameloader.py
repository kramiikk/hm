from .. import loader
import os
import re
import urllib.parse
import logging

@loader.tds
class AmeChangeLoaderText(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.014"""

    strings = {"name": "AmeChangeLoaderText"}

    PLACEHOLDERS = {
        "version": "'.'.join(map(str, __version__))",
        "build": "build",
        "build_hash": "build[:7]",
        "upd": "upd",
        "web_url": "web_url",
    }

    async def updateloadercmd(self, message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
        """
        cmd = message.raw_text.split(maxsplit=1)
        if len(cmd) == 1:
            await message.edit(
                "<b>üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ AmeChangeLoaderText:</b>\n\n"
                "‚Ä¢ <code>.updateloader https://site.com/banner.mp4</code> - –ó–∞–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç —Å placeholder</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n"
                "   {version} - –≤–µ—Ä—Å–∏—è\n"
                "   {build} - –ø–æ–ª–Ω—ã–π –±–∏–ª–¥\n"
                "   {build_hash} - –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –±–∏–ª–¥–∞\n"
                "   {upd} - —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "   {web_url} - –≤–µ–±-URL\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "<code>.updateloader –ê–ø–¥–µ–π—Ç {upd} | –í–µ—Ä—Å–∏—è {version}</code>\n"
                "<code>.updateloader –ë–∏–ª–¥ {build_hash} –°—Ç–∞—Ç—É—Å {upd} –í–µ–± {web_url}</code>\n\n"
            )
            return

        try:
            args = cmd[1].strip()
            main_file_path = os.path.join("hikka", "main.py")

            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ main.py
            with open(main_file_path, "r", encoding="utf-8") as f:
                content = f.read()

            # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            animation_block_pattern = (
                r"([ \t]*)await\s+client\.hikka_inline\.bot\.send_animationÓÄÅ\n"
                r"(?:[ \t]*.+,\n)*"
                r"[ \t]*caption=ÓÄÅ(?:[^)]+)ÓÄÅ,?\n"
                r"[ \t]*ÓÄÅ"
            )
            animation_block_match = re.search(animation_block_pattern, content)
            if not animation_block_match:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ main.py")

            full_block = animation_block_match.group(0)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ URL
            current_url = re.search(r'"(https://[^"]+\.mp4)"', full_block).group(1)

            # –ó–∞–º–µ–Ω–∞ –±–ª–æ–∫–∞
            if self._is_valid_url(args):
                new_block = full_block.replace(current_url, args)
                result_message = f"‚úÖ –ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <code>{args}</code>"
            else:
                user_text = args.replace('"', '\\"')
                new_block = full_block.replace(
                    re.search(r'caption=ÓÄÅ(.*?)ÓÄÅ', full_block).group(1),
                    f'"{user_text}"',
                )
                result_message = f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <code>{user_text}</code>"

            content = content.replace(full_block, new_block)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(main_file_path, "w", encoding="utf-8") as f:
                f.write(content)

            await message.edit(f"{result_message}\n–ù–∞–ø–∏—à–∏—Ç–µ <code>.restart -f</code>")

        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: <code>{str(e)}</code>")

    def _is_valid_url(self, url):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .mp4.
        """
        try:
            result = urllib.parse.urlparse(url)
            return all([result.scheme, result.netloc]) and url.lower().endswith(".mp4")
        except:
            return False
