from .. import loader
import os
import re
import urllib.parse
import logging


@loader.tds
class AmeChangeLoaderText(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞."""

    strings = {"name": "AmeChangeLoaderText"}

    PLACEHOLDERS = {
        "version": "'.'.join(map(str, version))",
        "build": "build",
        "build_hash": "build[:7]",
        "upd": "upd",
        "web_url": "web_url",
    }

    async def updateloadercmd(self, message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
        """
        cmd = message.raw_text.split(maxsplit=1)
        if len(cmd) == 1:
            await message.edit(
                "<b>üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ AmeChangeLoaderText:</b>\n\n"
                "‚Ä¢ <code>.updateloader https://site.com/banner.mp4</code> - –ó–∞–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç —Å placeholder</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n"
                "   {version} - –≤–µ—Ä—Å–∏—è\n"
                "   {build} - –ø–æ–ª–Ω—ã–π –±–∏–ª–¥\n"
                "   {build_hash} - –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –±–∏–ª–¥–∞\n"
                "   {upd} - —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "   {web_url} - –≤–µ–±-URL\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "<code>.updateloader –ê–ø–¥–µ–π—Ç {upd} | –í–µ—Ä—Å–∏—è {version}</code>\n"
                "<code>.updateloader –ë–∏–ª–¥ {build_hash} –°—Ç–∞—Ç—É—Å {upd} –í–µ–± {web_url}</code>\n\n"
            )
            return
        try:
            args = cmd[1].strip()
            main_file_path = os.path.join("hikka", "main.py")

            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ main.py

            with open(main_file_path, "r", encoding="utf-8") as f:
                content = f.read()
            # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏

            animation_block_pattern = (
                r"([ \t]*)await\s+client\.hikka_inline\.bot\.send_animation\(\n"
                r"(?:[ \t]+[^\n]+\n)*"
                r"[ \t]+\)"
            )
            animation_block_match = re.search(animation_block_pattern, content)
            if not animation_block_match:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ main.py")
            indent = animation_block_match.group(1)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

            new_block = (
                f"{indent}await client.hikka_inline.bot.send_animation(\n"
                f"{indent}    logging.getLogger().handlers[0].get_logid_by_client(client.tg_id),\n"
                f'{indent}    "{args}"'
                if self._is_valid_url(args)
                else (
                    '"https://x0.at/pYQV.mp4",\n' f'{indent}    caption=("{args}"'
                    if not self._is_valid_url(args)
                    else "caption=(\n"
                    f'{indent}    "üåò <b>Hikka {self.PLACEHOLDERS["version"]} started!</b>\\n\\n"\n'
                    f'{indent}    "üå≥ <b>GitHub commit SHA: <a href=\\"https://github.com/coddrago/Hikka/commit/{self.PLACEHOLDERS["build"]}\\">{self.PLACEHOLDERS["build_hash"]}</a></b>\\n"\n'
                    f'{indent}    "‚úä <b>Update status: {self.PLACEHOLDERS["upd"]}</b>\\n"\n'
                    f'{indent}    "<b>{self.PLACEHOLDERS["web_url"]}</b>")\n'
                    f"{indent})\n"
                )
            )

            # –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π

            content = content.replace(animation_block_match.group(0), new_block)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

            with open(main_file_path, "w", encoding="utf-8") as f:
                f.write(content)
            result_message = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <code>{args}</code>\n–ù–∞–ø–∏—à–∏—Ç–µ <code>.restart -f</code>"
            await message.edit(result_message)
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: <code>{str(e)}</code>")

    def _is_valid_url(self, url):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .mp4.
        """
        try:
            result = urllib.parse.urlparse(url)
            return all([result.scheme, result.netloc]) and url.lower().endswith(".mp4")
        except:
            return False
