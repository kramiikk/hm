from .. import loader
import os
import re
import urllib.parse


@loader.tds
class AmeChangeLoaderText(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞."""

    strings = {"name": "AmeChangeLoaderText"}

    def is_valid_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞ .mp4"""
        try:
            result = urllib.parse.urlparse(url)
            return all([result.scheme, result.netloc]) and url.endswith(".mp4")
        except:
            return False

    async def updateloadercmd(self, message):
        """
        .updateloader reset hikari - –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hikka
        .updateloader reset coddrago - –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CodDrago
        .updateloader https://example.com/banner.mp4 - –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
        .updateloader —Ç–µ–∫—Å—Ç - –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
        """

        args = message.raw_text.split(" ", 3)

        if len(args) == 1:
            help_text = (
                "<b>üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ AmeChangeLoaderText:</b>\n\n"
                "‚Ä¢ <code>.updateloader reset hikari</code> - –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Hikka\n"
                "‚Ä¢ <code>.updateloader reset coddrago</code> - –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º CodDrago\n"
                "‚Ä¢ <code>.updateloader https://site.com/banner.mp4</code> - –ó–∞–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n\n"
            )
            await message.edit(help_text)
            return
        reset = len(args) >= 3 and args[1] == "reset"
        reset_type = args[2] if reset else None

        try:
            main_file_path = os.path.join("hikka", "main.py")

            with open(main_file_path, "r", encoding="utf-8") as file:
                content = file.read()
            if reset:
                if reset_type == "hikari":
                    url = "https://github.com/hikariatama/assets/raw/master/hikka_banner.mp4"
                    repo_link = "https://github.com/hikariatama/Hikka"
                elif reset_type == "coddrago":
                    url = "https://x0.at/pYQV.mp4"
                    repo_link = "https://github.com/coddrago/Hikka"
                else:
                    await message.edit(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–±—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hikari –∏–ª–∏ coddrago</b>"
                    )
                    return
                caption = (
                    'caption=(\n                    "üåò <b>Hikka {} started!</b>\n\nüå≥ <b>GitHub commit SHA: <a"'
                    f' href="{repo_link}/commit/{{}}">{{}}</a></b>\n‚úä'
                    ' <b>Update status: {}</b>\n<b>{}</b>".format(\n'
                    '                        ".".join(list(map(str, list(version)))),\n'
                    "                        build,\n"
                    "                        build[:7],\n"
                    "                        upd,\n"
                    "                        web_url,\n"
                    "                    )\n                ),"
                )

                content = re.sub(
                    r"([\'\"]\s*https://)[^\'\"]+(\.mp4[\'\"])", f"\\1{url}\\2", content
                )
                content = re.sub(r"caption=\([\s\S]*?\),", caption, content)

                result_message = (
                    f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {reset_type}</b>"
                )
            else:
                if self.is_valid_url(args[1]):
                    content = re.sub(
                        r"([\'\"]\s*https://)[^\'\"]+(\.mp4[\'\"])",
                        f"\\1{args[1]}\\2",
                        content,
                    )
                    result_message = (
                        f"‚úÖ <b>–ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> <code>{args[1]}</code>"
                    )
                else:
                    custom_text = re.escape(args[1])
                    content = re.sub(
                        r"caption=\([\s\S]*?\),",
                        f'caption=(\n                    "{custom_text}"\n                ),',
                        content,
                    )
                    result_message = (
                        f"‚úÖ <b>–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:</b> <code>{args[1]}</code>"
                    )
            with open(main_file_path, "w", encoding="utf-8") as file:
                file.write(content)
            result_message += "\n<b>–ù–∞–ø–∏—à–∏—Ç–µ</b> <code>.restart -f</code>"
            await message.edit(result_message)
        except Exception as e:
            await message.edit(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>{e}</code>")
