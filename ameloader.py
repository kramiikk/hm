from .. import loader
import os
import re
import urllib.parse


@loader.tds
class AmeChangeLoaderText(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞."""

    strings = {"name": "AmeChangeLoaderText"}

    PLACEHOLDERS = {
        "version": "'.'.join(map(str, version))",
        "build": "build",
        "build_hash": "build[:7]",
        "upd": "upd",
        "web_url": "web_url",
    }

    async def updateloadercmd(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –±–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞."""
        cmd = message.raw_text.split(maxsplit=1)

        if len(cmd) == 1:
            await message.edit(
                "<b>üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ AmeChangeLoaderText:</b>\n\n"
                "‚Ä¢ <code>.updateloader reset hikari</code> - –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Hikka\n"
                "‚Ä¢ <code>.updateloader reset coddrago</code> - –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º CodDrago\n"
                "‚Ä¢ <code>.updateloader https://site.com/banner.mp4</code> - –ó–∞–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
                "‚Ä¢ <code>.updateloader —Ç–µ–∫—Å—Ç —Å placeholder</code> - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n"
                "   {version} - –≤–µ—Ä—Å–∏—è\n"
                "   {build} - –ø–æ–ª–Ω—ã–π –±–∏–ª–¥\n"
                "   {build_hash} - –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –±–∏–ª–¥–∞\n"
                "   {upd} - —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "   {web_url} - –≤–µ–±-URL\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "<code>.updateloader –ê–ø–¥–µ–π—Ç {upd} | –í–µ—Ä—Å–∏—è {version}</code>\n"
                "<code>.updateloader –ë–∏–ª–¥ {build_hash} –°—Ç–∞—Ç—É—Å {upd} –í–µ–± {web_url}</code>\n\n"
            )
            return
        try:
            args = cmd[1].strip()
            main_file_path = os.path.join("hikka", "main.py")

            with open(main_file_path, "r", encoding="utf-8") as f:
                content = f.read()
            if args.startswith("reset"):
                reset_args = args.split()
                if len(reset_args) < 2:
                    raise ValueError("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å–±—Ä–æ—Å–∞: hikari –∏–ª–∏ coddrago")
                reset_type = reset_args[1]
                if reset_type == "hikari":
                    url = "https://github.com/hikariatama/assets/raw/master/hikka_banner.mp4"
                    repo_link = "https://github.com/hikariatama/Hikka"
                elif reset_type == "coddrago":
                    url = "https://x0.at/pYQV.mp4"
                    repo_link = "https://github.com/coddrago/Hikka"
                else:
                    raise ValueError(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–±—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hikari –∏–ª–∏ coddrago"
                    )
                animation_pattern = r'(await client\.hikka_inline\.bot\.send_animation\([^,]+,\s*)(["\']https://[^"\']+\.mp4["\'])'
                content = re.sub(animation_pattern, rf'\1"{url}"', content)

                default_caption = (
                    "caption=(\n"
                    '                    f"üåò <b>Hikka {version} started!</b>\\n\\n'
                    f'üå≥ <b>GitHub commit SHA: <a href="{repo_link}/commit/{{build_hash}}">{{build_hash}}</a></b>\\n'
                    '‚úä <b>Update status: {upd}</b>\\n<b>{web_url}</b>",\n'
                    '                    version=".".join(map(str, version)),\n'
                    "                    build_hash=build[:7],\n"
                    "                    upd=upd,\n"
                    "                    web_url=web_url\n"
                    "                ),"
                )

                content = re.sub(r"caption=\([\s\S]*?\),", default_caption, content)
                result_message = f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {reset_type}"
            elif self._is_valid_url(args):
                animation_pattern = r'(await client\.hikka_inline\.bot\.send_animation\([^,]+,\s*)(["\']https://[^"\']+\.mp4["\'])'
                content = re.sub(animation_pattern, rf'\1"{args}"', content)
                result_message = f"‚úÖ –ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <code>{args}</code>"
            else:
                user_text = args.replace('"', '\\"')
                has_placeholders = any(
                    f"{{{k}}}" in user_text for k in self.PLACEHOLDERS.keys()
                )

                if has_placeholders:
                    used_placeholders = []
                    for name, value in self.PLACEHOLDERS.items():
                        if f"{{{name}}}" in user_text:
                            used_placeholders.append(f"{name}={value}")
                    custom_text = (
                        "caption=(\n"
                        f'                    f"{user_text}",\n'
                        f'                    {", ".join(used_placeholders)}\n'
                        "                ),"
                    )
                else:
                    custom_text = (
                        "caption=(\n"
                        f'                    "{user_text}"\n'
                        "                ),"
                    )
                content = re.sub(r"caption=\([\s\S]*?\),", custom_text, content)
                result_message = f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <code>{user_text}</code>"
            with open(main_file_path, "w", encoding="utf-8") as f:
                f.write(content)
            await message.edit(f"{result_message}\n–ù–∞–ø–∏—à–∏—Ç–µ <code>.restart -f</code>")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: <code>{str(e)}</code>")

    def _is_valid_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º –∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .mp4."""
        try:
            result = urllib.parse.urlparse(url)
            return all([result.scheme, result.netloc]) and url.endswith(".mp4")
        except:
            return False
