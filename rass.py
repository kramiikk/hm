import asyncio
import random
from telethon.tl.types import Message
from .. import loader


@loader.tds
class RassMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

    strings = {"name": "rass"}

    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        self.me = await client.get_me()
        self.rass = db.get(
            "Thr",
            "rass",
            {
                "interval": 5,
                "messages": {},
                "code": "Super Sonic",
                "main": None,
                "chats": [],
                "last_send_time": 0,
            },
        )

        self.allowed_ids = [
            int(message.message)
            async for message in self.client.iter_messages(
                await self.client.get_input_entity("iddisihh")
            )
            if message.message
        ]

    @loader.unrestricted
    async def rasscmd(self, m):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
        args = m.text.split(" ", 1)
        if len(args) < 2:
            await self.help(m)
            return
        command = args[1].lower()
        if command == "add":
            await self.manage_chats(m, add=True)
        elif command == "rem":
            await self.manage_chats(m, add=False)
        elif command == "setmsg":
            await self.set_message(m)
        elif command == "delmsgchat":
            await self.delete_message_chat(m)
        elif command == "setint":
            await self.set_interval(m)
        elif command == "list":
            await self.list_chats(m)
        elif command == "setcode":
            await self.set_code(m)
        elif command == "setmain":
            await self.set_main(m)
        else:
            await self.help(m)

    async def help(self, m):
        """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = (
            "<b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π:</b>\n"
            "<code>.rass add [id]</code> - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.rass rem [id]</code> - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.rass setmsg</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "<code>.rass setint</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.rass list</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.rass setcode</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "<code>.rass setmain</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        )
        await m.edit(help_text)

    async def manage_chats(self, m, add=True):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = m.text.split()
        if len(args) < 3:
            await m.edit("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞")
            return
        chat_id = int(args[2])
        if chat_id not in self.allowed_ids:
            await m.edit("–£–∫–∞–∑–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º")
            return
        if add:
            if chat_id in self.rass["chats"]:
                await m.edit("–ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
            else:
                self.rass["chats"].append(chat_id)
                await m.edit("–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏")
        elif chat_id in self.rass["chats"]:
            self.rass["chats"].remove(chat_id)
            await m.edit("–ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        else:
            await m.edit("–ß–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        self.db.set("Thr", "rass", self.rass)

    async def set_interval(self, m):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        args = m.text.split(" ", 2)
        if len(args) < 3:
            await m.edit(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–µ {self.rass['interval']} –º–∏–Ω—É—Ç")
            return
        minutes = args[2]
        if not minutes.isdigit() or not 0 < int(minutes) < 60:
            await m.edit("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 1 - 59")
            return
        self.rass["interval"] = int(minutes)
        self.db.set("Thr", "rass", self.rass)
        await m.edit(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç")

    async def set_message(self, m):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        reply = await m.get_reply_message()
        if not reply:
            await m.edit("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = m.text.split(" ", 2)
        message_id = reply.id

        if len(args) == 2:  # –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ
            self.rass["message"] = message_id
            text = "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        elif args[2].lower() == "list":
            self.rass["messages_list"].append(message_id)
            text = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
        else:
            chat_id = int(args[2])
            self.rass["messages"].setdefault(chat_id, []).append(message_id)
            text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}"
        self.db.set("Thr", "rass", self.rass)
        await m.edit(text)

    async def delete_message_chat(self, m):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        args = m.text.split(" ", 3)
        if len(args) < 4:
            await m.edit("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
            return
        chat_id = int(args[2])
        message_id = int(args[3])

        if (
            chat_id not in self.rass["messages"]
            or message_id not in self.rass["messages"][chat_id]
        ):
            await m.edit(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}"
            )
            return
        self.rass["messages"][chat_id].remove(message_id)
        self.db.set("Thr", "rass", self.rass)
        await m.edit(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}"
        )

    async def list_chats(self, m):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.rass["chats"]:
            await m.edit("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç")
            return
        chat_list = []
        for iid in self.rass["chats"]:
            try:
                chat = await self.client.get_input_entity(iid)
                chat_list.append(f"<code>{iid}</code> - {chat.title}")
            except Exception:
                chat_list.append(f"<code>{iid}</code>")
        await m.edit("\n".join(chat_list))

    async def set_code(self, m):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        args = m.text.split(" ", 2)
        if len(args) < 3:
            await m.edit(f"–§—Ä–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: <code>{self.rass['code']}</code>")
            return
        self.rass["code"] = args[2]
        self.db.set("Thr", "rass", self.rass)
        await m.edit(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: <code>{args[2]}</code>")

    async def set_main(self, m):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        args = m.text.split(" ", 2)
        if len(args) < 3:
            await m.edit("–£–∫–∞–∂–∏—Ç–µ ID –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ç–∞")
            return
        iid = int(args[2])
        self.rass["main"] = iid
        self.db.set("Thr", "rass", self.rass)
        await m.edit(f"ü§ôüèæ –ì–ª–∞–≤–Ω—ã–π: <code>{iid}</code>")

    async def watcher(self, m: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        if (
            not hasattr(m, "text")
            or not isinstance(m, Message)
            or self.me.id not in self.allowed_ids
        ):
            return
        if self.rass["code"] in m.text and m.sender_id == self.me.id:
            iid = m.chat_id
            if m.chat_id not in self.rass["chats"]:
                self.rass["chats"].append(iid)
            else:
                self.rass["chats"].remove(m.chat_id)
            self.db.set("Thr", "rass", self.rass)
            await self.client.send_message(
                "me", f"–ß–∞—Ç <code>{iid}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"
            )
        current_time = m.date.timestamp()
        if current_time - self.rass["last_send_time"] < self.rass["interval"] * 60:
            return
        if (
            not self.rass["message"]
            or not self.rass["chats"]
            or m.chat_id not in self.rass["chats"]
        ):
            return
        if m.chat_id in self.rass["messages"]:
            message_id = self.rass["messages"][m.chat_id]
        else:
            message_id = self.rass["message"]
        message = await self.client.get_messages(self.rass["main"], ids=message_id)

        for chat_id in self.rass["chats"]:
            try:
                if chat_id in self.rass["messages"]:
                    message_id = random.choice(self.rass["messages"][chat_id])
                elif self.rass["messages_list"]:
                    message_id = random.choice(self.rass["messages_list"])
                else:
                    message_id = self.rass["message"]
                message = await self.client.get_messages(
                    self.rass["main"], ids=message_id
                )
                if message.media:
                    await self.client.send_file(
                        chat_id, message.media, caption=message.text
                    )
                else:
                    await self.client.send_message(chat_id, message.text)
            except:
                pass
            finally:
                await asyncio.sleep(13)
        self.rass["last_send_time"] = current_time
        self.db.set("Thr", "rass", self.rass)
