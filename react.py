import asyncio
import html
import re
import mmh3
from telethon.tl.types import Message
from .. import loader
import firebase_admin
from firebase_admin import credentials, db as firebase_db

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


FIREBASE_CREDENTIALS_PATH = (
    "/home/hikka/Hikka/loll-8a3bd-firebase-adminsdk-4pvtd-6b93a17b70.json"
)
FORWARD_TO_CHANNEL_ID = 2498567519


@loader.tds
class BroadMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Firebase Realtime Database –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—ç—à–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
    """

    strings = {"name": "Broad"}

    def __init__(self):
        super().__init__()
        self.lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
        self.allowed_chats = []  # –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
        self.firebase_app = None  # –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Firebase
        self.db_ref = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."""
        self.client = client

        if (
            not firebase_admin._apps
        ):  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            try:
                cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
                self.firebase_app = firebase_admin.initialize_app(
                    cred,
                    {"databaseURL": "https://loll-8a3bd-default-rtdb.firebaseio.com"},
                )
            except Exception as e:
                await client.send_message("me", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
                return
        try:
            self.db_ref = firebase_db.reference(
                "/"
            )  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—Ä–µ–Ω—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

            chats_ref = self.db_ref.child(
                "allowed_chats"
            )  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            chats_data = chats_ref.get()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase

            if chats_data:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
                if isinstance(chats_data, list):
                    self.allowed_chats = chats_data
                elif isinstance(chats_data, dict):
                    self.allowed_chats = list(chats_data.values())
                else:
                    self.allowed_chats = []
            await client.send_message(
                "me",
                f"–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {self.allowed_chats}",
            )
        except Exception as e:
            await client.send_message(
                "me", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase: {e}"
            )

    async def forward_to_channel(self, message: Message):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
        try:
            await message.forward_to(FORWARD_TO_CHANNEL_ID)
        except Exception as e:
            await self.client.send_message(
                "me", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}"
            )

    async def manage_chat_cmd(self, message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .manage_chat <add|remove> <chat_id>
        """
        try:
            args = message.text.split()

            if len(args) != 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                if self.allowed_chats:
                    await message.reply(
                        f"üìù –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n{', '.join(map(str, self.allowed_chats))}"
                    )
                else:
                    await message.reply("üìù –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
                return
            try:
                chat_id = int(args[2])  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            except ValueError:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
                )
                return
            if chat_id not in self.allowed_chats:  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                self.allowed_chats.append(chat_id)
                txt = f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫."
            else:  # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                self.allowed_chats.remove(chat_id)
                txt = f"‚ùå –ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞."
            chats_ref = self.db_ref.child(
                "allowed_chats"
            )  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
            chats_ref.set(self.allowed_chats)

            await message.reply(txt)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤: {e}")

    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.
        –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        if not isinstance(message, Message) or not message.text:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if message.chat_id not in self.allowed_chats:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        if not self.db_ref:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
            await self.client.send_message("me", "Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤, –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤

            normalized_text = html.unescape(
                re.sub(
                    r"\s+",  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –æ–¥–Ω–∏–º
                    " ",
                    re.sub(
                        r"[^\w\s,.!?;:‚Äî]",
                        "",  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                        re.sub(r"<[^>]+>", "", message.text),
                    ),  # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
                )
            )

            message_hash = str(mmh3.hash(normalized_text.lower()))

            async with self.lock:
                hashes_ref = self.db_ref.child("hashes/hash_list")
                locks_ref = self.db_ref.child("locks")  # Ensure 'locks' node exists
                lock_ref = locks_ref.child(message_hash)

                try:

                    def hash_transaction(current_data):
                        lock_value = lock_ref.get()  # Get the lock value
                        if (
                            lock_value
                        ):  # Check if lock exists and is True (or any value)
                            return None  # Explicitly return None to abort
                        lock_ref.set(True)

                        current_data = current_data or []
                        if isinstance(current_data, dict):
                            current_data = list(current_data.values())
                        if message_hash not in current_data:
                            current_data.append(message_hash)
                            return current_data
                        return None  # Explicitly return None if hash already exists

                    update_result = hashes_ref.transaction(hash_transaction)

                    if update_result:  # Check if update_result is not None
                        if update_result.committed:
                            await self.forward_to_channel(message)
                        else:  # Transaction aborted, but not due to an error
                            # Log or handle the aborted transaction (optional)

                            print(f"Transaction aborted for {message_hash}")
                    else:  # Transaction failed due to an error
                        await self.client.send_message(
                            "me",
                            f"Transaction failed: {message_hash} "
                            f"(Original message: {message.text[:100]}...)",
                        )
                finally:
                    lock_ref.delete()
        except Exception as e:
            await self.client.send_message("me", f"Error processing message: {e}")
