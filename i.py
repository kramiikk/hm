import logging
import shlex
import time
import asyncio
from telethon import types
from telethon.tl.types import (
    MessageService,
    MessageActionChatJoinedByLink,
    MessageActionChatAddUser,
)

from .. import loader, utils
from typing import Optional, Dict, List, Tuple
from collections import deque

logger = logging.getLogger(__name__)

DEFAULT_LIMIT = 500000
UPDATE_INTERVAL = 30
STATUS_CHECK_INTERVAL = (
    50  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 50 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
)
RESULTS_CHUNK_SIZE = 50
MAX_CONCURRENT_TASKS = 10


def parse_arguments(args_raw: str) -> Optional[Dict]:
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not args_raw:
        return None
    try:
        args = shlex.split(args_raw)
    except ValueError:
        args = args_raw.split()
    if not args:
        return None
    result = {
        "group": args[0],
        "first_name": "",
        "last_name": "",
        "limit": DEFAULT_LIMIT,
        "exact_match": False,
        "show_all": False,
    }

    i = 1
    while i < len(args):
        arg = args[i]

        if arg in ("-l", "--limit"):
            if i + 1 < len(args):
                try:
                    result["limit"] = max(int(args[i + 1]), 1)
                    i += 2
                    continue
                except ValueError:
                    pass
            i += 1
            continue
        if not result["first_name"]:
            if arg in ['""', "''", '" "', "' '"]:
                result["show_all"] = True
            else:
                result["first_name"] = arg
                if f'"{arg}"' in args_raw or f"'{arg}'" in args_raw:
                    result["exact_match"] = True
        elif not result["last_name"]:
            if arg in ['""', "''", '" "', "' '"]:
                result["show_all"] = True
            else:
                result["last_name"] = arg
                if f'"{arg}"' in args_raw or f"'{arg}'" in args_raw:
                    result["exact_match"] = True
        i += 1
    return result


@loader.tds
class JoinSearchMod(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –≥—Ä—É–ø–ø–µ"""

    strings = {
        "name": "JoinSearch",
        "no_query": "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>",
        "searching": "üîç <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤ –≥—Ä—É–ø–ø–µ {}\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n‚Ä¢ –ò–º—è: {}\n‚Ä¢ –§–∞–º–∏–ª–∏—è: {}\n‚Ä¢ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n‚Ä¢ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {}\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö: {}\n\n–¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ\n‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>",
        "progress": "üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {}\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {}\n‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ~{} —Å–æ–æ–±—â./—Å–µ–∫\n‚Ä¢ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {} —Å–µ–∫.</b>",
        "no_results": "‚ùå <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫.</b>",
        "results": "‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è {}-{}):\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ: {}</b>\n\n{}",
        "final_results": "‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {}!\n‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {}\n‚Ä¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {} —Å–µ–∫.</b>",
        "group_not_found": "‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>",
        "invalid_args": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>",
        "search_already_running": "‚ö†Ô∏è <b>–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._running = False
        self._user_cache = {}
        self._semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

    async def client_ready(self, client, db):
        self._client = client

    def _format_user_result(
        self, user_name: str, user_id: int, target_group: str, msg_id: int, date: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return (
            f"‚Ä¢ {user_name} | ID: {user_id} | "
            f"<a href='t.me/{target_group}/{msg_id}'>–°—Å—ã–ª–∫–∞</a> | "
            f"{date}"
        )

    async def _get_user_name(self, client, user_id: int) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not user_id:
            return "", ""
        if user_id in self._user_cache:
            return self._user_cache[user_id]
        try:
            user = await client.get_entity(user_id)
            if not user:
                return "", ""
            result = (user.first_name.lower(), (user.last_name or "").lower())
            self._user_cache[user_id] = result
            return result
        except Exception:
            return "", ""

    def _check_match(
        self,
        first_name: str,
        last_name: str,
        search_first_name: str,
        search_last_name: str,
        exact_match: bool = False,
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        if not search_first_name and not search_last_name:
            return False
        if exact_match:
            return (
                not search_first_name or first_name == search_first_name.lower()
            ) and (not search_last_name or last_name == search_last_name.lower())
        return (not search_first_name or search_first_name.lower() in first_name) and (
            not search_last_name or search_last_name.lower() in last_name
        )

    async def _process_message(
        self, msg, message, target_group, parsed_args
    ) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not msg or not message or not target_group or not parsed_args:
            return None
        if not isinstance(msg, MessageService) or not isinstance(
            msg.action, (MessageActionChatJoinedByLink, MessageActionChatAddUser)
        ):
            return None
        try:
            user_id = None
            if isinstance(msg.action, MessageActionChatAddUser) and msg.action.users:
                user_id = msg.action.users[0]
            elif isinstance(msg.action, MessageActionChatJoinedByLink) and msg.from_id:
                user_id = msg.from_id.user_id
            if not user_id:
                return None
            first_name, last_name = await self._get_user_name(message.client, user_id)
            user_name = f"{first_name}{' ' + last_name if last_name else ''}"
            date_str = msg.date.strftime("%d.%m.%Y %H:%M:%S")

            if parsed_args["show_all"] or self._check_match(
                first_name,
                last_name,
                parsed_args["first_name"],
                parsed_args["last_name"],
                parsed_args["exact_match"],
            ):
                return self._format_user_result(
                    user_name, user_id, target_group.username, msg.id, date_str
                )
            return None
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None

    async def _update_status(
        self,
        status_message,
        messages_checked: int,
        total_results: int,
        start_time: float,
    ) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            current_time = time.time()
            elapsed = current_time - start_time
            speed = messages_checked / elapsed if elapsed > 0 else 0

            await status_message.edit(
                self.strings["progress"].format(
                    messages_checked, total_results, round(speed, 1), round(elapsed, 1)
                )
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

    async def _process_messages_batch(
        self, messages, message, target_group, parsed_args
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        tasks = []
        async with self._semaphore:
            for msg in messages:
                task = asyncio.create_task(
                    self._process_message(msg, message, target_group, parsed_args)
                )
                tasks.append(task)
            results = await asyncio.gather(*tasks)
            return [r for r in results if r is not None]

    async def joinsearchcmd(self, message):
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã: <–≥—Ä—É–ø–ø–∞> [–∏–º—è] [—Ñ–∞–º–∏–ª–∏—è] [-l|--limit <—á–∏—Å–ª–æ>]
        –ü—Ä–∏–º–µ—Ä—ã:
        .joinsearch @group "–ò–≤–∞–Ω" - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        .joinsearch @group –ò–≤–∞–Ω - —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        .joinsearch @group "" - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        .joinsearch @group -l 1000 - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∏—Å–∫ 1000 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""

        if not message:
            return
        if self._running:
            self._running = False
            await utils.answer(message, self.strings["search_already_running"])
            return
        args = utils.get_args_raw(message)
        parsed_args = parse_arguments(args)
        if not parsed_args:
            await utils.answer(message, self.strings["invalid_args"])
            return
        try:
            target_group = await message.client.get_entity(parsed_args["group"])
            if not target_group:
                await utils.answer(message, self.strings["group_not_found"])
                return
        except Exception:
            await utils.answer(message, self.strings["group_not_found"])
            return
        self._running = True
        status_message = None

        try:
            total_results = 0
            messages_checked = 0
            last_progress_time = time.time()
            start_time = last_progress_time
            message_batch = []
            current_batch_results = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∏–∑ 50 —Å–æ–æ–±—â–µ–Ω–∏–π

            status_message = await utils.answer(
                message,
                self.strings["searching"].format(
                    parsed_args["group"],
                    parsed_args["first_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    parsed_args["last_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    parsed_args["limit"],
                    "–¥–∞" if parsed_args["exact_match"] else "–Ω–µ—Ç",
                    "–¥–∞" if parsed_args["show_all"] else "–Ω–µ—Ç",
                ),
            )

            batch_start = 1  # –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ

            async for msg in message.client.iter_messages(
                target_group,
                limit=parsed_args["limit"],
                filter=types.InputMessagesFilterEmpty(),
            ):
                if not self._running:
                    break
                messages_checked += 1
                message_batch.append(msg)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

                if len(message_batch) >= MAX_CONCURRENT_TASKS:
                    batch_results = await self._process_messages_batch(
                        message_batch, message, target_group, parsed_args
                    )
                    current_batch_results.extend(batch_results)
                    total_results += len(batch_results)
                    message_batch = []
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 50 –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

                if messages_checked % STATUS_CHECK_INTERVAL == 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ

                    if current_batch_results:
                        try:
                            batch_end = messages_checked
                            await message.respond(
                                self.strings["results"].format(
                                    batch_start,
                                    batch_end,
                                    len(current_batch_results),
                                    "\n".join(current_batch_results),
                                )
                            )
                        except Exception as e:
                            logger.exception(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–ª–æ–∫–∞: {str(e)}"
                            )
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏

                    current_batch_results = []
                    batch_start = messages_checked + 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å

                    current_time = time.time()
                    if current_time - last_progress_time >= UPDATE_INTERVAL:
                        last_progress_time = current_time
                        await self._update_status(
                            status_message, messages_checked, total_results, start_time
                        )
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π

            if message_batch:
                batch_results = await self._process_messages_batch(
                    message_batch, message, target_group, parsed_args
                )
                current_batch_results.extend(batch_results)
                total_results += len(batch_results)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

            if current_batch_results:
                try:
                    await message.respond(
                        self.strings["results"].format(
                            batch_start,
                            messages_checked,
                            len(current_batch_results),
                            "\n".join(current_batch_results),
                        )
                    )
                except Exception as e:
                    logger.exception(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
                    )
            total_time = round(time.time() - start_time, 1)

            if not self._running:
                await utils.answer(
                    status_message,
                    f"‚úÖ <b>–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {messages_checked}\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {total_results}\n‚Ä¢ –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.</b>",
                )
            elif total_results == 0:
                await utils.answer(
                    status_message,
                    self.strings["no_results"].format(messages_checked, total_time),
                )
            else:
                await utils.answer(
                    status_message,
                    self.strings["final_results"].format(
                        parsed_args["group"],
                        messages_checked,
                        total_results,
                        total_time,
                    ),
                )
        except Exception as e:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}"
            if status_message:
                await utils.answer(status_message, error_msg)
            else:
                await utils.answer(message, error_msg)
        finally:
            self._running = False
            self._user_cache.clear()
