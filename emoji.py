import asyncio
import random
import re
from datetime import timedelta

from telethon.tl.types import Message

from .. import loader


@loader.tds
class KramiikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""

    strings = {"name": "Kramiikk"}

    async def client_ready(self, client, db):
        """ready"""
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.me = await client.get_me()
        if "name" not in self.su:
            self.su.setdefault("job", "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ")
            self.su.setdefault("name", self.me.first_name)
            self.su.setdefault("users", [self.me.id, 1124824021, 1785723159])
            self.db.set("Su", "su", self.su)
        self.ded = {
            "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "@toadbot –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "@toadbot –û—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "@toadbot –ù–∞ –∞—Ä–µ–Ω—É",
            "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": self.su["job"],
            "–∑–æ–ª–æ—Ç–æ": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–∫–≤": "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
            "–Ω–∞–ø–∞–¥–∏": "–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
            "–∞—Ä–µ–Ω–∞": "–Ω–∞ –∞—Ä–µ–Ω—É",
            "—Ä–µ–∞–Ω–∏–º–∏—Ä—É–π": "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
            "–∫–∞—Ä—Ç—É": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            "—Å–Ω–∞—Ä—è–≥–∞": "–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
            "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": "–º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "—Ç—É—Å–∞": "–∂–∞–±—É –Ω–∞ —Ç—É—Å—É",
            "—Ç—É—Å–∏": "–Ω–∞—á–∞—Ç—å —Ç—É—Å—É",
            "—Ä–µ–π–¥": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "—Ä–∞–±–æ—Ç–∞": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç": "–≤—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –º–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç",
            "–ø—Ä–µ–¥–µ–ª": "–≤—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ",
            "–ª–µ–¥–µ–Ω–µ—Ü": "–æ—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü",
            "–∫—É–ª–æ–Ω": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã",
            "–ª–∏–¥–µ—Ä–∫—É": "–ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω",
            "–±—É–∫–∞—Ö": "–±—É–∫–∞—à–∫–∏",
            "–∞–ø—Ç–µ–∫": "–∞–ø—Ç–µ—á–∫–∏",
            "–ª–µ–¥–∏–∫": "–ª–µ–¥–µ–Ω—Ü—ã",
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
            "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
            "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
            "–ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ": "@toadbot –ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á",
            "–ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞": "@toadbot –ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞",
            "–í –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥!": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∞–¥",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á",
        }

    async def err(self, chat, cmn):
        """—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∂–∞–±–∞–±–æ—Ç–∞"""
        try:
            async with self.client.conversation(chat, exclusive=False) as conv:
                await conv.send_message(cmn)
                global RSP
                RSP = await conv.get_response()
                await conv.cancel_all()
        except:
            return

    async def npn(self, chat, msg):
        await self.snr(chat)
        await asyncio.sleep(3)
        cmn = self.ded[msg]
        await self.err(chat, cmn)
        if not RSP:
            return
        if "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ" in RSP.text or "–í–∞—à–∞ –∂–∞–±–∞ –Ω–∞ —Ç—É—Å–µ" in RSP.text:
            return
        await asyncio.sleep(random.randint(3, 13))
        if "–í–∞—à–∞ –∂–∞–±–∞ –≤ –ø—Ä–µ–¥—Å–º–µ—Ä—Ç–Ω–æ–º" in RSP.text or "–î–ª—è —É—á–∞—Å—Ç–∏—è" in RSP.text:
            await RSP.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
        elif "–í–∞—à–∞ –∂–∞–±–∞ –Ω–∞" in RSP.text:
            await RSP.respond("–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
        for i in range(3):
            await asyncio.sleep(random.randint(13, 33))
            await self.client.send_message(chat, cmn)

    async def snr(self, chat):
        cmn = "@toadbot –ú–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
        await self.err(chat, cmn)
        if not RSP and "üó°" not in RSP.text:
            return
        await asyncio.sleep(random.randint(3, 13))
        for p in (p for p in self.ded if p in RSP.text):
            await RSP.respond(self.ded[p])

    async def sacmd(self, message: Message):
        """–∞–≤—Ç–æ–∂–∞–±–∞ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
        if "auto" in self.su:
            self.su.pop("auto")
            msg = "<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        else:
            self.su.setdefault("auto", {})
            if "chats" in self.su:
                self.su.pop("chats")
            msg = "<b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>"
        self.db.set("Su", "su", self.su)
        await message.edit(msg)

    async def sjcmd(self, message: Message):
        """–≤—ã–±–æ—Ä —Ä–∞–±–æ—Ç—ã"""
        msg = message.text.split(" ", 1)[1]
        self.su["job"] = msg.casefold()
        txt = f"<b>–†–∞–±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:</b> {self.su['job']}"
        self.db.set("Su", "su", self.su)
        await message.edit(txt)

    async def sncmd(self, message: Message):
        """–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        msg = message.text.split(" ", 1)[1]
        self.su["name"] = msg.casefold()
        txt = f"üëª <code>{self.su['name']}</code> <b>—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>"
        self.db.set("Su", "su", self.su)
        await message.edit(txt)

    async def sucmd(self, message: Message):
        """–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        reply = await message.get_reply_message()
        msg = reply.from_id if reply else int(message.text.split(" ", 1)[1])
        if msg in self.su["users"]:
            self.su["users"].remove(msg)
            txt = f"üñïüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["users"].append(msg)
            txt = f"ü§ôüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Su", "su", self.su)
        await message.edit(txt)

    async def svcmd(self, message: Message):
        """–∞–≤—Ç–æ–∂–∞–±–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        msg = (
            message.chat_id
            if len(message.text) < 9
            else int(message.text.split(" ", 1)[1])
        )
        txt = f"üë∂üèø {msg} <b>—á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        if "chats" not in self.su:
            self.su.setdefault("chats", [msg])
        elif msg in self.su["chats"]:
            self.su["chats"].remove(msg)
            txt = f"üë∂üèª {msg} <b>—á–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["chats"].append(msg)
        if "auto" in self.su:
            self.su.pop("auto")
        self.db.set("Su", "su", self.su)
        await message.edit(txt)

    async def watcher(self, message: Message):
        """–∞–ª–∫–æ"""
        if not isinstance(message, Message) or message.from_id not in self.su["users"]:
            return
        chat = message.peer_id
        if message.text.startswith("üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë"):
            cmn = "–º–æ–∏ –∂–∞–±—ã"
            await self.err(chat, cmn)
            if not RSP:
                return
            await self.client.delete_dialog(chat, revoke=True)
            if "chats" not in self.su and "auto" not in self.su:
                return
            txt = "dayhour"
            for i in re.findall(r"(\d+) \| (-\d+)", RSP.text):
                chat = int(i[1])
                if "chats" in self.su and chat not in self.su["chats"]:
                    continue
                if "dayhour" in self.su:
                    msg = await self.client.get_messages(
                        "me", ids=int(self.su["dayhour"])
                    )
                    if msg:
                        reg = re.search(rf"{chat} (\d+) (\d+)", msg.text)
                        if reg:
                            day = reg.group(1)
                            hur = reg.group(2)
                            dayhour = 2
                            if int(i[0]) < 123:
                                dayhour = 4
                            ts = timedelta(
                                days=message.date.day, hours=message.date.hour
                            ) - timedelta(days=int(day), hours=int(hur))
                            if (
                                timedelta(days=0, hours=0)
                                <= ts
                                < timedelta(days=0, hours=dayhour)
                            ):
                                txt += f"\n{chat} {day} {hur}"
                                continue
                try:
                    cmn = "@toadbot –ú–æ—è –∂–∞–±–∞"
                    await self.err(chat, cmn)
                except Exception:
                    continue
                if not RSP:
                    continue
                s = "alive"
                if "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è" in RSP.text:
                    s = "dead"
                if "–•–æ—Ä–æ—à–µ–µ" in RSP.text:
                    await RSP.respond(f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã {random.randint(1, 4)}")
                    await asyncio.sleep(random.randint(3, 13))
                jab = re.search(r"–ë.+: (\d+)", RSP.text)
                if not jab:
                    continue
                await asyncio.sleep(random.randint(3, 13))
                cmn = "@toadbot –ñ–∞–±–∞ –∏–Ω—Ñ–æ"
                await self.err(chat, cmn)
                if not RSP and "üèÉ‚Äç‚ôÇÔ∏è" not in RSP.text:
                    continue
                for p in (p for p in self.ded if p in RSP.text):
                    if (
                        int(i[0]) < 123
                        or (int(i[0]) > 123 and int(jab.group(1)) < 3333)
                    ) and p in ("–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è"):
                        continue
                    if s == "dead" and p not in ("–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å", "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å"):
                        await RSP.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                    await asyncio.sleep(random.randint(3, 13))
                    await RSP.respond(self.ded[p])
                await asyncio.sleep(random.randint(3, 13))
                cmn = "@toadbot –ú–æ—è —Å–µ–º—å—è"
                await self.err(chat, cmn)
                if not RSP:
                    continue
                txt += f"\n{chat} {RSP.date.day} {RSP.date.hour}"
                s = 0
                if "–£ –≤–∞—Å –Ω–µ—Ç" in RSP.text:
                    continue
                if "–í–∞—à –∂–∞–±—ë–Ω—ã—à" in RSP.text and "–ú–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å" not in RSP.text:
                    s = 1
                    if int(i[0]) > 123:
                        await RSP.respond("@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞")
                if RSP.buttons:
                    if len(RSP.buttons[0]) == 2:
                        await RSP.respond("@toadbot –ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ")
                    n = len(RSP.buttons)
                    if n == 1 and s == 1:
                        continue
                    await RSP.respond(self.ded[RSP.buttons[0][0].text])
                    if n == 1:
                        continue
                    await RSP.respond(self.ded[RSP.buttons[1][0].text])
                    if n == 2:
                        continue
                    await RSP.respond(self.ded[RSP.buttons[2][0].text])
            txt += f"\nlcheck: {message.date}"
            if "dayhour" not in self.su:
                msg = await self.client.send_message("me", txt)
                self.su.setdefault("dayhour", msg.id)
            elif not msg:
                msg = await self.client.send_message("me", txt)
                self.su["dayhour"] = msg.id
            else:
                await msg.edit(txt)
            self.db.set("Su", "su", self.su)
        elif message.text.startswith(("üìâ", "üõ°")) and (
            "auto" in self.su or "chats" in self.su
        ):
            await self.client.send_message(
                1124824021,
                "üíëüë©‚Äç‚ù§Ô∏è‚Äçüë®üë®‚Äç‚ù§Ô∏è‚Äçüë®üíë",
                schedule=timedelta(minutes=random.randint(128, 184)),
            )
        elif (
            message.text.casefold().startswith(self.su["name"]) and " " in message.text
        ):
            await asyncio.sleep(random.randint(3, 13))
            reply = await message.get_reply_message()
            if " –≤ " in message.text:
                if "–∂–∞–±–ª" in message.text:
                    chat = 1290958283
                elif "–∞—Ç–º–æ" in message.text:
                    chat = 1563178957
                elif "–ø—Ä—É–¥" in message.text:
                    chat = 1403626354
                elif "–±–æ—Ç" in message.text:
                    chat = 1124824021
                else:
                    chat = message.peer_id
                if reply:
                    msg = reply
                else:
                    msg = message.text.split(" ", 3)[1]
                    if msg not in self.ded:
                        return
                    if msg in ("–Ω–∞–ø–∞–¥–∏", "–∞—Ä–µ–Ω–∞"):
                        await self.npn(chat, msg)
                    msg = self.ded[msg]
                await asyncio.sleep(random.randint(13, 33))
                await self.client.send_message(chat, msg)
            elif "—Ç—ã–∫–ø—ã—Ö" in message.text:
                if reply:
                    return await reply.click()
                if "—Ç—ã–∫–ø—ã—Ö " not in message.text:
                    return
                reg = re.search(r"/(\d+)/(\d+)", message.text)
                if not reg:
                    return
                mac = await self.client.get_messages(
                    int(reg.group(1)), ids=int(reg.group(2))
                )
                await mac.click()
            elif "–±—É–∫–∞—Ö" in message.text and self.su["name"] in ("–∫—É—à–∫–∏", "–∞–ª—å–±–µ—Ä—Ç"):
                await asyncio.sleep(random.randint(0, 360))
                cmn = "–º–æ–π –±–∞–ª–∞–Ω—Å"
                await self.err(chat, cmn)
                if not RSP:
                    return
                if "–£ —Ç–µ–±—è" in RSP.text:
                    await message.respond("–≤–∑—è—Ç—å –∂–∞–±—É")
                elif "–ë–∞–ª–∞–Ω—Å" not in RSP.text:
                    return
                jab = int(re.search(r"–∂–∞–±—ã: (\d+)", RSP.text).group(1))
                if jab < 50:
                    return
                await message.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {jab}")
            elif "del" in message.text:
                chat = 1124824021
                cmn = "–º–æ–∏ –∂–∞–±—ã"
                await self.err(chat, cmn)
                if not RSP:
                    return
                await self.client.delete_dialog(chat, revoke=True)
                for i in re.findall(r"(-\d+)", RSP.text):
                    chat = int(i)
                    async for msg in self.client.iter_messages(chat, from_user="me"):
                        await msg.delete()
            else:
                if reply and message.text.split(" ", 2)[1] in (
                    "–ª–µ–¥–∏–∫",
                    "–∞–ø—Ç–µ–∫",
                    "–±—É–∫–∞—Ö",
                ):
                    return await reply.reply(
                        f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.ded[msg]} {message.text.split(' ', 2)[2]}"
                    )
                msg = message.text.split(" ", 1)[1]
                if msg not in self.ded:
                    return
                if msg in ("–∫–∞—Ä—Ç—É", "–ª–∏–¥–µ—Ä–∫—É"):
                    return await message.reply(self.ded[msg])
                if msg in ("–Ω–∞–ø–∞–¥–∏", "–∞—Ä–µ–Ω–∞"):
                    await self.npn(chat, msg)
                await asyncio.sleep(random.randint(13, 33))
                await message.respond(self.ded[msg])
        elif str(self.me.id) in message.text or message.mentioned:
            if "—Ö–æ–¥: " in message.text and message.buttons:
                await message.click()
            elif "—Å–ª–æ–º–∞–ª–æ—Å—å" in message.text:
                await asyncio.sleep(random.randint(13, 33))
                txt = (
                    "–∫–ª—é–≤ —Ü–∞–ø–ª–∏",
                    "–±—É–∫–∞—à–∫–æ–º–µ—Ç",
                    "–Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                    "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                    "–Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                )
                for i in txt:
                    await message.respond(f"—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å {i}")
            elif "–ë–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞" in message.text:
                await asyncio.sleep(random.randint(3, 13))
                await message.respond("–æ—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü")
                await asyncio.sleep(random.randint(3, 13))
                cmn = "@toadbot –ú–æ—è –±–∞–Ω–¥–∞"
                await self.err(chat, cmn)
                if not RSP and "üìø" not in RSP.text:
                    return
                if "–ö—É–ª–æ–Ω: –ü—É—Å—Ç–æ" in RSP.text:
                    await message.respond("—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã")
            else:
                return
        else:
            return
