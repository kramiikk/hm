from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, Optional

from telethon import TelegramClient
from telethon.tl.types import Chat

from .. import loader, utils

class ProfessionalChatAnalyzer:
    def __init__(self, client: TelegramClient):
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def measure_network_latency(
        self, 
        attempts: int = 3, 
        timeout: float = 3.0
    ) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            latencies = [
                (asyncio.get_event_loop().time() - 
                 (start := asyncio.get_event_loop().time())) * 1000 
                for _ in range(attempts) 
                if await asyncio.wait_for(self._client.get_me(), timeout=timeout)
            ]
            
            return sum(latencies) / len(latencies) if latencies else -1.0
        except Exception as e:
            self._logger.error(f"Ping measurement error: {e}")
            return -1.0

    async def analyze_group_comprehensive(
        self, 
        chat: Chat, 
        message_limit: int = 5000
    ) -> Dict[str, Union[str, int]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            participants, messages = await asyncio.gather(
                self._client.get_participants(chat),
                self._client.get_messages(chat, limit=message_limit)
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            bots = {p.id for p in participants if getattr(p, 'bot', False)}
            meaningful_messages = [
                msg for msg in messages 
                if hasattr(msg, 'text') and msg.text.strip() and 
                   (not hasattr(msg, 'service') or not msg.service)
            ]
            active_users = {
                msg.sender_id for msg in meaningful_messages 
                if msg.sender_id and msg.sender_id not in bots
            }

            return {
                'title': getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'chat_id': chat.id,
                'total_messages': len(meaningful_messages),
                'active_members': len(active_users),
                'bots': len(bots)
            }
        except Exception as e:
            self._logger.error(f"Comprehensive analysis error: {e}")
            return {}

@loader.tds
class AnalDestrModule(loader.Module):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞"""

    strings = {
        "name": "AnalDestroy",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
        "ping_template": "üåê <b>Ping:</b> {ping_time:.2f} –º—Å",
        "stats_template": (
            "\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n"
            "üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "üÜî ID: <code>{chat_id}</code>\n"
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {active_members}\n"
            "ü§ñ –ë–æ—Ç—ã: {bots}\n"
        )
    }

    def __init__(self):
        self.analyzer = None
        self._last_context = {
            'chat': None,
            'stats': None,
            'message': None
        }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.analyzer = ProfessionalChatAnalyzer(client)

    def _format_stats_message(self, ping_time: float, stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        full_text = self.strings["ping_template"].format(ping_time=ping_time)
        if stats:
            full_text += self.strings["stats_template"].format(
                title=utils.escape_html(stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
                chat_id=stats.get('chat_id', 'N/A'),
                total_messages=stats.get('total_messages', 'üîÑ'),
                active_members=stats.get('active_members', 'üîÑ'),
                bots=stats.get('bots', 'üîÑ')
            )
        return full_text

    async def _update_ping(self, call):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ò–∑–º–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∏–Ω–≥
            ping_time = await self.analyzer.measure_network_latency()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–∏–Ω–≥–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            full_text = self._format_stats_message(ping_time, self._last_context['stats'])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.edit(
                full_text, 
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

    @loader.command()
    async def pstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            chat = await message.get_chat()
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥
            ping_time = await self.analyzer.measure_network_latency()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –ø–∏–Ω–≥–æ–º
            response_message = await self.inline.form(
                self.strings["ping_template"].format(ping_time=ping_time),
                message=message,
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def update_stats():
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = await self.analyzer.analyze_group_comprehensive(chat)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    self._last_context['chat'] = chat
                    self._last_context['stats'] = stats

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    full_text = self._format_stats_message(ping_time, stats)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    await response_message.edit(
                        full_text,
                        reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
                    )
                except Exception as e:
                    logging.error(f"Stats update error: {e}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(update_stats())

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
