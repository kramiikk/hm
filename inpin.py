from telethon import TelegramClient
from telethon.tl.types import Chat
from telethon.errors import (
    ChatAdminRequiredError, 
    FloodWaitError, 
    RPCError
)

from hikka import loader, utils
from hikka.version import __version__

import logging
import asyncio
import traceback
import structlog
from typing import Dict, Any, Optional

logger = structlog.get_logger(__name__)

@loader.tds
class GroupStatsMod(loader.Module):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ Telegram"""
    
    strings = {
        "name": "GroupStats",
        "no_chat": "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "stats_header": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã: {title}",
        "ping_info": "üèì –ó–∞–¥–µ—Ä–∂–∫–∞: {ping:.2f} –º—Å",
        "members_info": "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {total} (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active})",
        "admin_info": "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins}",
        "bots_info": "ü§ñ –ë–æ—Ç—ã: {bots}",
        "messages_info": "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: –í—Å–µ–≥–æ {total} (–¢–µ–∫—Å—Ç: {text}, –ú–µ–¥–∏–∞: {media}, –°–ª—É–∂–µ–±–Ω—ã–µ: {service})"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "max_messages_analyze", 
            5000, 
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )

    @loader.command(ru_doc="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã")
    async def groupstatscmd(self, message):
        """Retrieve comprehensive group statistics"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∞—Ç
            if not message.is_group and not message.is_channel:
                await message.edit("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö")
                return

            await message.edit(self.strings["stats_header"].format(title="–ó–∞–≥—Ä—É–∑–∫–∞..."))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            chat = await message.get_chat()
            
            # –ò–∑–º–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            ping = await self._measure_network_latency()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await self._get_participants(chat)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_stats = await self._analyze_messages(chat)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            stats_text = "\n".join([
                self.strings["stats_header"].format(title=getattr(chat, 'title', 'Unknown')),
                self.strings["ping_info"].format(ping=ping),
                self.strings["members_info"].format(
                    total=participants['total'], 
                    active=participants['active']
                ),
                self.strings["admin_info"].format(admins=participants['admins']),
                self.strings["bots_info"].format(bots=participants['bots']),
                self.strings["messages_info"].format(
                    total=messages_stats['total'],
                    text=messages_stats['text_messages'],
                    media=messages_stats['media_messages'],
                    service=messages_stats['service_messages']
                )
            ])
            
            await message.edit(stats_text)
            
        except Exception as e:
            logger.error(f"Group stats error: {e}")
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {traceback.format_exc()}")

    async def _measure_network_latency(self, attempts: int = 3) -> float:
        """–¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        latencies = []
        for _ in range(attempts):
            try:
                start = asyncio.get_event_loop().time()
                async with asyncio.timeout(5.0):
                    await self.client.get_me()
                latency = (asyncio.get_event_loop().time() - start) * 1000
                latencies.append(latency)
            except Exception:
                pass
        
        return sum(latencies) / len(latencies) if latencies else 0.0

    async def _get_participants(self, chat: Chat) -> Dict[str, int]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            try:
                participants = await self.client.get_participants(chat)
            except FloodWaitError as e:
                logger.warning(f"Flood wait: {e}")
                return {'total': 0, 'active': 0, 'admins': 0, 'bots': 0}
            
            stats = {
                'total': len(participants),
                'active': sum(1 for p in participants if not hasattr(p, 'deleted') or not p.deleted),
                'admins': await self._count_admins(chat),
                'bots': sum(1 for p in participants if hasattr(p, 'bot') and p.bot)
            }
            
            return stats

        except Exception as e:
            logger.error(f"Participants analysis error: {e}")
            return {'total': 0, 'active': 0, 'admins': 0, 'bots': 0}

    async def _count_admins(self, chat: Chat) -> int:
        """–ù–∞–¥—ë–∂–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.client.get_participants(chat, filter='admin')
            return len(admins)

        except (ChatAdminRequiredError, RPCError):
            return 0

    async def _analyze_messages(self, chat: Chat) -> Dict[str, int]:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            try:
                messages = await self.client.get_messages(
                    chat, 
                    limit=self.config['max_messages_analyze']
                )
            except FloodWaitError as e:
                logger.warning(f"Flood wait: {e}")
                return {'total': 0, 'text_messages': 0, 'media_messages': 0, 'service_messages': 0}
            
            return {
                'total': len(messages),
                'text_messages': sum(1 for msg in messages if hasattr(msg, 'text') and msg.text),
                'media_messages': sum(1 for msg in messages if hasattr(msg, 'media') and msg.media),
                'service_messages': sum(1 for msg in messages if hasattr(msg, 'service') and msg.service)
            }

        except Exception as e:
            logger.warning(f"Message analysis error: {e}")
            return {'total': 0, 'text_messages': 0, 'media_messages': 0, 'service_messages': 0}
