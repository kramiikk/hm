from __future__ import annotations

import asyncio
import logging
import re
from typing import Dict, List, Optional, Union

import socket
import time
import threading

import webview
import json

from telethon import TelegramClient
from telethon.tl.types import Chat, Message

from .. import loader, utils

class NetworkAnalyzer:
    @staticmethod
    async def measure_latency(client: TelegramClient, attempts: int = 3) -> Dict[str, float]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        results = {"telethon": -1.0, "rtt": -1.0, "comprehensive": -1.0}
        
        try:
            # Telethon latency
            telethon_times = []
            for _ in range(attempts):
                start = time.time()
                try:
                    await asyncio.wait_for(client.get_me(), timeout=2)
                    telethon_times.append((time.time() - start) * 1000)
                except Exception:
                    pass
            
            if telethon_times:
                results["telethon"] = sum(telethon_times) / len(telethon_times)
            
            # RTT latency
            try:
                start = time.time()
                with socket.create_connection(('8.8.8.8', 53), timeout=2) as sock:
                    results["rtt"] = (time.time() - start) * 1000
            except Exception:
                pass
            
            # Comprehensive latency
            try:
                start = time.time()
                await asyncio.wait_for(client.get_dialogs(limit=1), timeout=2)
                results["comprehensive"] = (time.time() - start) * 1000
            except Exception:
                pass
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞: {e}")
        
        return results

class ChatAnalyzer:
    @staticmethod
    async def analyze_chat(
        client: TelegramClient, 
        chat: Union[Chat, int], 
        message_limit: int = 5000, 
        pattern: Optional[str] = None
    ) -> Dict[str, Union[str, int, List[Dict]]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            participants, messages = await asyncio.gather(
                client.get_participants(chat, limit=message_limit),
                client.get_messages(chat, limit=message_limit)
            )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            def is_meaningful_message(msg: Message) -> bool:
                return (
                    hasattr(msg, 'text') and 
                    msg.text and 
                    msg.text.strip() and 
                    not getattr(msg, 'service', False)
                )
            
            meaningful_messages = list(filter(is_meaningful_message, messages))
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
            if pattern:
                meaningful_messages = [
                    msg for msg in meaningful_messages 
                    if re.search(pattern, msg.text or '', re.IGNORECASE)
                ]
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_message_count = {}
            for msg in meaningful_messages:
                if msg.sender_id:
                    user_message_count[msg.sender_id] = user_message_count.get(msg.sender_id, 0) + 1
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async def get_user_info(user_id: int) -> Optional[Dict]:
                try:
                    user = await client.get_entity(user_id)
                    return {
                        'name': f"[{user.username or user.first_name or 'Unknown'}](tg://user?id={user_id})",
                        'id': user_id,
                        'messages': user_message_count.get(user_id, 0)
                    }
                except Exception:
                    return None
            
            top_users = await asyncio.gather(*[
                get_user_info(user_id) 
                for user_id in sorted(user_message_count, key=user_message_count.get, reverse=True)[:3]
            ])
            top_users = [user for user in top_users if user is not None]
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            bot_ids = {p.id for p in participants if getattr(p, 'bot', False)}
            active_user_ids = {
                msg.sender_id for msg in meaningful_messages 
                if msg.sender_id and msg.sender_id not in bot_ids
            }
            
            return {
                'title': getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'chat_id': chat.id if hasattr(chat, 'id') else chat,
                'total_messages': len(meaningful_messages),
                'active_members': len(active_user_ids),
                'bots': len(bot_ids),
                'top_users': top_users,
                'pattern_count': len(meaningful_messages) if pattern else 0,
            }
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            return {}

class HikkaWebApp:
    def __init__(self, module):
        self.module = module
    
    async def measure_latency(self):
        return await self.module.measure_latency()
    
    async def analyze_chat(self, chat_id):
        return await self.module.analyze_chat(chat_id)

def start_webview(module):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º"""
    web_app = HikkaWebApp(module)
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Hikka Chat Stats</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
        <style>
            body {{ font-family: Arial, sans-serif; }}
        </style>
    </head>
    <body>
        <div id="root"></div>
        
        <script type="text/babel">
        {module.react_component}
        
        const App = () => {{
            return <ChatStatistics 
                client={{{{ /* mock client data */ }}}} 
                chatId={2396215373} 
            />;
        }};
        
        ReactDOM.render(<App />, document.getElementById('root'));
        </script>
    </body>
    </html>
    """
    
    webview.create_window('Hikka Chat Stats', html=html)
    webview.start()

@loader.tds
class AnalyzerModule(loader.Module):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º"""
    
    strings = {
        "name": "ChatAnalyzer",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
    }

    # React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    react_component = """
import React, { useState, useEffect } from 'react';
import { RefreshCcw } from 'lucide-react';

const ChatStatistics = ({ client, chatId }) => {
  const [stats, setStats] = useState({
    ping: null,
    telethonPing: null,
    rttPing: null,
    chatName: null,
    chatId: null,
    totalMessages: null,
    activeMembers: null,
    bots: null,
    topUsers: []
  });

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchChatStats = async () => {
    try {
      setLoading(true);
      
      const pingResults = await window.pywebview.api.measure_latency();
      const chatStats = await window.pywebview.api.analyze_chat(chatId);

      setStats({
        ping: pingResults.comprehensive,
        telethonPing: pingResults.telethon,
        rttPing: pingResults.rtt,
        chatName: chatStats.title,
        chatId: chatStats.chat_id,
        totalMessages: chatStats.total_messages,
        activeMembers: chatStats.active_members,
        bots: chatStats.bots,
        topUsers: chatStats.top_users || []
      });

      setError(null);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (chatId) {
      fetchChatStats();
    }
  }, [chatId]);

  const handleRefresh = () => {
    fetchChatStats();
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="p-4 bg-gray-100 rounded-lg shadow-md">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</h2>
        <button 
          onClick={handleRefresh}
          className="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition"
        >
          <RefreshCcw size={20} />
        </button>
      </div>

      <div className="mb-4">
        <h3 className="font-semibold">üåê Ping</h3>
        <p>–û–±—â–∏–π: {stats.ping?.toFixed(2) || 'N/A'} –º—Å</p>
        <p>‚Ä¢ Telethon: {stats.telethonPing?.toFixed(2) || 'N/A'} –º—Å</p>
        <p>‚Ä¢ RTT: {stats.rttPing?.toFixed(2) || 'N/A'} –º—Å</p>
      </div>

      <div className="mb-4">
        <h3 className="font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</h3>
        <p>üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {stats.chatName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
        <p>üÜî ID: {stats.chatId || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</p>
        <p>üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.totalMessages || 0}</p>
        <p>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {stats.activeMembers || 0}</p>
        <p>ü§ñ –ë–æ—Ç—ã: {stats.bots || 0}</p>
      </div>

      <div>
        <h3 className="font-—Å–µ–º–∏–±–æ–ª—å—à–æ–π">–¢–æ–ø-3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        {stats.topUsers.length > 0 ? (
          stats.topUsers.map((user) => (
            <p key={user.id}>
              ‚Ä¢ <a 
                href={`tg://user?id=${user.id}`} 
                className="text-blue-600 hover:underline"
              >
                {user.name}
              </a>: {user.messages} —Å–æ–æ–±—â–µ–Ω–∏–π
            </p>
          ))
        ) : (
          <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</p>
        )}
      </div>
    </div>
  );
};

export default ChatStatistics;
"""

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self._client = client
        self._network_analyzer = NetworkAnalyzer()
        self._chat_analyzer = ChatAnalyzer()

    @loader.command()
    async def chatstat(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            chat = await message.get_chat()
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
            ping_results = await self._network_analyzer.measure_latency(self._client)
            
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞
            stats = await self._chat_analyzer.analyze_chat(self._client, chat)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            top_users_text = "\n".join([
                f"‚Ä¢ {user['name']}: {user['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π" 
                for user in stats.get('top_users', [])
            ])
            
            response = (
                f"üåê Ping: {ping_results['comprehensive']:.2f} –º—Å\n"
                f"‚Ä¢ Telethon: {ping_results['telethon']:.2f} –º—Å\n"
                f"‚Ä¢ RTT: {ping_results['rtt']:.2f} –º—Å\n\n"
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ '{stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}':\n"
                f"üÜî ID: {stats.get('chat_id', '–ù/–î')}\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {stats.get('active_members', 0)}\n"
                f"ü§ñ –ë–æ—Ç—ã: {stats.get('bots', 0)}\n\n"
                "–¢–æ–ø-3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                f"{top_users_text}"
            )
            
            await message.reply(response)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    @loader.command()
    async def openchatstats(self, message):
        """–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π
        threading.Thread(target=start_webview, args=(self,)).start()
        await message.reply("üåê –û—Ç–∫—Ä—ã–≤–∞—é –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    async def measure_latency(self):
        """API-–º–µ—Ç–æ–¥ –¥–ª—è React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return await self._network_analyzer.measure_latency(self._client)

    async def analyze_chat(self, chat_id):
        """API-–º–µ—Ç–æ–¥ –¥–ª—è React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return await self._chat_analyzer.analyze_chat(self._client, chat_id)
