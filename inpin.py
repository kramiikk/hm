from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, Optional

from telethon import TelegramClient
from telethon.tl.types import Chat

from .. import loader, utils

class ProfessionalChatAnalyzer:
    def __init__(self, client: TelegramClient):
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def measure_network_latency(
        self, 
        attempts: int = 3, 
        timeout: float = 3.0
    ) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            start_times = []
            for _ in range(attempts):
                start = asyncio.get_event_loop().time()
                await asyncio.wait_for(self._client.get_me(), timeout=timeout)
                latency = (asyncio.get_event_loop().time() - start) * 1000
                start_times.append(latency)
            
            return sum(start_times) / len(start_times) if start_times else -1.0
        except Exception as e:
            self._logger.error(f"Ping measurement error: {e}")
            return -1.0

    async def analyze_group_comprehensive(
        self, 
        chat: Chat, 
        message_limit: int = 5000
    ) -> Dict[str, Union[str, int]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            participants, messages = await asyncio.gather(
                self._client.get_participants(chat),
                self._client.get_messages(chat, limit=message_limit)
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤
            bots = {p.id for p in participants if getattr(p, 'bot', False)}
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è meaningful —Å–æ–æ–±—â–µ–Ω–∏–π
            meaningful_messages = [
                msg for msg in messages 
                if (hasattr(msg, 'text') and msg.text and len(msg.text.strip()) > 0) and
                   (not hasattr(msg, 'service') or not msg.service)
            ]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = {
                msg.sender_id for msg in meaningful_messages 
                if msg.sender_id is not None and msg.sender_id not in bots
            }

            return {
                'title': getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'chat_id': chat.id,
                'active_members': len(active_users),
                'bots': len(bots),
                'total_messages': len(meaningful_messages)
            }
        except Exception as e:
            self._logger.error(f"Comprehensive analysis error: {e}")
            return {}

@loader.tds
class AnalDestrModule(loader.Module):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞"""

    strings = {
        "name": "AnalDester",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
        "ping_template": "üåê <b>–°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:</b> {ping_time:.2f} –º—Å",
        "stats_template": (
            "\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n"
            "üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "üÜî ID: <code>{chat_id}</code>\n"
            "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {active_members}\n"
            "ü§ñ –ë–æ—Ç—ã: {bots}\n"
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"
        )
    }

    def __init__(self):
        self.analyzer = None
        self.last_message = None
        self.last_ping_message = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.analyzer = ProfessionalChatAnalyzer(client)

    async def _update_ping(self, call):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–∏–Ω–≥–∞"""
        try:
            ping_time = await self.analyzer.measure_network_latency()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∏–Ω–≥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await call.edit(
                self.strings["ping_template"].format(ping_time=ping_time), 
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

    @loader.command()
    async def pstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            chat = await message.get_chat()
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥
            ping_time = await self.analyzer.measure_network_latency()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –ø–∏–Ω–≥–æ–º
            response_message = await self.inline.form(
                self.strings["ping_template"].format(ping_time=ping_time),
                message=message,
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def update_stats():
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = await self.analyzer.analyze_group_comprehensive(chat)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    stats_text = (
                        self.strings["ping_template"].format(ping_time=ping_time) +
                        self.strings["stats_template"].format(
                            title=utils.escape_html(stats.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
                            chat_id=stats.get('chat_id', 'N/A'),
                            active_members=stats.get('active_members', 'üîÑ'),
                            bots=stats.get('bots', 'üîÑ'),
                            total_messages=stats.get('total_messages', 'üîÑ')
                        )
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    await response_message.edit(
                        stats_text,
                        reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
                    )
                except Exception as e:
                    self._logger.error(f"Stats update error: {e}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(update_stats())

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
