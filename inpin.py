import asyncio
import time
import traceback
from telethon import types
from telethon.tl.functions.channels import GetFullChannelRequest

from .. import loader, utils
from ..inline.types import InlineCall, InlineQuery

@loader.tds
class PingerMod(loader.Module):
    """–¢–æ—á–Ω—ã–π –∏–Ω–ª–∞–π–Ω –ø–∏–Ω–≥–µ—Ä"""

    strings = {
        "name": "InlinePing",
        "ping_text": (
            "üèì <b>Ping:</b>\n"
            "‚îú <code>{dc_ping:.2f} –º—Å</code> ‚Ä¢ DC\n"
            "‚îú <code>{client_ping:.2f} –º—Å</code> ‚Ä¢ Client\n"
            "‚îî <code>{overall_ping:.2f} –º—Å</code> ‚Ä¢ Overall\n\n"
        ),
        "stats_text": (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n"
            "‚îú <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{title}</code>\n"
            "‚îú üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> <code>{members}</code>\n"
            "‚îú üõ°Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b> <code>{admins}</code>\n"
            "‚îî üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> <code>{messages}</code>\n"
        ),
        "error_text": "‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> <code>{error}</code>\n"
    }

    async def client_ready(self, client, db):
        self._client = client

    async def _measure_ping(self):
        """–¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞"""
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –¥–æ –î–¶
        dc_start = time.perf_counter()
        await self._client.get_me()
        dc_ping = (time.perf_counter() - dc_start) * 1000

        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞
        client_start = time.perf_counter()
        await asyncio.sleep(0.1)
        client_ping = (time.perf_counter() - client_start) * 1000

        # –û–±—â–∏–π –ø–∏–Ω–≥
        overall_ping = (dc_ping + client_ping) / 2

        return {
            "dc_ping": dc_ping,
            "client_ping": client_ping,
            "overall_ping": overall_ping
        }

    async def _get_chat_stats(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id
            chat = await message.get_chat()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            full_chat = await self._client(GetFullChannelRequest(chat.id))

            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await self._client.get_participants(chat.id)

            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_members = len(participants)
            admins = sum(1 for p in participants if p.admin_rights)
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages = getattr(full_chat.full_chat, 'read_inbox_max_id', 0)

            return {
                "title": getattr(chat, 'title', 'Unknown'),
                "members": total_members,
                "admins": admins,
                "messages": total_messages
            }
        except Exception as e:
            return {"error": str(e)}

    @loader.command()
    async def iping(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        ping_data = await self._measure_ping()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        chat_stats = await self._get_chat_stats(message)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏–Ω–≥–∞
        ping_text = self.strings["ping_text"].format(**ping_data)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if "error" in chat_stats:
            stats_text = self.strings["error_text"].format(error=chat_stats["error"])
        else:
            stats_text = self.strings["stats_text"].format(**chat_stats)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã
        full_text = f"{ping_text}{stats_text}"

        await self.inline.form(
            full_text,
            message=message,
            reply_markup=[
                [{"text": "üîÑ –ü–∏–Ω–≥", "callback": self._refresh_ping}]
            ]
        )

    async def _refresh_ping(self, call: InlineCall):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–∏–Ω–≥–∞"""
        ping_data = await self._measure_ping()
        ping_text = self.strings["ping_text"].format(**ping_data)

        await call.edit(
            ping_text,
            reply_markup=[
                [{"text": "üîÑ –ü–∏–Ω–≥", "callback": self._refresh_ping}]
            ]
        )

    async def ping_inline_handler(self, query: InlineQuery):
        """–ò–Ω–ª–∞–π–Ω —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞"""
        ping_data = await self._measure_ping()
        return {
            "title": f"Ping: {ping_data['overall_ping']:.2f} –º—Å",
            "description": "–ü–∏–Ω–≥",
            "message": self.strings["ping_text"].format(**ping_data),
            "thumb": "https://te.legra.ph/file/5d8c7f1960a3e126d916a.jpg"
        }
