from __future__ import annotations

import asyncio
import logging
from typing import Union, Dict, List

from telethon import TelegramClient
from telethon.tl.types import Chat

from .. import loader, utils

class ProfessionalChatAnalyzer:
    def __init__(self, client: TelegramClient):
        self._client = client
        self._logger = logging.getLogger(self.__class__.__name__)

    async def measure_network_latency(
        self, 
        attempts: int = 3, 
        timeout: float = 3.0
    ) -> Dict[str, float]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º RTT
        """
        results = {
            'telethon': -1.0,
            'rtt': -1.0,
            'comprehensive': -1.0
        }
    
        try:
            # –ú–µ—Ç–æ–¥ 1: Telethon get_me()
            telethon_latencies = []
            for _ in range(attempts):
                start = asyncio.get_event_loop().time()
                try:
                    await asyncio.wait_for(self._client.get_me(), timeout=timeout/3)
                    latency = (asyncio.get_event_loop().time() - start) * 1000
                    telethon_latencies.append(latency)
                except Exception:
                    pass
            
            if telethon_latencies:
                results['telethon'] = sum(telethon_latencies) / len(telethon_latencies)
    
            # –ú–µ—Ç–æ–¥ 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π RTT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–º–µ—Ä–æ–≤
            rtt_latencies = []
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ socket
                import socket
                import time
    
                def measure_rtt(host='8.8.8.8', port=53):
                    try:
                        start = time.time()
                        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                            s.settimeout(timeout/3)
                            s.connect((host, port))
                        return (time.time() - start) * 1000
                    except Exception:
                        return -1.0
    
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                for _ in range(attempts):
                    rtt = measure_rtt()
                    if rtt > 0:
                        rtt_latencies.append(rtt)
                
                if rtt_latencies:
                    results['rtt'] = sum(rtt_latencies) / len(rtt_latencies)
            except Exception:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Telegram DC
                try:
                    dc_options = self._client.session.dc_options
                    if dc_options:
                        dc = dc_options[0]
                        start = asyncio.get_event_loop().time()
                        await asyncio.wait_for(
                            self._client._connection.connect(
                                dc.ip_address, 
                                dc.port, 
                                dc.id
                            ), 
                            timeout=timeout/3
                        )
                        results['rtt'] = (asyncio.get_event_loop().time() - start) * 1000
                except Exception:
                    pass
    
            # –ú–µ—Ç–æ–¥ 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            comprehensive_latencies = []
            
            # –ó–∞–º–µ—Ä —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            try:
                start = asyncio.get_event_loop().time()
                await asyncio.wait_for(
                    self._client.get_dialogs(limit=1), 
                    timeout=timeout/3
                )
                comprehensive_latencies.append(
                    (asyncio.get_event_loop().time() - start) * 1000
                )
            except Exception:
                pass
            
            # –ó–∞–º–µ—Ä —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ
            try:
                start = asyncio.get_event_loop().time()
                me = await self._client.get_me()
                await asyncio.wait_for(
                    self._client.send_message(me.id, "ping"),
                    timeout=timeout/3
                )
                comprehensive_latencies.append(
                    (asyncio.get_event_loop().time() - start) * 1000
                )
            except Exception:
                pass
            
            if comprehensive_latencies:
                results['comprehensive'] = sum(comprehensive_latencies) / len(comprehensive_latencies)
    
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞: {e}")
    
        return results

    async def analyze_group_comprehensive(
        self, 
        chat: Chat, 
        message_limit: int = 5000
    ) -> Dict[str, Union[str, int]]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            participants, messages = await asyncio.gather(
                self._client.get_participants(chat),
                self._client.get_messages(chat, limit=message_limit)
            )

            bots = {p.id for p in participants if getattr(p, 'bot', False)}
            meaningful_messages = [
                msg for msg in messages 
                if hasattr(msg, 'text') and msg.text.strip() and 
                   (not hasattr(msg, 'service') or not msg.service)
            ]
            active_users = {
                msg.sender_id for msg in meaningful_messages 
                if msg.sender_id and msg.sender_id not in bots
            }

            return {
                'title': getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'chat_id': chat.id,
                'total_messages': len(meaningful_messages),
                'active_members': len(active_users),
                'bots': len(bots)
            }
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            return {}

@loader.tds
class AnalDestrModule(loader.Module):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —á–∞—Ç–∞"""

    strings = {
        "name": "AnalDestroy",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
        "ping_template": (
            "üåê <b>Ping:</b>\n"
            "‚Ä¢ Telethon: {telethon:.2f} –º—Å\n"
            "‚Ä¢ RTT: {rtt:.2f} –º—Å\n"
            "‚Ä¢ Comprehensive: {comprehensive:.2f} –º—Å"
        ),
        "stats_template": (
            "\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</b>\n\n"
            "üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "üÜî ID: <code>{chat_id}</code>\n"
            "üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {active_members}\n"
            "ü§ñ –ë–æ—Ç—ã: {bots}\n"
        )
    }

    def __init__(self):
        self.analyzer = None
        self._last_context = {
            'chat': None,
            'stats': None,
            'ping': None
        }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        self.analyzer = ProfessionalChatAnalyzer(client)

    async def _update_ping(self, call):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            ping_results = await self.analyzer.measure_network_latency()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            ping_text = self.strings["ping_template"].format(**ping_results)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
            if self._last_context['stats']:
                ping_text += self.strings["stats_template"].format(
                    **self._last_context['stats']
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.edit(
                ping_text, 
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )
        except Exception as e:
            await call.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

    @loader.command()
    async def pstat(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            chat = await message.get_chat()
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥
            ping_results = await self.analyzer.measure_network_latency()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º
            response_message = await self.inline.form(
                self.strings["ping_template"].format(**ping_results),
                message=message,
                reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
            )

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            async def update_stats():
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = await self.analyzer.analyze_group_comprehensive(chat)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    self._last_context['chat'] = chat
                    self._last_context['stats'] = stats
                    self._last_context['ping'] = ping_results

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    full_text = (
                        self.strings["ping_template"].format(**ping_results) +
                        self.strings["stats_template"].format(**stats)
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await response_message.edit(
                        full_text,
                        reply_markup=[[{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥", "callback": self._update_ping}]]
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(update_stats())

        except Exception as e:
            await self.inline.form(
                self.strings["error"].format(str(e)), 
                message=message
            )
