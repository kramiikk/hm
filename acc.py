import asyncio
import logging
import time
from datetime import datetime
from typing import Callable, Tuple

import numpy as np
from dateutil.relativedelta import relativedelta

from .. import loader, utils

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
data = {
    "5396587273": 1648014800,
    "5336336790": 1646368100,
    "4317845111": 1620028800,
    "3318845111": 1618028800,
    "2018845111": 1608028800,
    "1919230638": 1598028800,
    "755000000": 1548028800,
    "782000000": 1546300800,
    "727572658": 1543708800,
    "616816630": 1529625600,
    "391882013": 1509926400,
    "400169472": 1499904000,
    "369669043": 1492214400,
    "234480941": 1464825600,
    "200000000": 1451606400,
    "150000000": 1434326400,
    "10000000": 1413331200,
    "7679610": 1389744000,
    "2768409": 1383264000,
    "1000000": 1380326400,
}


# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID Telegram
class Function:
    def __init__(self, order: int = 3):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
        self.order = 3

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è ID Telegram (x) –∏ –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (y)
        self.x, self.y = self._unpack_data()
        # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–∞–Ω–Ω—ã–µ
        self._func = self._fit_data()

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ –º–∞—Å—Å–∏–≤—ã numpy
    def _unpack_data(self) -> Tuple[list, list]:
        x_data = np.array(list(map(int, data.keys())))
        y_data = np.array(list(data.values()))

        return (x_data, y_data)

    # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —Å –ø–æ–º–æ—â—å—é numpy.polyfit
    def _fit_data(self) -> Callable[[int], int]:
        fitted = np.polyfit(self.x, self.y, self.order)
        return np.poly1d(fitted)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    def add_datapoint(self, pair: tuple):
        pair[0] = str(pair[0])

        data.update([pair])

        self._func = self._fit_data()

    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID Telegram
    def func(self, tg_id: int) -> int:
        value = self._func(tg_id)
        current = time.time()

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –≤ –±—É–¥—É—â–µ–º
        value = min(value, current)
        return value


logger = logging.getLogger(__name__)


# –ú–æ–¥—É–ª—å –±–æ—Ç–∞ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@loader.tds
class AcTimeMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

    strings = {
        "name": "–í—Ä–µ–º—è –∞–∫–∫–∞—É–Ω—Ç–∞",
        "info": "–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!",
        "error": "–û—à–∏–±–∫–∞!",
    }

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        self.config = loader.ModuleConfig(
            "answer_text",
            (
                "‚è≥ –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç: {0}\nüï∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {1}\n\nP.S. –°–∫—Ä–∏–ø—Ç –º–æ–¥—É–ª—è"
                " –æ–±—É—á–µ–Ω –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö ID, –ø–æ—ç—Ç–æ–º—É –¥–∞–Ω–Ω—ã–µ"
                " –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–æ—á–Ω–µ–Ω—ã"
            ),
            lambda m: self.strings("cfg_answer_text", m),
        )
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ Unix –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
    def time_format(self, unix_time: int, fmt="%Y-%m-%d") -> str:
        result = [str(datetime.utcfromtimestamp(unix_time).strftime(fmt))]

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º –∏ –∑–∞–¥–∞–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        d = relativedelta(datetime.now(), datetime.utcfromtimestamp(unix_time))
        result.append(f"{d.years} –ª–µ—Ç, {d.months} –º–µ—Å—è—Ü–µ–≤, {d.days} –¥–Ω–µ–π")

        return result

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    @loader.unrestricted
    @loader.ratelimit
    async def actimecmd(self, message):
        """
         - –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ [beta]
        P.S. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Function –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            interpolation = Function()
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            reply = await message.get_reply_message()

            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID Telegram
            if reply:
                date = self.time_format(
                    unix_time=round(interpolation.func(int(reply.sender.id)))
                )
            else:
                date = self.time_format(
                    unix_time=round(interpolation.func(int(message.from_id)))
                )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            await utils.answer(
                message, self.config["answer_text"].format(date[0], date[1])
            )
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await utils.answer(message, f'{self.strings["error"]}\n\n{e}')
            if message.out:
                await asyncio.sleep(5)
                await message.delete()