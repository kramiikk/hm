import json
import logging
from typing import Union

from .. import loader, utils
from telethon.tl.types import Message

logger = logging.getLogger(__name__)

@loader.tds
class AuthManagerMod(loader.Module):
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è broadcast –º–æ–¥—É–ª—è"""

    strings = {
        "name": "AuthManager",
        "user_added": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
        "user_removed": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
        "user_exists": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
        "user_not_found": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö",
        "invalid_id": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "auth_list": "üìù <b>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{}",
        "auth_list_empty": "üìù –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç",
        "need_user_id": "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "json_created": "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
        "json_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º: {}"
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        self._client = client
        self._db = db
        self._me = await client.get_me()

    async def _load_json(self) -> Union[dict, None]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open("/root/Heroku/loll.json", 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            return {"authorized_users": []}
        except Exception as e:
            logger.error(f"Error loading JSON: {e}")
            return None

    async def _save_json(self, data: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª."""
        try:
            with open("/root/Heroku/loll.json", 'w', encoding='utf-8') as file:
                json.dump(data, file, indent=4)
            return True
        except Exception as e:
            logger.error(f"Error saving JSON: {e}")
            return False

    async def createjsoncmd(self, message: Message):
        """–°–æ–∑–¥–∞—Ç—å JSON —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        try:
            data = {"authorized_users": [self._me.id]}
            if await self._save_json(data):
                await utils.answer(message, self.strings["json_created"])
            else:
                await utils.answer(message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"))
        except Exception as e:
            await utils.answer(message, self.strings["json_error"].format(str(e)))

    async def addusercmd(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings["need_user_id"])

        try:
            user_id = int(args[0])
            data = await self._load_json()
            if data is None:
                return await utils.answer(
                    message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                )

            if user_id in data["authorized_users"]:
                return await utils.answer(
                    message, self.strings["user_exists"].format(user_id)
                )

            data["authorized_users"].append(user_id)
            if await self._save_json(data):
                await utils.answer(message, self.strings["user_added"].format(user_id))
            else:
                await utils.answer(
                    message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                )
        except ValueError:
            await utils.answer(message, self.strings["invalid_id"])
        except Exception as e:
            await utils.answer(message, self.strings["json_error"].format(str(e)))

    async def delusercmd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."""
        args = utils.get_args(message)
        if not args:
            return await utils.answer(message, self.strings["need_user_id"])

        try:
            user_id = int(args[0])
            data = await self._load_json()
            if data is None:
                return await utils.answer(
                    message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                )

            if user_id == self._me.id:
                return await utils.answer(
                    message, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"
                )

            if user_id not in data["authorized_users"]:
                return await utils.answer(
                    message, self.strings["user_not_found"].format(user_id)
                )

            data["authorized_users"].remove(user_id)
            if await self._save_json(data):
                await utils.answer(message, self.strings["user_removed"].format(user_id))
            else:
                await utils.answer(
                    message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                )
        except ValueError:
            await utils.answer(message, self.strings["invalid_id"])
        except Exception as e:
            await utils.answer(message, self.strings["json_error"].format(str(e)))

    async def listusercmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            data = await self._load_json()
            if data is None:
                return await utils.answer(
                    message, self.strings["json_error"].format("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
                )

            users = data.get("authorized_users", [])
            if users:
                user_list = "\n".join(f"‚Ä¢ {user_id}" + (" (–∞–¥–º–∏–Ω)" if user_id == self._me.id else "") 
                                    for user_id in users)
                await utils.answer(message, self.strings["auth_list"].format(user_list))
            else:
                await utils.answer(message, self.strings["auth_list_empty"])
        except Exception as e:
            await utils.answer(message, self.strings["json_error"].format(str(e)))
