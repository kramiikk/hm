# scope: ffmpeg
# requires: pytube python-ffmpeg
import datetime
import os
import random

from pytube import YouTube
from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class AssMod(loader.Module):
    """–ú–æ–¥—É–ª—å"""

    strings = {"name": "Ass"}

    async def client_ready(self, client, db):
        """ready"""
        self.client = client
        self.db = db
        self.su = db.get("Su", "as", {})

    async def watcher(self, m):
        """–∞–ª–∫–æ"""
        if not isinstance(m, Message):
            return
        if m.text.casefold() == "—Ç–æ–ø":
            top = "–¢–æ–ø –±–∞–≥–æ—é–∑–µ—Ä–æ–≤:"
            a = sorted(self.su.items(), key=lambda x: x[1], reverse=True)
            for i in enumerate(i, 1):
                a = "ü©≤" if i[0] == 1 else i[1][1][0]
                top += f"\n{i[0]} | {i[1][1][1]} <code>{a}</code>"
            return await m.respond(top)
        if m.text.casefold() == "—Å–º–µ–Ω–∏—Ç—å –∂–∞–±—É":

            def dlyt():
                yt = YouTube("https://www.youtube.com/watch?v=lLDXtjXMjVg")
                yt = (
                    yt.streams.filter(progressive=True, file_extension="mp4")
                    .order_by("resolution")
                    .desc()
                    .first()
                )
                return yt.download("/tmp")

            path = await utils.run_sync(dlyt)
            await self.client.send_file(m.peer_id, path, reply_to=m)
            os.remove(path)
        if (
            not m.text.casefold().startswith("–∑–∞–∫–∏–¥–∞—Ç—å ")
            or ("–º–æ–¥–µ—Ä" not in m.text.casefold() and "–∞–¥–º–∏–Ω" not in m.text.casefold())
            or m.text.count(" ") == 1
        ):
            return
        ct = datetime.datetime.now()
        time = ct.day + ct.minute + ct.second
        self.su.setdefault("minute", time)
        if -1 < (time - self.su["minute"]) < 2:
            return await m.respond("–Ω–∞–¥–µ–Ω—å —à—Ç–∞–Ω—ãüëñ")
        self.su["minute"] = time
        self.db.set("Su", "as", self.su)
        self.su.setdefault(str(m.sender_id), [0, m.sender.first_name])
        num = random.randint(2, 5)
        self.su[str(m.sender_id)][0] += num
        self.db.set("Su", "as", self.su)
        top = {"–¥–µ—Ä—å": "üí©", "–≥–æ–≤–Ω": "üí©", "–ø–∏—Å—å–∫": "üí©", "—Ö—É": "ü•µ", "—á–ª–µ–Ω": "ü•µ"}
        for i in top:
            cmn = "ü§∞üèº"
            if i in m.text.casefold():
                cmn = " –°–º–∞—á–Ω–æ –æ—Ç—Å–æ—Å–∞–ª–∏!üí¶üí¶üí¶ü•µü•µü•µ" if top[i] == "ü•µ" else top[i]
                break
        await m.respond(
            f"–°–ø–∞—Å–∏–±–æ! –í—ã –Ω–∞–∫–æ—Ä–º–∏–ª–∏ –º–æ–¥–µ—Ä–∫—Éü•û{cmn} \n{num} –∞–¥–º–∏–Ω–∞ –∂–∞–±–∞–±–æ—Ç–∞ –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ãüéâ \n\n <b>–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –≤ —Ç–ø: -{self.su[str(m.sender_id)][0]}ü§Ø</b>"
        )
