import datetime
import random

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class AssMod(loader.Module):
    """–ú–æ–¥—É–ª—å"""

    strings = {"name": "Ass"}

    async def client_ready(self, client, db):
        """ready"""
        self.client = client
        self.db = db
        self.ass = db.get("Su", "as", {})
        self.tis = db.get("Su", "ti", {})

    async def watcher(self, m):
        """–∞–ª–∫–æ"""
        if not isinstance(m, Message):
            return
        if m.text.casefold() == "—Ç–æ–ø":
            top = "–¢–æ–ø –±–∞–≥–æ—é–∑–µ—Ä–æ–≤:"
            for i in enumerate(
                sorted(self.ass.items(), key=lambda x: x[1], reverse=True), 1
            ):
                a = "ü©≤" if i[0] == 1 else i[1][1][0]
                top += f"\n{i[0]} | {i[1][1][1]} <code>{a}</code>"
            return await m.respond(top)
        if (
            not m.text.casefold().startswith("–∑–∞–∫–∏–¥–∞—Ç—å ")
            or ("–º–æ–¥–µ—Ä" not in m.text.casefold() and "–∞–¥–º–∏–Ω" not in m.text.casefold())
            or m.text.count(" ") == 1
        ):
            return
        ct = datetime.datetime.now()
        time = ct.day + ct.minute + ct.second
        num = random.randint(2, 5)
        if "minute" in self.tis and -1 < (time - self.tis["minute"]) < 3:
            a = (
                "–∫–æ–≥–¥–∞ —ç—Ç–æ –≤—Å–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—èüëò",
                "–Ω–∞–¥–µ–Ω—å —à—Ç–∞–Ω—ã –ª–æ—Öüëñ",
                "–õ—é–±–ª—é –∫-–ø–æ–ø –∏ –º–µ–Ω—è –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—åüë®üèª‚Äçüöí",
                "Ïä§Ìä∏Î†àÏù¥ ÌÇ§Ï¶àÏùò ÏÑ∏Í≥Ñ ÏßÄÎ∞∞.",
                "–Ø –ù–ï –ë–£–î–£ –†–ê–ë–û–¢–ê–¢–¨ –í –í–ê–®–ï–ú –ß–ê–¢–ï, –Ø –†–ê–ë–û–¢–ê–Æ –¢–û–õ–¨–ö–û –í –û–§–ò–¶–ò–ê–õ–¨–ù–û–ú –ß–ê–¢–ï –ñ–ê–ë–ê–ë–û–¢–ê",
                "üêà‚ù§Ô∏è",
                "–Ω–µ –æ—Ç–≤–µ—á–∞—é –≤ –ª—Åüßëüèª‚Äçüî¨",
                "–ù–µ —Ö–æ—á—É —Ä–∞—Å—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–πüíó",
                "–≤—á–µ—Ä–∞ –±—ã–ª–æ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ,—á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –¥–∞–∂–µ —Å–¥–æ—Ö–Ω—É—Ç—åüò∫",
                "üñ§~–≠—Ç–æ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –ø–∞–Ω–¥–µ–º–∏—è~üñ§",
                "–õ—é–¥—è–º —Ç–µ–∂–µ–ª–æ –±–µ–∑ –¥—Ä—É–∑–µ–π –Ω–æ –ø–æ—Ä–æ–π –º—ã –∑–∞–¥—É–º—ã–≤–∞—é—Å—å —á—Ç–æ –æ–¥–Ω–æ–º—É –ª—É—á—à–µüë®üèª",
                "Inwardly?ü§´",
                "–î–∞–π—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–Ω–∏—Ç—å—Å—èüòò",
                "Technoblade –∂–∞–ª—å —á—Ç–æ —Ç—ã —É–º–µ—Ä –æ—Ç —Ä–∞–∫–∞, –Ω–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æüëª",
                "–°–∫—É—á–∞—éüëÄ",
                "–Ø —á–∞—Å—Ç–æ –≤–∏–∂—É –°—Ç—Ä–∞—Ö –≤ —Å–º–æ—Ç—Ä—è—â–∏—Ö –Ω–∞ –º–µ–Ω—è –ì–ª–∞–∑–∞—Öüëô",
            )
            return await m.respond(random.choice(a))
        top = {"–¥–µ—Ä—å": "üí©", "–≥–æ–≤–Ω": "üí©", "–ø–∏—Å—å–∫": "üí©", "—Ö—É": "ü•µ", "—á–ª–µ–Ω": "ü•µ"}
        for i in top:
            cmn = "ü§∞üèº"
            if i in m.text.casefold():
                cmn = " –°–º–∞—á–Ω–æ –æ—Ç—Å–æ—Å–∞–ª–∏!üí¶üí¶üí¶ü•µü•µü•µ" if top[i] == "ü•µ" else top[i]
                break
        self.ass.setdefault(str(m.sender_id), [0, m.sender.first_name])
        self.ass[str(m.sender_id)][0] += num
        await m.respond(
            f"–°–ø–∞—Å–∏–±–æ! –í—ã –Ω–∞–∫–æ—Ä–º–∏–ª–∏ –º–æ–¥–µ—Ä–∫—Éü•û{cmn} \n{num} –∞–¥–º–∏–Ω–∞ –∂–∞–±–∞–±–æ—Ç–∞ –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ãüéâ \n\n <b>–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –≤ —Ç–ø: -{self.ass[str(m.sender_id)][0]}ü§Ø</b>"
        )
        self.tis.setdefault("minute", time)
        self.tis["minute"] = time
        self.db.set("Su", "ti", self.tis)
        self.db.set("Su", "as", self.ass)
