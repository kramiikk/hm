import asyncio
from functools import lru_cache
from typing import Union, Optional
import aiohttp
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Message, Channel, User, UserStatusOnline, UserStatusOffline, UserStatusRecently
from telethon.errors.rpcerrorlist import YouBlockedUserError
from telethon import Button
from .. import loader, utils

@lru_cache(maxsize=100)
async def get_creation_date(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://restore-access.indream.app/regdate",
                json={"telegramId": user_id},
                headers={
                    "accept": "*/*",
                    "content-type": "application/x-www-form-urlencoded",
                    "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
                    "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
                    "accept-language": "en-US,en;q=0.9",
                }
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("data", {}).get("date", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        except Exception:
            pass
    return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

@loader.tds
class UserInfoMod(loader.Module):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ Telegram"""
    
    strings = {
        "name": "UserInfo",
        "loading": "üïê <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>",
        "not_found": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª",
        "unblock_bot": "‚ùó –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ funstat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "error_fetching": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}"
    }

    async def get_entity_safe(self, entity_id: Union[str, int]) -> Optional[Union[User, Channel]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        try:
            return await self._client.get_entity(
                int(entity_id) if str(entity_id).isdigit() else entity_id
            )
        except Exception:
            return None

    async def format_user_info(self, user_ent: User, user: GetFullUserRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        registration_date = await get_creation_date(user_ent.id)
        funstat_info = await self.get_funstat_info(user_ent.id)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        name_parts = []
        if user_ent.first_name:
            name_parts.append(user_ent.first_name)
        if user_ent.last_name:
            name_parts.append(user_ent.last_name)
        full_name = " ".join(name_parts) if name_parts else "üö´"
        
        # –°—Ç–∞—Ç—É—Å—ã –∏ —Ñ–ª–∞–≥–∏
        status_flags = []
        if user_ent.bot:
            status_flags.append("ü§ñ –ë–æ—Ç")
        if user_ent.verified:
            status_flags.append("‚úì –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        if user_ent.premium:
            status_flags.append("‚≠êÔ∏è Premium")
        if getattr(user_ent, "deleted", False):
            status_flags.append("üóë –£–¥–∞–ª—ë–Ω")
        
        status_line = " | ".join(status_flags)
        
        info = (
            f"üë§ <b>{full_name}</b>\n"
            f"{f'‚öúÔ∏è {status_line}\n\n' if status_flags else '\n'}"
            f"‚îú ID: <code>{user_ent.id}</code>\n"
            f"‚îú Username: @{user_ent.username or 'üö´'}\n"
            f"‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{registration_date}</code>\n"
            f"‚îú –û–±—â–∏–µ —á–∞—Ç—ã: {user.full_user.common_chats_count}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–Ω–ª–∞–π–Ω–µ
        if hasattr(user_ent, "status"):
            if isinstance(user_ent.status, UserStatusOnline):
                info += "‚îî –°—Ç–∞—Ç—É—Å: üü¢ –í —Å–µ—Ç–∏\n\n"
            elif isinstance(user_ent.status, UserStatusOffline):
                last_seen = user_ent.status.was_online.strftime("%d.%m.%Y %H:%M")
                info += f"‚îî –°—Ç–∞—Ç—É—Å: ‚ö´Ô∏è –ë—ã–ª(–∞) {last_seen}\n\n"
            elif isinstance(user_ent.status, UserStatusRecently):
                info += "‚îî –°—Ç–∞—Ç—É—Å: üîµ –ù–µ–¥–∞–≤–Ω–æ\n\n"
            else:
                info += "‚îî –°—Ç–∞—Ç—É—Å: ‚ö´Ô∏è –î–∞–≤–Ω–æ\n\n"
        else:
            info += "‚îî –°—Ç–∞—Ç—É—Å: ‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if user.full_user.about:
            info += f"üìù <b>–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n{user.full_user.about}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        links = []
        if user_ent.username:
            links.append(f"‚îî <a href='tg://user?id={user_ent.id}'>Telegram</a>")
        if links:
            info += f"üîó <b>–°—Å—ã–ª–∫–∏:</b>\n" + "\n".join(links) + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if funstat_info and not any(err in funstat_info.lower() for err in ["–æ—à–∏–±–∫–∞", "error", "‚ö†Ô∏è"]):
            info += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n{funstat_info}"
            
        return info

    async def format_channel_info(self, channel_ent: Channel, channel: GetFullChannelRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        creation_date = await get_creation_date(channel_ent.id)
        
        # –°—Ç–∞—Ç—É—Å—ã –∏ —Ñ–ª–∞–≥–∏ –∫–∞–Ω–∞–ª–∞
        status_flags = []
        if channel_ent.verified:
            status_flags.append("‚úì –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        if channel_ent.scam:
            status_flags.append("‚ö†Ô∏è –°–∫–∞–º")
        
        status_line = " | ".join(status_flags)
        
        info = (
            f"üì£ <b>{channel_ent.title}</b>\n"
            f"{f'‚öúÔ∏è {status_line}\n\n' if status_flags else '\n'}"
            f"‚îú ID: <code>{channel_ent.id}</code>\n"
            f"‚îú Username: @{channel_ent.username or 'üö´'}\n"
            f"‚îú –°–æ–∑–¥–∞–Ω: <code>{creation_date}</code>\n"
            f"‚îú –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel.full_chat.participants_count:,}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if channel.full_chat.slowmode_seconds:
            info += f"‚îú –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {channel.full_chat.slowmode_seconds} —Å–µ–∫.\n"
        
        info += "‚îî –¢–∏–ø: " + ("–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞" if channel_ent.megagroup else "–ö–∞–Ω–∞–ª") + "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if channel.full_chat.about:
            info += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{channel.full_chat.about}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        if channel_ent.username:
            info += f"\nüîó <b>–°—Å—ã–ª–∫–∏:</b>\n‚îî https://t.me/{channel_ent.username}"
            
        return info

    async def send_info_message(self, message: Message, entity: Union[User, Channel], info_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ç–æ"""
        photo = await self._client.download_profile_photo(entity.id)
        
        if photo:
            await self._client.send_file(
                message.chat_id,
                file=photo,
                caption=info_text,
                buttons=[[Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", data=f"refresh:{entity.id}")]]
            )
        else:
            await self._client.send_message(
                message.chat_id,
                info_text,
                buttons=[[Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", data=f"refresh:{entity.id}")]]
            )
        
        await message.delete()

    async def get_funstat_info(self, user_id: int, max_attempts: int = 2) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ funstat"""
        chat = "@Suusbdj_bot"
        
        try:
            await self._client.send_message(chat, str(user_id))
            await asyncio.sleep(3)
            
            async for msg in self._client.iter_messages(chat, limit=5):
                if str(user_id) in msg.text:
                    return "\n".join(
                        line for line in msg.text.split("\n")
                        if "ID:" not in line and "–≠—Ç–æ" not in line
                    )
                    
        except YouBlockedUserError:
            return self.strings["unblock_bot"]
        except Exception as e:
            return self.strings["error_fetching"].format(str(e))
            
        return "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç funstat"

    async def userinfocmd(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ: .userinfo <@—é–∑–µ—Ä–Ω–µ–π–º/ID> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await utils.answer(message, self.strings["loading"])
        
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        
        entity = await self.get_entity_safe(
            args or (reply.sender_id if reply else None)
        )
        
        if not entity:
            await utils.answer(message, self.strings["not_found"])
            return
            
        try:
            if isinstance(entity, Channel):
                channel = await self._client(GetFullChannelRequest(entity))
                info_text = await self.format_channel_info(entity, channel)
            else:
                user = await self._client(GetFullUserRequest(entity.id))
                info_text = await self.format_user_info(entity, user)
                
            await self.send_info_message(message, entity, info_text)
            
        except Exception as e:
            await utils.answer(message, self.strings["error_fetching"].format(str(e)))

    async def refresh_callback_handler(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–∞–Ω–∞–ª–∞ –∏–∑ callback data
            entity_id = int(call.data.decode().split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å
            entity = await self.get_entity_safe(entity_id)
            if not entity:
                await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if isinstance(entity, Channel):
                channel = await self._client(GetFullChannelRequest(entity))
                info_text = await self.format_channel_info(entity, channel)
            else:
                user = await self._client(GetFullUserRequest(entity.id))
                info_text = await self.format_user_info(entity, user)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            photo = await self._client.download_profile_photo(entity.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if photo:
                await call.edit(
                    file=photo,
                    text=info_text,
                    buttons=[[Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", data=f"refresh:{entity.id}")]]
                )
            else:
                await call.edit(
                    text=info_text,
                    buttons=[[Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", data=f"refresh:{entity.id}")]]
                )
            
            await call.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            await call.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

    async def callback_handler(self, call):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        if call.data.decode().startswith("refresh:"):
            await self.refresh_callback_handler(call)