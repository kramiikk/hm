import asyncio
from typing import Union, Optional, Dict, List, Tuple, Any, TypeVar, Generic
import aiohttp
import logging
from collections import defaultdict
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Message, Channel, User, UserStatusOnline, UserStatusOffline, UserStatusRecently
from telethon.errors.rpcerrorlist import YouBlockedUserError, FloodWaitError, UserNotParticipantError
from telethon.errors.common import MultiError
from .. import loader, utils
import time
from dataclasses import dataclass

logger = logging.getLogger(__name__)

T = TypeVar('T')

@dataclass
class Config:
    CACHE_TTL: int = 3600
    CACHE_SIZE: int = 500
    HTTP_TIMEOUT: int = 3
    FUNSTAT_TIMEOUT: int = 3  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    MAX_ATTEMPTS: int = 3
    RETRY_DELAY: int = 1
    FUNSTAT_BOT: str = "@Suusbdj_bot"
    LOG_LEVEL: int = logging.INFO
    PHOTO_CACHE_TTL: int = 1800
    MAX_RETRIES: int = 3
    REQUEST_TIMEOUT: int = 3  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    
config = Config()

class AsyncCache(Generic[T]):
    def __init__(self, ttl: int, max_size: int = 1000):
        self._cache: Dict[Any, Tuple[T, float]] = {}
        self._lock = asyncio.Lock()
        self._ttl = ttl
        self._max_size = max_size
        self._last_cleanup = time.time()
        self._cleanup_interval = 300
        
    async def _cleanup_cache(self):
        now = time.time()
        if now - self._last_cleanup < self._cleanup_interval:
            return
            
        async with self._lock:
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ TTL –∏ —Ä–∞–∑–º–µ—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            items = sorted(
                [(k, v, t) for k, (v, t) in self._cache.items()],
                key=lambda x: x[2]
            )
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_size —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            valid_items = [(k, v, t) for k, v, t in items if now - t < self._ttl][-self._max_size:]
            self._cache = {k: (v, t) for k, v, t in valid_items}
            self._last_cleanup = now
        
    async def get(self, key: Any) -> Optional[T]:
        try:
            async with self._lock:
                if key not in self._cache:
                    return None
                value, timestamp = self._cache[key]
                if time.time() - timestamp >= self._ttl:
                    del self._cache[key]
                    return None
                return value
        finally:
            if len(self._cache) > self._max_size or time.time() - self._last_cleanup >= self._cleanup_interval:
                asyncio.create_task(self._cleanup_cache())
            
    async def set(self, key: Any, value: T):
        async with self._lock:
            self._cache[key] = (value, time.time())
            if len(self._cache) > self._max_size:
                asyncio.create_task(self._cleanup_cache())

class RetryHandler:
    @staticmethod
    async def retry_with_delay(func, *args, max_retries=Config.MAX_RETRIES, **kwargs):
        last_error = None
        for attempt in range(max_retries):
            try:
                async with asyncio.timeout(Config.REQUEST_TIMEOUT):
                    return await func(*args, **kwargs)
            except (FloodWaitError, asyncio.TimeoutError) as e:
                last_error = e
                if attempt == max_retries - 1:
                    raise
                if isinstance(e, FloodWaitError):
                    await asyncio.sleep(e.seconds)
                else:
                    await asyncio.sleep(Config.RETRY_DELAY * (2 ** attempt))
            except Exception as e:
                last_error = e
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(Config.RETRY_DELAY * (2 ** attempt))
        raise last_error if last_error else RuntimeError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")

class ConnectionPool:
    _session: Optional[aiohttp.ClientSession] = None
    _lock = asyncio.Lock()
    
    @classmethod
    async def get_session(cls) -> aiohttp.ClientSession:
        async with cls._lock:
            if cls._session is None or cls._session.closed:
                timeout = aiohttp.ClientTimeout(
                    total=Config.HTTP_TIMEOUT,
                    connect=Config.HTTP_TIMEOUT/2,
                    sock_read=Config.HTTP_TIMEOUT
                )
                cls._session = aiohttp.ClientSession(
                    timeout=timeout,
                    headers={
                        "accept": "*/*",
                        "content-type": "application/json",
                        "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
                        "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
                        "accept-language": "en-US,en;q=0.9",
                    }
                )
            return cls._session

    @classmethod
    async def close(cls):
        async with cls._lock:
            if cls._session and not cls._session.closed:
                await cls._session.close()
                cls._session = None

class PhotoCache:
    _cache = AsyncCache[bytes](Config.PHOTO_CACHE_TTL, max_size=200)
    _download_locks: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)
    _cleanup_lock = asyncio.Lock()
    _lock_timeout = 30
    
    @classmethod
    async def get_or_download(cls, client, entity_id: int) -> Optional[bytes]:
        try:
            if photo := await cls._cache.get(entity_id):
                return photo
                
            async with cls._download_locks[entity_id]:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if photo := await cls._cache.get(entity_id):
                    return photo
                    
                async with asyncio.timeout(cls._lock_timeout):
                    photo = await RetryHandler.retry_with_delay(
                        client.download_profile_photo,
                        entity_id,
                        bytes
                    )
                    
                    if photo:
                        await cls._cache.set(entity_id, photo)
                    return photo
                    
        except asyncio.TimeoutError:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {entity_id}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {entity_id}: {e}", exc_info=True)
            return None

async def get_creation_date(user_id: int) -> str:
    if not user_id:
        return "–û—à–∏–±–∫–∞: ID –Ω–µ —É–∫–∞–∑–∞–Ω"
        
    session = await ConnectionPool.get_session()
    try:
        async with asyncio.timeout(Config.HTTP_TIMEOUT):
            async with session.post(
                "https://restore-access.indream.app/regdate",
                json={"telegramId": user_id}
            ) as response:
                response.raise_for_status()
                data = await response.json()
                return data.get("data", {}).get("date", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    except aiohttp.ClientResponseError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.status}"
    except asyncio.TimeoutError:
        return "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã: {str(e)}"

@loader.tds
class UserInfoMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ"""
    
    strings = {
        "name": "UserInfo",
        "loading": "üïê <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>",
        "not_found": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª",
        "unblock_bot": "‚ùó –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ funstat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "error_fetching": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}"
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._funstat_cache = AsyncCache(Config.CACHE_TTL, max_size=100)

    def _format_details(self, details: List[str]) -> List[str]:
        if not details:
            return []
        return [f"‚îú {detail}" for detail in details[:-1]] + [f"‚îî {details[-1]}"]

    def _format_status_flags(self, flags: List[str]) -> str:
        return f"‚öúÔ∏è {' ‚Ä¢ '.join(flags)}\n" if flags else ""

    def _get_entity_flags(self, entity: Union[User, Channel]) -> List[str]:
        flags = []
        if getattr(entity, 'verified', False):
            flags.append("‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        if getattr(entity, 'premium', False):
            flags.append("üíé Premium")
        if getattr(entity, 'scam', False):
            flags.append("‚ö†Ô∏è –°–∫–∞–º")
        if isinstance(entity, User):
            if getattr(entity, 'bot', False):
                flags.append("ü§ñ –ë–æ—Ç")
            if getattr(entity, 'deleted', False):
                flags.append("‚ôªÔ∏è –£–¥–∞–ª—ë–Ω")
        return flags

    async def on_unload(self):
        await ConnectionPool.close()

    async def get_funstat_info(self, user_id: int) -> str:
        try:
            if cached_info := await self._funstat_cache.get(user_id):
                return cached_info

            chat = Config.FUNSTAT_BOT
            
            for attempt in range(Config.MAX_ATTEMPTS):
                try:
                    async with asyncio.timeout(Config.FUNSTAT_TIMEOUT):
                        await self._client.send_message(chat, str(user_id))
                        await asyncio.sleep(3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
                        
                        messages = await self._client.get_messages(chat, limit=3)
                        for msg in messages:
                            if not msg.text or str(user_id) not in msg.text:
                                continue
                                
                            if any(err in msg.text.lower() for err in ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "not found", "error", "–æ—à–∏–±–∫–∞"]):
                                return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ funstat"
                            
                            lines = []
                            for line in msg.text.split("\n"):
                                line = line.strip()
                                if not line or any(x in line for x in ["ID:", "This is", "–≠—Ç–æ", "usernames:", "–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"]) or "@" in line:
                                    continue
                                
                                if ":" in line:
                                    try:
                                        label, value = line.split(":", 1)
                                        value = value.strip().replace(",", "").replace(" ", "")
                                        if value.isdigit():
                                            value = f"{int(value):,}"
                                        lines.append(f"{label}: {value}")
                                    except Exception:
                                        continue
                                else:
                                    lines.append(line)
                            
                            if lines:
                                result = "\n".join(lines)
                                await self._funstat_cache.set(user_id, result)
                                return result
                        
                        if attempt < Config.MAX_ATTEMPTS - 1:
                            await asyncio.sleep(Config.RETRY_DELAY)
                    
                except YouBlockedUserError:
                    return self.strings["unblock_bot"]
                except FloodWaitError as e:
                    if attempt == Config.MAX_ATTEMPTS - 1:
                        raise
                    await asyncio.sleep(e.seconds)
                except asyncio.TimeoutError:
                    if attempt == Config.MAX_ATTEMPTS - 1:
                        return "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                    continue
                    
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç funstat"
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funstat: {e}", exc_info=True)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    async def send_info_message(self, message: Message, entity: Union[User, Channel], info_text: str):
        try:
            photo = await PhotoCache.get_or_download(self._client, entity.id)
            await message.respond(info_text, file=photo if photo else None)
            await message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            raise

    async def userinfocmd(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .userinfo [@ –∏–ª–∏ ID] –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await utils.answer(message, self.strings["loading"])
        
        try:
            args = utils.get_args_raw(message)
            reply = await message.get_reply_message()
            
            if not args and not reply:
                await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–∞–Ω–∞–ª –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            
            entity = None
            try:
                entity_id = args or (reply.sender_id if reply else None)
                if not entity_id:
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ID")
                    
                entity = await self._client.get_entity(entity_id)
            except (ValueError, AttributeError) as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
                await utils.answer(message, self.strings["not_found"])
                return
                
            try:
                if isinstance(entity, Channel):
                    full_info = await self._client(GetFullChannelRequest(entity))
                    info_text = await self.format_channel_info(entity, full_info)
                else:
                    full_info = await self._client(GetFullUserRequest(entity))
                    info_text = await self.format_user_info(entity, full_info)
                    
                await self.send_info_message(message, entity, info_text)
                
            except UserNotParticipantError:
                await utils.answer(message, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            except MultiError as e:
                if any(isinstance(err, UserNotParticipantError) for err in e.exceptions):
                    await utils.answer(message, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                else:
                    raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", exc_info=True)
                await utils.answer(message, self.strings["error_fetching"].format(str(e)))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
            await utils.answer(message, self.strings["error_fetching"].format(str(e)))

    def _format_status(self, status) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if isinstance(status, UserStatusOnline):
            return "üü¢ –í —Å–µ—Ç–∏"
        elif isinstance(status, UserStatusOffline):
            return f"‚ö´Ô∏è –ë—ã–ª(–∞) {status.was_online.strftime('%d.%m.%Y %H:%M')}"
        elif isinstance(status, UserStatusRecently):
            return "üîµ –ù–µ–¥–∞–≤–Ω–æ"
        return "‚ö´Ô∏è –î–∞–≤–Ω–æ"

    async def format_user_info(self, user: User, full_user: GetFullUserRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        info_parts = []
        
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            name = " ".join(filter(None, [user.first_name, user.last_name])) or "üö´"
            info_parts.append(f"üë§ <b>{name}</b>")
            
            # –°—Ç–∞—Ç—É—Å—ã
            status_flags = self._get_entity_flags(user)
            if status_flags:
                info_parts.append(self._format_status_flags(status_flags))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = [
                f"üÜî ID: <code>{user.id}</code>",
                f"üìù Username: @{user.username or 'üö´'}",
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{await get_creation_date(user.id)}</code>",
                f"üë• –û–±—â–∏–µ —á–∞—Ç—ã: {full_user.full_user.common_chats_count}",
                f"‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {self._format_status(user.status)}"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
            if hasattr(full_user.full_user, 'phone_calls_available'):
                calls_available = full_user.full_user.phone_calls_available and getattr(full_user.full_user, 'video_calls_available', False)
                details.append(f"üìû –ó–≤–æ–Ω–∫–∏: {'‚úÖ' if calls_available else '‚ùå'}")
                
            info_parts.extend(self._format_details(details))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if full_user.full_user.about:
                info_parts.extend([
                    "",
                    "üìã <b>–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>",
                    f"<i>{full_user.full_user.about}</i>"
                ])
            
            # –°—Å—ã–ª–∫–∏
            if user.username:
                info_parts.extend([
                    "",
                    "üîó <b>–°—Å—ã–ª–∫–∏:</b>",
                    f"‚îú Telegram: @{user.username}",
                    f"‚îî –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user.id}'>–æ—Ç–∫—Ä—ã—Ç—å</a>"
                ])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            funstat_info = await self.get_funstat_info(user.id)
            if funstat_info and not any(err in funstat_info.lower() for err in ["–æ—à–∏–±–∫–∞", "error", "‚ö†Ô∏è"]):
                info_parts.extend([
                    "",
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ funstat:</b>",
                    funstat_info
                ])
            
            return "\n".join(info_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

    async def format_channel_info(self, channel: Channel, full_channel: GetFullChannelRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        info_parts = []
        
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            info_parts.append(f"üì£ <b>{channel.title}</b>")
            
            # –°—Ç–∞—Ç—É—Å—ã
            status_flags = self._get_entity_flags(channel)
            if status_flags:
                info_parts.append(self._format_status_flags(status_flags))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = [
                f"üÜî ID: <code>{channel.id}</code>",
                f"üìù Username: @{channel.username or 'üö´'}",
                f"üìÖ –°–æ–∑–¥–∞–Ω: <code>{await get_creation_date(channel.id)}</code>",
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {full_channel.full_chat.participants_count:,}"
            ]
            
            if full_channel.full_chat.slowmode_seconds:
                details.append(f"‚è± –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {full_channel.full_chat.slowmode_seconds} —Å–µ–∫.")
            if full_channel.full_chat.linked_chat_id:
                details.append(f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç: {full_channel.full_chat.linked_chat_id}")
            
            if full_channel.full_chat.online_count:
                details.append(f"üü¢ –û–Ω–ª–∞–π–Ω: {full_channel.full_chat.online_count:,}")
            
            if full_channel.full_chat.messages_count:
                details.append(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {full_channel.full_chat.messages_count:,}")
                
            details.append(f"üìÇ –¢–∏–ø: {self._get_channel_type(channel)}")
            
            info_parts.extend(self._format_details(details))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if full_channel.full_chat.about:
                info_parts.extend([
                    "",
                    "üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>",
                    f"<i>{full_channel.full_chat.about}</i>"
                ])
            
            # –°—Å—ã–ª–∫–∏
            links = []
            if channel.username:
                links.append(f"‚îú –ö–∞–Ω–∞–ª: https://t.me/{channel.username}")
            if full_channel.full_chat.invite_link:
                links.append(f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {full_channel.full_chat.invite_link}")
                
            if links:
                info_parts.extend([
                    "",
                    "üîó <b>–°—Å—ã–ª–∫–∏:</b>",
                    *links
                ])
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            features = []
            if channel.signatures:
                features.append("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∏ –∞–≤—Ç–æ—Ä–æ–≤")
            if channel.has_link:
                features.append("üîó –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
            
            if features:
                info_parts.extend([
                    "",
                    "‚öôÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>",
                    " ‚Ä¢ ".join(features)
                ])
            
            return "\n".join(info_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

    def _get_channel_type(self, channel: Channel) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞"""
        if channel.megagroup:
            return "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
        elif channel.gigagroup:
            return "Broadcast –≥—Ä—É–ø–ø–∞"
        elif channel.broadcast:
            return "–ö–∞–Ω–∞–ª"
        return "–ì—Ä—É–ø–ø–∞"