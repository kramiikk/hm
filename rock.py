import asyncio
from typing import Union, Optional, Dict, List, Tuple, Any, TypeVar, Generic
import logging
from collections import defaultdict
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Message, Channel, User, UserStatusOnline, UserStatusOffline, UserStatusRecently
from telethon.errors.rpcerrorlist import YouBlockedUserError, FloodWaitError, UserNotParticipantError
from telethon.errors.common import MultiError
from .. import loader, utils
import time
from dataclasses import dataclass

logger = logging.getLogger(__name__)

T = TypeVar('T')

@dataclass
class Config:
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    CLEANUP_INTERVAL: int = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (5 –º–∏–Ω—É—Ç)
    
    # –†–∞–∑–º–µ—Ä—ã –∫—ç—à–∞
    CACHE_SIZE: int = 500
    
    # –¢–∞–π–º–∞—É—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
    TIMEOUT: int = 1  # –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    MAX_ATTEMPTS: int = 3     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    FUNSTAT_BOT: str = "@Suusbdj_bot"
    HISTORY_BOT: str = "@tgprofile_history_bot"
    
    # –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    BASE_MARKERS: tuple = ("this is", "—ç—Ç–æ")
    
    # –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    ERROR_MARKERS: tuple = ("–Ω–µ –Ω–∞–π–¥–µ–Ω", "not found", "error", "–æ—à–∏–±–∫–∞", "‚ö†Ô∏è")
    VALID_RESPONSE_MARKERS: tuple = BASE_MARKERS
    SKIP_LINE_MARKERS: tuple = ("id:",) + BASE_MARKERS + ("usernames:", "–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
config = Config()

class AsyncCache(Generic[T]):
    def __init__(self, ttl: int, max_size: int = Config.CACHE_SIZE):
        self._cache: Dict[Any, Tuple[T, float]] = {}
        self._lock = asyncio.Lock()
        self._ttl = ttl
        self._max_size = max_size
        self._last_cleanup = time.time()
        self._cleanup_interval = Config.CLEANUP_INTERVAL
        
    async def _cleanup_cache(self):
        now = time.time()
        if now - self._last_cleanup < self._cleanup_interval:
            return
            
        async with self._lock:
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ TTL –∏ —Ä–∞–∑–º–µ—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            items = sorted(
                [(k, v, t) for k, (v, t) in self._cache.items()],
                key=lambda x: x[2]
            )
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_size —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            valid_items = [(k, v, t) for k, v, t in items if now - t < self._ttl]
            if valid_items:
                valid_items = valid_items[-self._max_size:]
                self._cache = {k: (v, t) for k, v, t in valid_items}
            else:
                self._cache.clear()
            self._last_cleanup = now
        
    async def get(self, key: Any) -> Optional[T]:
        try:
            async with self._lock:
                if key not in self._cache:
                    return None
                value, timestamp = self._cache[key]
                if time.time() - timestamp >= self._ttl:
                    del self._cache[key]
                    return None
                return value
        finally:
            if len(self._cache) > self._max_size or time.time() - self._last_cleanup >= self._cleanup_interval:
                asyncio.create_task(self._cleanup_cache())
            
    async def set(self, key: Any, value: T):
        async with self._lock:
            self._cache[key] = (value, time.time())
            if len(self._cache) > self._max_size:
                asyncio.create_task(self._cleanup_cache())

class RetryHandler:
    @staticmethod
    async def retry_with_delay(func, *args, max_retries=Config.MAX_ATTEMPTS, **kwargs):
        last_error = None
        for attempt in range(max_retries):
            try:
                return await asyncio.wait_for(
                    func(*args, **kwargs),
                    timeout=Config.TIMEOUT
                )
            except (FloodWaitError, asyncio.TimeoutError) as e:
                last_error = e
                if attempt == max_retries - 1:
                    raise
                if isinstance(e, FloodWaitError):
                    await asyncio.sleep(e.seconds)
                else:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É 5 —Å–µ–∫—É–Ω–¥–∞–º–∏
                    delay = min(Config.TIMEOUT * (2 ** attempt), 5)
                    await asyncio.sleep(delay)
            except Exception as e:
                last_error = e
                if attempt == max_retries - 1:
                    raise
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É 5 —Å–µ–∫—É–Ω–¥–∞–º–∏
                delay = min(Config.TIMEOUT * (2 ** attempt), 5)
                await asyncio.sleep(delay)
        raise last_error if last_error else RuntimeError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")

class PhotoCache:
    _cache = AsyncCache[bytes](Config.CLEANUP_INTERVAL, max_size=200)
    _download_locks: Dict[int, asyncio.Lock] = defaultdict(lambda: asyncio.Lock())
    _last_used: Dict[int, float] = {}
    
    @classmethod
    async def get_or_download(cls, client, entity_id: int) -> Optional[bytes]:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            cls._last_used[entity_id] = time.time()
            
            if photo := await cls._cache.get(entity_id):
                return photo
                
            async with cls._download_locks[entity_id]:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if photo := await cls._cache.get(entity_id):
                    return photo
                    
                photo = await RetryHandler.retry_with_delay(
                    client.download_profile_photo,
                    entity_id,
                    bytes
                )
                
                if photo:
                    await cls._cache.set(entity_id, photo)
                return photo
                    
        except asyncio.TimeoutError:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {entity_id}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {entity_id}: {e}", exc_info=True)
            return None
        finally:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–∫–∏
            now = time.time()
            old_locks = [k for k, v in cls._last_used.items() if now - v > Config.CLEANUP_INTERVAL]
            for k in old_locks:
                cls._download_locks.pop(k, None)
                cls._last_used.pop(k, None)

@loader.tds
class UserInfoMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ"""
    
    strings = {
        "name": "UserInfo",
        "loading": "üïê <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>",
        "not_found": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–Ω–∞–ª",
        "unblock_bot": "‚ùó –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ funstat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "error_fetching": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}"
    }

    def __init__(self):
        self.name = self.strings["name"]
        self._funstat_cache = AsyncCache(Config.CLEANUP_INTERVAL, max_size=100)

    def _format_details(self, details: List[str]) -> List[str]:
        if not details:
            return []
        return [f"‚îú {detail}" for detail in details[:-1]] + [f"‚îî {details[-1]}"]

    def _format_status_flags(self, flags: List[str]) -> str:
        return f"‚öúÔ∏è {' ‚Ä¢ '.join(flags)}\n" if flags else ""

    def _get_entity_flags(self, entity: Union[User, Channel]) -> List[str]:
        flags = []
        if getattr(entity, 'verified', False):
            flags.append("‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        if getattr(entity, 'premium', False):
            flags.append("üíé Premium")
        if getattr(entity, 'scam', False):
            flags.append("‚ö†Ô∏è –°–∫–∞–º")
        if isinstance(entity, User):
            if getattr(entity, 'bot', False):
                flags.append("ü§ñ –ë–æ—Ç")
            if getattr(entity, 'deleted', False):
                flags.append("‚ôªÔ∏è –£–¥–∞–ª—ë–Ω")
        return flags

    async def on_unload(self):
        pass

    async def get_funstat_info(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç funstat –±–æ—Ç–∞"""
        try:
            if cached_info := await self._funstat_cache.get(user_id):
                return cached_info

            chat = Config.FUNSTAT_BOT
            error_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç funstat"
            
            for attempt in range(Config.MAX_ATTEMPTS):
                try:
                    await self._client.send_message(chat, str(user_id))
                    await asyncio.sleep(Config.TIMEOUT)
                    
                    messages = await asyncio.wait_for(
                        self._client.get_messages(chat, limit=3),
                        timeout=Config.TIMEOUT
                    )
                    
                    found_valid_response = False
                    for msg in messages:
                        if not msg.text or str(user_id) not in msg.text:
                            continue
                            
                        text_lower = msg.text.lower()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
                        if any(err in text_lower for err in Config.ERROR_MARKERS):
                            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ funstat"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        if any(marker in text_lower for marker in Config.VALID_RESPONSE_MARKERS):
                            found_valid_response = True
                            lines = []
                            for line in msg.text.split("\n"):
                                line = line.strip()
                                if not line or any(x in line.lower() for x in Config.SKIP_LINE_MARKERS) or "@" in line:
                                    continue
                                
                                if ":" in line:
                                    try:
                                        label, value = line.split(":", 1)
                                        value = value.strip().replace(",", "").replace(" ", "")
                                        if value.isdigit():
                                            value = f"{int(value):,}"
                                        lines.append(f"{label}: {value}")
                                    except Exception:
                                        continue
                                else:
                                    lines.append(line)
                            
                            if lines:
                                result = "\n".join(lines)
                                await self._funstat_cache.set(user_id, result)
                                return result
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
                    if not found_valid_response and attempt < Config.MAX_ATTEMPTS - 1:
                        await asyncio.sleep(Config.TIMEOUT)
                        continue
                
                except YouBlockedUserError:
                    return self.strings["unblock_bot"]
                except FloodWaitError as e:
                    if attempt < Config.MAX_ATTEMPTS - 1:
                        await asyncio.sleep(e.seconds)
                        continue
                    raise
                except asyncio.TimeoutError:
                    if attempt < Config.MAX_ATTEMPTS - 1:
                        await asyncio.sleep(Config.TIMEOUT)
                        continue
                    return f"{error_msg} (—Ç–∞–π–º–∞—É—Ç)"
            
            return f"{error_msg} (–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã)"
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ funstat: {e}", exc_info=True)
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    async def send_info_message(self, message: Message, entity: Union[User, Channel], info_text: str):
        try:
            photo = await PhotoCache.get_or_download(self._client, entity.id)
            await message.respond(info_text, file=photo if photo else None)
            await message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            raise

    async def userinfocmd(self, message: Message):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .userinfo [@ –∏–ª–∏ ID] –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await utils.answer(message, self.strings["loading"])
        
        try:
            args = utils.get_args_raw(message)
            reply = await message.get_reply_message()
            
            if not args and not reply:
                await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–∞–Ω–∞–ª –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            
            entity = None
            try:
                entity_id = args or (reply.sender_id if reply else None)
                if not entity_id:
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ID")
                    
                entity = await self._client.get_entity(entity_id)
            except (ValueError, AttributeError) as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
                await utils.answer(message, self.strings["not_found"])
                return
                
            try:
                if isinstance(entity, Channel):
                    full_info = await self._client(GetFullChannelRequest(entity))
                    info_text = await self.format_channel_info(entity, full_info)
                else:
                    full_info = await self._client(GetFullUserRequest(entity))
                    info_text = await self.format_user_info(entity, full_info)
                    
                await self.send_info_message(message, entity, info_text)
                
            except UserNotParticipantError:
                await utils.answer(message, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            except MultiError as e:
                if any(isinstance(err, UserNotParticipantError) for err in e.exceptions):
                    await utils.answer(message, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                else:
                    raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", exc_info=True)
                await utils.answer(message, self.strings["error_fetching"].format(str(e)))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
            await utils.answer(message, self.strings["error_fetching"].format(str(e)))

    def _format_status(self, status) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if isinstance(status, UserStatusOnline):
            return "üü¢ –í —Å–µ—Ç–∏"
        elif isinstance(status, UserStatusOffline):
            return f"‚ö´Ô∏è –ë—ã–ª(–∞) {status.was_online.strftime('%d.%m.%Y %H:%M')}"
        elif isinstance(status, UserStatusRecently):
            return "üîµ –ù–µ–¥–∞–≤–Ω–æ"
        return "‚ö´Ô∏è –î–∞–≤–Ω–æ"

    async def get_account_creation_date(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç tgprofile_history_bot"""
        try:
            chat = Config.HISTORY_BOT
            
            await self._client.send_message(chat, str(user_id))
            await asyncio.sleep(Config.TIMEOUT)
            
            messages = await self._client.get_messages(chat, limit=2)
            
            if len(messages) < 2 or not messages[1].text:
                return None
                
            second_message = messages[1].text
            if "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω" in second_message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                creation_date = second_message.split("—Å–æ–∑–¥–∞–Ω –≤ ~")[1].strip()
                return creation_date
            
            return None
                    
        except YouBlockedUserError:
            return "‚ùå –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ @tgprofile_history_bot"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è: {e}", exc_info=True)
            return None

    async def format_user_info(self, user: User, full_user: GetFullUserRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            def add_section(title: str = "", *lines: str) -> None:
                if title:
                    info_parts.extend(["", f"{title}"])
                if lines:
                    info_parts.extend(lines)

            info_parts = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            name = " ".join(filter(None, [user.first_name, user.last_name])) or "üö´"
            info_parts.append(f"üë§ <b>{name}</b>")
            
            # –°—Ç–∞—Ç—É—Å—ã
            status_flags = self._get_entity_flags(user)
            if status_flags:
                info_parts.append(self._format_status_flags(status_flags))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = [
                f"üÜî ID: <code>{user.id}</code>",
                f"üë• –û–±—â–∏–µ —á–∞—Ç—ã: {full_user.full_user.common_chats_count}",
                f"‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {self._format_status(user.status)}"
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            creation_date = await self.get_account_creation_date(user.id)
            if creation_date:
                details.append(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
            if hasattr(full_user.full_user, 'phone_calls_available'):
                calls_available = full_user.full_user.phone_calls_available and getattr(full_user.full_user, 'video_calls_available', False)
                details.append(f"üìû –ó–≤–æ–Ω–∫–∏: {'‚úÖ' if calls_available else '‚ùå'}")
                
            info_parts.extend(self._format_details(details))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if full_user.full_user.about:
                add_section("üìã <b>–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>", f"<i>{full_user.full_user.about}</i>")
            
            # –°—Å—ã–ª–∫–∏
            links = [f"‚îú Permalink: <code>tg://user?id={user.id}</code>"]
            if user.username:
                links.append(f"‚îî Username: @{user.username}")
            else:
                links[0] = links[0].replace("‚îú", "‚îî")
            add_section("üîó <b>–°—Å—ã–ª–∫–∏:</b>", *links)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            funstat_info = await self.get_funstat_info(user.id)
            if funstat_info and not any(err in funstat_info.lower() for err in Config.ERROR_MARKERS):
                add_section("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ funstat:</b>", funstat_info)
            
            return "\n".join(info_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

    async def format_channel_info(self, channel: Channel, full_channel: GetFullChannelRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        info_parts = []
        
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            info_parts.append(f"üì£ <b>{channel.title}</b>")
            
            # –°—Ç–∞—Ç—É—Å—ã
            status_flags = self._get_entity_flags(channel)
            if status_flags:
                info_parts.append(self._format_status_flags(status_flags))
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details = [
                f"üÜî ID: <code>{channel.id}</code>",
                f"üìù Username: @{channel.username or 'üö´'}",
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {full_channel.full_chat.participants_count:,}"
            ]
            
            if full_channel.full_chat.slowmode_seconds:
                details.append(f"‚è± –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {full_channel.full_chat.slowmode_seconds} —Å–µ–∫.")
            if full_channel.full_chat.linked_chat_id:
                details.append(f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç: {full_channel.full_chat.linked_chat_id}")
            
            if full_channel.full_chat.online_count:
                details.append(f"üü¢ –û–Ω–ª–∞–π–Ω: {full_channel.full_chat.online_count:,}")
            
            if full_channel.full_chat.messages_count:
                details.append(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {full_channel.full_chat.messages_count:,}")
                
            details.append(f"üìÇ –¢–∏–ø: {self._get_channel_type(channel)}")
            
            info_parts.extend(self._format_details(details))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            if full_channel.full_chat.about:
                info_parts.extend([
                    "",
                    "üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>",
                    f"<i>{full_channel.full_chat.about}</i>"
                ])
            
            # –°—Å—ã–ª–∫–∏
            links = []
            if channel.username:
                links.append(f"‚îú –ö–∞–Ω–∞–ª: https://t.me/{channel.username}")
            if full_channel.full_chat.invite_link:
                links.append(f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {full_channel.full_chat.invite_link}")
                
            if links:
                info_parts.extend([
                    "",
                    "üîó <b>–°—Å—ã–ª–∫–∏:</b>",
                    *links
                ])
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            features = []
            if channel.signatures:
                features.append("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∏ –∞–≤—Ç–æ—Ä–æ–≤")
            if channel.has_link:
                features.append("üîó –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
            
            if features:
                info_parts.extend([
                    "",
                    "‚öôÔ∏è <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>",
                    " ‚Ä¢ ".join(features)
                ])
            
            return "\n".join(info_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}", exc_info=True)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"

    def _get_channel_type(self, channel: Channel) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞"""
        if channel.megagroup:
            return "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
        elif channel.gigagroup:
            return "Broadcast –≥—Ä—É–ø–ø–∞"
        elif channel.broadcast:
            return "–ö–∞–Ω–∞–ª"
        return "–ì—Ä—É–ø–ø–∞"