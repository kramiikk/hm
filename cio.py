import asyncio
import html
import logging
import os
import re
import time
import bisect
from asyncio import Queue
from typing import List, Dict, Tuple, Optional, Set

import firebase_admin
from firebase_admin import credentials, db as firebase_db
from telethon import errors, types, utils as telethon_utils
from .. import loader, utils

logging.basicConfig(
    format="[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s", level=logging.WARNING
)

# –î–æ–±–∞–≤–ª—è–µ–º name –≤–º–µ—Å—Ç–æ name

log = logging.getLogger(name)


class NgramFirebaseHandler:
    """Handles storage and retrieval of n-grams in Firebase."""

    def init(
        self,
        db_ref: firebase_db.Reference,
        max_entries: int = 1000,
        batch_size: int = 50,
    ):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ init –Ω–∞ init

        self.db_ref = db_ref
        self.max_entries = max_entries
        self.batch_size = batch_size
        self.batch = []
        self.ngram_ref = self.db_ref.child("ngrams/entries")

    async def add_entry(self, ngram_data: dict) -> None:
        """Adds an n-gram entry to the batch. Flushes if batch is full."""
        self.batch.append(ngram_data)
        if len(self.batch) >= self.batch_size:
            await self.flush()

    async def flush(self) -> None:
        """Writes accumulated n-gram entries to Firebase."""
        if not self.batch:
            return
        try:
            current_batch = self.batch[:]
            self.batch.clear()

            current_entries = self.ngram_ref.get() or []
            if not isinstance(current_entries, list):
                log.warning("Invalid data type for n-grams in Firebase. Resetting.")
                current_entries = []
            current_entries.extend(current_batch)
            if len(current_entries) > self.max_entries:
                current_entries = current_entries[-self.max_entries :]
            self.ngram_ref.set(current_entries)
        except Exception as e:
            log.error(f"Error flushing n-grams to Firebase: {e}", exc_info=True)
            self.batch.extend(current_batch)

    async def load_entries(
        self, retention_period: float
    ) -> Dict[int, Tuple[Set[str], float]]:
        """Loads and filters n-gram entries from Firebase."""
        try:
            entries = self.ngram_ref.get() or []
            current_time = time.time()

            ngram_dict = {}
            for entry in entries:
                if isinstance(entry, dict):
                    timestamp = entry.get("timestamp", 0)
                    if current_time - timestamp < retention_period:
                        hash_val = entry.get("hash")
                        ngrams = set(entry.get("ngrams", []))
                        if hash_val and ngrams:
                            ngram_dict[hash_val] = (ngrams, timestamp)
            return ngram_dict
        except Exception as e:
            log.error(f"Error loading n-grams from Firebase: {e}", exc_info=True)
            return {}


class NgramSimilarityChecker:
    """Handles message similarity detection using n-grams."""

    def init(
        self,
        db_ref: firebase_db.Reference,
        n: int = 3,
        similarity_threshold: float = 0.7,
        max_entries: int = 1000,
        retention_period: float = 86400,
    ):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ init –Ω–∞ init

        self.n = n
        self.similarity_threshold = similarity_threshold
        self.retention_period = retention_period
        self.ngram_cache: Dict[int, Tuple[Set[str], float]] = {}
        self.firebase_handler = NgramFirebaseHandler(db_ref, max_entries)

    def generate_ngrams(self, text: str) -> Set[str]:
        """Generate n-grams from input text."""
        text = text.lower().strip()
        padded = f"{'_' * (self.n-1)}{text}{'_' * (self.n-1)}"
        return {padded[i : i + self.n] for i in range(len(padded) - self.n + 1)}

    def calculate_similarity(self, ngrams1: Set[str], ngrams2: Set[str]) -> float:
        """Calculate Jaccard similarity between two sets of n-grams."""
        if not ngrams1 or not ngrams2:
            return 0.0
        intersection = len(ngrams1.intersection(ngrams2))
        union = len(ngrams1.union(ngrams2))
        return intersection / union if union > 0 else 0.0

    async def initialize(self) -> None:
        """Load existing n-grams from Firebase."""
        self.ngram_cache = await self.firebase_handler.load_entries(
            self.retention_period
        )

    async def is_similar_to_cached(self, text: str, timestamp: float) -> bool:
        """Check if text is similar to any cached messages."""
        current_ngrams = self.generate_ngrams(text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, —É–¥–∞–ª—è—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏

        self.ngram_cache = {
            hash_val: (ngrams, ts)
            for hash_val, (ngrams, ts) in self.ngram_cache.items()
            if timestamp - ts < self.retention_period
        }

        for ngrams, _ in self.ngram_cache.values():
            similarity = self.calculate_similarity(current_ngrams, ngrams)
            if similarity >= self.similarity_threshold:
                return True
        cache_key = hash(frozenset(current_ngrams))
        self.ngram_cache[cache_key] = (current_ngrams, timestamp)

        ngram_data = {
            "hash": cache_key,
            "ngrams": list(current_ngrams),
            "timestamp": timestamp,
        }

        await self.firebase_handler.add_entry(ngram_data)
        return False


@loader.tds
class BroadMod(loader.Module):
    """Forwards messages containing specific keywords to a designated channel."""

    strings = {
        "name": "Broad",
        "cfg_firebase_path": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Firebase",
        "cfg_firebase_url": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firebase",
        "cfg_forward_channel": "ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "cfg_ngram_size": "–†–∞–∑–º–µ—Ä n-–≥—Ä–∞–º–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
        "cfg_similarity_threshold": "–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç 0 –¥–æ 1)",
        "cfg_ngram_retention": "–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è n-–≥—Ä–∞–º–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)",
        "cfg_max_ngram_entries": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ n-–≥—Ä–∞–º–º –≤ Firebase",
        "cfg_min_text_length": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        "firebase_init_error": "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {error}",
        "sender_info": "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <a href='{sender_url}'>{sender_name}</a> ({sender_id})\n{scam_warning}\nüí¨ –ò—Å—Ç–æ—á–Ω–∏–∫: <a href='{message_url}'>{chat_title}</a>",
    }

    def init(self):
        self.config = loader.ModuleConfig(
            "firebase_credentials_path",
            "/home/hikka/Hikka/loll-8a3bd-firebase-adminsdk-4pvtd-6b93a17b70.json",
            lambda: self.strings("cfg_firebase_path"),
            "firebase_database_url",
            "https://loll-8a3bd-default-rtdb.firebaseio.com",
            lambda: self.strings("cfg_firebase_url"),
            "forward_channel_id",
            2498567519,
            lambda: self.strings("cfg_forward_channel"),
            "ngram_size",
            3,
            lambda: self.strings("cfg_ngram_size"),
            "similarity_threshold",
            0.7,
            lambda: self.strings("cfg_similarity_threshold"),
            "ngram_retention_period",
            86400,
            lambda: self.strings("cfg_ngram_retention"),
            "max_ngram_entries",
            1000,
            lambda: self.strings("cfg_max_ngram_entries"),
            "min_text_length",
            18,
            lambda: self.strings("cfg_min_text_length"),
            "trading_keywords",
            [
                "–∞–∫–∫",
                "–ø—Ä–æ–¥",
                "–∫—É–ø",
                "–æ–±–º–µ–Ω",
                "–ª–µ–≥",
                "–æ—Ä—É–∂",
                "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã",
                "–∏–≤–µ–Ω—Ç",
                "100",
                "–≥–∞—Ä–∞–Ω—Ç",
                "—É–¥",
                "—É—Ç–µ—Ä",
                "–ª—É–Ω–∞",
                "—Ä–∞–Ω–≥",
                "AR",
                "–∏—â—É",
                "–ø—Ä–∏–æ—Ä",
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç",
                "–µ–≤—Ä–æ",
                "—É—Ä–æ–≤",
                "—Å—Ç–∞—Ä—Ç",
                "—Å–∏–≥–Ω–∞",
                "—Ä—É–±",
                "–∫—Ä—ã–ª",
                "—Å—Ä–æ—á–Ω",
                "–∫—Ç–æ",
            ],
            lambda: "Keywords to trigger forwarding (list of strings)",
        )
        self.message_queue: Queue = Queue()
        self.processing_task: Optional[asyncio.Task] = None
        self.allowed_chats: List[int] = []
        self.firebase_app = None
        self.db_ref: Optional[firebase_db.Reference] = None
        self.similarity_checker: Optional[NgramSimilarityChecker] = None
        self.initialized: bool = False
        self.client = None
        super().init()

    async def _initialize_firebase(self) -> bool:
        """Initialize Firebase connection."""
        try:
            if not firebase_admin._apps:
                cred = credentials.Certificate(self.config["firebase_credentials_path"])
                self.firebase_app = firebase_admin.initialize_app(
                    cred, {"databaseURL": self.config["firebase_database_url"]}
                )
            self.db_ref = firebase_db.reference("/")
            return True
        except Exception as e:
            log.error(self.strings["firebase_init_error"].format(error=str(e)))
            return False

    async def client_ready(self, client, db) -> None:
        """Initializes the module when the Telethon client is ready."""
        self.client = client

        if not self.config["firebase_credentials_path"] or not os.path.exists(
            self.config["firebase_credentials_path"]
        ):
            log.warning("‚ùå Firebase credentials file not found or path is incorrect.")
            return
        if not self.config["firebase_database_url"]:
            log.warning("‚ùå Firebase database URL is not configured.")
            return
        if not await self._initialize_firebase():
            return
        try:
            self.similarity_checker = NgramSimilarityChecker(
                db_ref=self.db_ref,
                n=self.config["ngram_size"],
                similarity_threshold=self.config["similarity_threshold"],
                max_entries=self.config["max_ngram_entries"],
                retention_period=self.config["ngram_retention_period"],
            )

            await self.similarity_checker.initialize()

            chats_ref = self.db_ref.child("allowed_chats")
            chats_data = chats_ref.get()
            self.allowed_chats = chats_data if isinstance(chats_data, list) else []

            self.initialized = True
        except Exception as e:
            log.error(f"‚ùå Error loading data from Firebase: {e}")
            self.initialized = False
        if not self.processing_task:
            self.processing_task = asyncio.create_task(self.process_queue())

    async def process_queue(self) -> None:
        """Processes messages from the queue with a delay."""
        while True:
            messages, sender_info = await self.message_queue.get()
            try:
                await asyncio.sleep(13)
                forwarded = await self.client.forward_messages(
                    entity=self.config["forward_channel_id"], messages=messages
                )

                if forwarded:
                    reply_to_id = (
                        forwarded[0].id if isinstance(forwarded, list) else forwarded.id
                    )
                    await self.client.send_message(
                        entity=self.config["forward_channel_id"],
                        message=self.strings["sender_info"].format(**sender_info),
                        reply_to=reply_to_id,
                        parse_mode="html",
                        link_preview=False,
                    )
            except errors.FloodWaitError as e:
                await asyncio.sleep(900 + e.seconds)
            except Exception as e:
                log.error(f"Error processing message: {e}", exc_info=True)
            finally:
                self.message_queue.task_done()

    @loader.command
    async def managecmd(self, message: types.Message) -> None:
        """Manages the list of allowed chats."""
        if not self.initialized:
            await message.reply(
                "‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase."
            )
            return
        try:
            args = message.text.split()

            if len(args) != 2:
                response = "üìù –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n"
                response += (
                    ", ".join(map(str, self.allowed_chats))
                    if self.allowed_chats
                    else "–ø—É—Å—Ç"
                )
                await message.reply(response)
                return
            try:
                chat_id = int(args[1])
            except ValueError:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
                )
                return
            if chat_id in self.allowed_chats:
                self.allowed_chats.remove(chat_id)
                txt = f"‚ùå –ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞."
            else:
                self.allowed_chats.append(chat_id)
                txt = f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫."
            if self.db_ref:
                chats_ref = self.db_ref.child("allowed_chats")
                chats_ref.set(self.allowed_chats)
                await message.reply(txt)
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Firebase.")
        except Exception as e:
            log.error(f"Error in managecmd: {e}", exc_info=True)
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤: {str(e)}")

    async def watcher(self, message: types.Message) -> None:
        """Process and forward messages"""
        if not message or not hasattr(message, "chat_id"):
            return
        if (
            not self.initialized
            or message.chat_id not in self.allowed_chats
            or (sender := getattr(message, "sender", None)) is None
            or getattr(sender, "bot", False)
        ):
            return
        try:
            text_to_check = message.text or ""
            if len(text_to_check) < self.config["min_text_length"]:
                return
            low = text_to_check.lower()
            found_keywords = [kw for kw in self.config["trading_keywords"] if kw in low]
            if not found_keywords:
                return
            normalized_text = html.unescape(
                re.sub(r"<[^>]+>|[^\w\s,.!?;:‚Äî]|\s+", " ", low)
            ).strip()
            if not normalized_text:
                return
            current_time = time.time()
            if not self.similarity_checker:
                log.error("Similarity checker not initialized")
                return
            if await self.similarity_checker.is_similar_to_cached(
                normalized_text, current_time
            ):
                return
            messages = []
            if hasattr(message, "grouped_id") and message.grouped_id:
                grouped_messages = []
                async for msg in self.client.iter_messages(
                    message.chat_id, limit=10, offset_date=message.date
                ):
                    if (
                        hasattr(msg, "grouped_id")
                        and msg.grouped_id == message.grouped_id
                    ):
                        grouped_messages.append(msg)
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID

                messages = sorted(grouped_messages, key=lambda m: m.id)
            else:
                messages = [message]
            sender_info = await self._get_sender_info(message)
            if sender_info:
                await self.message_queue.put((messages, sender_info))
        except Exception as e:
            log.error(f"Error in watcher: {e}", exc_info=True)














# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å NgramFirebaseHandler –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:


class NgramFirebaseHandler:
    def init(
        self,
        db_ref: firebase_db.Reference,
        max_entries: int = 1000,
        batch_size: int = 50,
        cleanup_threshold: int = 5000,  # –ü–æ—Ä–æ–≥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        max_cleanup_attempts: int = 3,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏
    ):
        self.db_ref = db_ref
        self.max_entries = max_entries
        self.batch_size = batch_size
        self.batch = []
        self.ngram_ref = self.db_ref.child("ngrams/entries")
        self.cleanup_threshold = cleanup_threshold
        self.max_cleanup_attempts = max_cleanup_attempts
        self.last_cleanup_time = 0
        self.cleanup_interval = 3600  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—á–∏—Å—Ç–∫–∞–º–∏ (1 —á–∞—Å)

    async def cleanup_old_ngrams(self, retention_period: float) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ n-–≥—Ä–∞–º–º—ã –∏–∑ Firebase.

        Args:
            retention_period: –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏

        if current_time - self.last_cleanup_time < self.cleanup_interval:
            return True
        for attempt in range(self.max_cleanup_attempts):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

                entries = self.ngram_ref.get() or []
                if not isinstance(entries, list):
                    log.warning(
                        "Invalid data type for n-grams in Firebase during cleanup"
                    )
                    return False
                # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏

                filtered_entries = [
                    entry
                    for entry in entries
                    if isinstance(entry, dict)
                    and current_time - entry.get("timestamp", 0) < retention_period
                ]

                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

                if len(filtered_entries) == len(entries):
                    return True
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ Firebase

                self.ngram_ref.set(filtered_entries)
                self.last_cleanup_time = current_time

                log.info(
                    f"Cleaned up {len(entries) - len(filtered_entries)} old n-grams"
                )
                return True
            except Exception as e:
                log.error(f"Cleanup attempt {attempt + 1} failed: {e}")
                await asyncio.sleep(2**attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return False

    async def check_and_cleanup(self, retention_period: float) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            entries = self.ngram_ref.get() or []
            if isinstance(entries, list) and len(entries) > self.cleanup_threshold:
                await self.cleanup_old_ngrams(retention_period)
        except Exception as e:
            log.error(f"Error during cleanup check: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å BroadMod –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:


@loader.tds
class BroadMod(loader.Module):
    strings = {
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏) ...
        "reconnecting": "üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase...",
        "reconnection_success": "‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "reconnection_failed": "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: {error}",
        "cleanup_success": "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö n-–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        "cleanup_failed": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö n-–≥—Ä–∞–º–º: {error}",
    }

    def init(self):
        # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è) ...

        self.reconnection_attempts = 0
        self.max_reconnection_attempts = 5
        self.last_reconnection_time = 0
        self.reconnection_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        super().init()

    async def _ensure_firebase_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if self.initialized and self.db_ref:
            try:
                # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

                self.db_ref.child("test_connection").get()
                return True
            except Exception as e:
                log.warning(f"Firebase connection test failed: {e}")
        current_time = time.time()
        if (
            self.reconnection_attempts >= self.max_reconnection_attempts
            or current_time - self.last_reconnection_time < self.reconnection_cooldown
        ):
            return False
        try:
            log.info(self.strings["reconnecting"])
            self.reconnection_attempts += 1
            self.last_reconnection_time = current_time

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase

            if await self._initialize_firebase():
                # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ n-–≥—Ä–∞–º–º

                self.similarity_checker = NgramSimilarityChecker(
                    db_ref=self.db_ref,
                    n=self.config["ngram_size"],
                    similarity_threshold=self.config["similarity_threshold"],
                    max_entries=self.config["max_ngram_entries"],
                    retention_period=self.config["ngram_retention_period"],
                )
                await self.similarity_checker.initialize()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

                chats_ref = self.db_ref.child("allowed_chats")
                chats_data = chats_ref.get()
                self.allowed_chats = chats_data if isinstance(chats_data, list) else []

                self.initialized = True
                self.reconnection_attempts = (
                    0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                )
                log.info(self.strings["reconnection_success"])
                return True
        except Exception as e:
            log.error(self.strings["reconnection_failed"].format(error=str(e)))
        return False

    @loader.command
    async def cleanupcmd(self, message: types.Message) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ n-–≥—Ä–∞–º–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if not self.initialized or not self.similarity_checker:
            await message.reply("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
        try:
            if not await self._ensure_firebase_connection():
                await message.reply("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase.")
                return
            await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö n-–≥—Ä–∞–º–º...")

            success = await self.similarity_checker.firebase_handler.cleanup_old_ngrams(
                self.config["ngram_retention_period"]
            )

            if success:
                await message.reply(self.strings["cleanup_success"])
            else:
                await message.reply(
                    self.strings["cleanup_failed"].format(
                        error="–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
                    )
                )
        except Exception as e:
            await message.reply(self.strings["cleanup_failed"].format(error=str(e)))

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ watcher –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

    async def watcher(self, message: types.Message) -> None:
        """Process and forward messages"""
        if not message or not hasattr(message, "chat_id"):
            return
        if (
            not self.initialized
            or message.chat_id not in self.allowed_chats
            or (sender := getattr(message, "sender", None)) is None
            or getattr(sender, "bot", False)
        ):
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase

        if not await self._ensure_firebase_connection():
            log.error("Firebase connection lost and reconnection failed")
            return
        try:
            # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ watcher) ...

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏

            await self.similarity_checker.firebase_handler.check_and_cleanup(
                self.config["ngram_retention_period"]
            )

            # ... (–æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–¥ watcher) ...
        except Exception as e:
            log.error(f"Error in watcher: {e}", exc_info=True)
